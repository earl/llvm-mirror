; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -disable-basicaa -cfl-anders-aa -aa-eval -print-all-alias-modref-info -disable-output 2>&1 | FileCheck %s
; RUN: opt < %s -aa-pipeline=cfl-anders-aa -passes=aa-eval -print-all-alias-modref-info -disable-output 2>&1 | FileCheck %s

; CHECK: Function: test_simple_offsets
; CHECK: NoAlias: i64* %b, i64** %acast
; CHECK: NoAlias: i64** %acast, i64** %aoff
; CHECK: NoAlias: i64* %b, i64** %acastoff
; CHECK: NoAlias: i64** %acast, i64** %acastoff
; CHECK: NoAlias: [2 x i64*]* %a, i64* %acastload
; CHECK: MayAlias: i64* %acastload, i64* %b
; CHECK: NoAlias: i64* %acastload, i64** %aoff
; CHECK: NoAlias: i64* %acastload, i64** %acast
; CHECK: NoAlias: i64* %acastload, i64** %acastoff
define void @test_simple_offsets() {
  %a = alloca [2 x i64*], align 8
  %b = alloca i64, align 4
  %aoff = getelementptr inbounds [2 x i64*], [2 x i64*]* %a, i64 0, i64 1
  store i64* %b, i64** %aoff

  %acast = bitcast [2 x i64*]* %a to i64**
  %acastoff = getelementptr inbounds i64*, i64** %acast, i64 1
  %acastload = load i64*, i64** %acastoff
  ret void
}

; CHECK: Function: test_unknown_offset
; CHECK: MayAlias: [3 x i32]* %a, i32* %an
; CHECK: MayAlias: i32* %a4, i32* %an
; CHECK: MayAlias: i32* %a8, i32* %an
; CHECK: MayAlias: i32* %an, i32* %b
; CHECK: MayAlias: [3 x i32]* %a, i32* %bn
; CHECK: MayAlias: i32* %a4, i32* %bn
; CHECK: MayAlias: i32* %a8, i32* %bn
; CHECK: MayAlias: i32* %an, i32* %bn
; CHECK: MayAlias: i32* %b, i32* %bn
define void @test_unknown_offset(i32 %n) {
  %a = alloca [3 x i32], align 4
  %a4 = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 1
  %a8 = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 2
  %an = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 %n
  %b = bitcast [3 x i32]* %a to i32*
  %bn = getelementptr inbounds i32, i32* %b, i32 %n
  ret void
}


%S = type { i32, i32, i32 }

define i32* @return_arg(%S* %arg1, %S* %arg2) {
  %acast = bitcast %S* %arg1 to i32*
  %aoffset = getelementptr i32, i32* %acast, i32 1
  ret i32* %aoffset
}

define i32* @return_derefence_arg(%S** %arg1) {
  %deref = load %S*, %S** %arg1
  %deref2 = getelementptr %S, %S* %deref, i32 0, i32 1
  ret i32* %deref2
}

; CHECK-LABEL: Function: test_return_arg_offset
; CHECK: NoAlias: %S* %a, %S* %b
; CHECK: MayAlias: %S* %a, i32* %c
; CHECK: NoAlias: %S* %b, i32* %c
; CHECK: NoAlias: i32* %acast, i32* %c
; CHECK: NoAlias: i32* %acast, i32* %d
define void @test_return_arg_offset() {
  %a = alloca %S, align 8
  %b = alloca %S, align 8

  %c = call i32* @return_arg(%S* %a, %S* %b)
  %d = getelementptr %S, %S* %a, i32 0, i32 1
  %acast = bitcast %S* %a to i32*

  ret void
}

; CHECK-LABEL: Function: test_return_derefence_arg
; CHECK: NoAlias: %S** %p, i32* %c
; CHECK: NoAlias: %S* %lp, %S** %p
; CHECK: MayAlias: %S* %lp, i32* %c
; CHECK: NoAlias: %S** %p, i32* %lp_off
; CHECK: MayAlias: i32* %c, i32* %lp_off
; CHECK: MayAlias: %S* %lp, i32* %lp_off
; CHECK: NoAlias: %S** %p, i32* %acast
; CHECK: NoAlias: i32* %acast, i32* %c
; CHECK: MayAlias: %S* %lp, i32* %acast
; CHECK: NoAlias: i32* %acast, i32* %lp_off
define void @test_return_derefence_arg() {
  %a = alloca %S, align 8
  %p = alloca %S*, align 8

  store %S* %a, %S** %p
  %c = call i32* @return_derefence_arg(%S** %p)

  %lp = load %S*, %S** %p
  %lp_off = getelementptr %S, %S* %lp, i32 0, i32 1
  %acast = bitcast %S* %a to i32*

  ret void
}
