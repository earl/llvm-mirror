; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O0 -mattr=+mmx,+sse2 | FileCheck %s
; PR4684

target datalayout =
"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"
target triple = "x86_64-apple-darwin9.8"

declare void @func2(x86_mmx)

; This isn't spectacular, but it's MMX code at -O0...
; For now, handling of x86_mmx parameters in fast Isel is unimplemented,
; so we get pretty poor code.  The below is preferable.
; CHEK: movl $2, %eax
; CHEK: movd %rax, %mm0
; CHEK: movd %mm0, %rdi

define void @func1() nounwind {
; CHECK-LABEL: func1:
; CHECK:       ## %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $2, %eax
; CHECK-NEXT:    movl %eax, %ecx
; CHECK-NEXT:    movq %rcx, %xmm0
; CHECK-NEXT:    pslldq {{.*#+}} xmm0 = zero,zero,zero,zero,zero,zero,zero,zero,xmm0[0,1,2,3,4,5,6,7]
; CHECK-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,2,2,3]
; CHECK-NEXT:    movq %xmm0, (%rsp)
; CHECK-NEXT:    movq (%rsp), %mm0
; CHECK-NEXT:    movq2dq %mm0, %xmm0
; CHECK-NEXT:    callq _func2
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
  %tmp0 = bitcast <2 x i32> <i32 0, i32 2> to x86_mmx
  call void @func2(x86_mmx %tmp0)
  ret void
}
