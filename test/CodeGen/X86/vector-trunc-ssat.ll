; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefix=SSE --check-prefix=SSE2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+ssse3 | FileCheck %s --check-prefix=SSE --check-prefix=SSSE3
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse4.1 | FileCheck %s --check-prefix=SSE --check-prefix=SSE41
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx | FileCheck %s --check-prefix=AVX --check-prefix=AVX1
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s --check-prefixes=AVX,AVX2,AVX2-SLOW
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2,+fast-variable-shuffle | FileCheck %s --check-prefixes=AVX,AVX2,AVX2-FAST
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512f | FileCheck %s --check-prefix=AVX512 --check-prefix=AVX512F
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vl,+fast-variable-shuffle | FileCheck %s --check-prefixes=AVX512,AVX512VL
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512bw,+fast-variable-shuffle | FileCheck %s --check-prefixes=AVX512,AVX512BW
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512bw,+avx512vl,+fast-variable-shuffle | FileCheck %s --check-prefixes=AVX512,AVX512BWVL

;
; Signed saturation truncation to vXi32
;

define <4 x i32> @trunc_ssat_v4i64_v4i32(<4 x i64> %a0) {
; SSE2-LABEL: trunc_ssat_v4i64_v4i32:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm3 = [2147483648,0,2147483648,0]
; SSE2-NEXT:    movdqa %xmm0, %xmm2
; SSE2-NEXT:    pxor %xmm3, %xmm2
; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [4294967295,4294967295]
; SSE2-NEXT:    movdqa %xmm4, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm4, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm2[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm2
; SSE2-NEXT:    movdqa %xmm1, %xmm5
; SSE2-NEXT:    pxor %xmm3, %xmm5
; SSE2-NEXT:    movdqa %xmm4, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm4, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm5, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [2147483647,2147483647]
; SSE2-NEXT:    pand %xmm4, %xmm1
; SSE2-NEXT:    pandn %xmm5, %xmm4
; SSE2-NEXT:    por %xmm1, %xmm4
; SSE2-NEXT:    pand %xmm2, %xmm0
; SSE2-NEXT:    pandn %xmm5, %xmm2
; SSE2-NEXT:    por %xmm0, %xmm2
; SSE2-NEXT:    movdqa %xmm2, %xmm0
; SSE2-NEXT:    pxor %xmm3, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [18446744069414584320,18446744069414584320]
; SSE2-NEXT:    movdqa %xmm0, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm1, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm0[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm0
; SSE2-NEXT:    pxor %xmm4, %xmm3
; SSE2-NEXT:    movdqa %xmm3, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm1, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm3[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [18446744071562067968,18446744071562067968]
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm1, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    pand %xmm0, %xmm2
; SSE2-NEXT:    pandn %xmm1, %xmm0
; SSE2-NEXT:    por %xmm2, %xmm0
; SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm3[0,2]
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v4i64_v4i32:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm3 = [2147483648,0,2147483648,0]
; SSSE3-NEXT:    movdqa %xmm0, %xmm2
; SSSE3-NEXT:    pxor %xmm3, %xmm2
; SSSE3-NEXT:    movdqa {{.*#+}} xmm4 = [4294967295,4294967295]
; SSSE3-NEXT:    movdqa %xmm4, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm4, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm2[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm2
; SSSE3-NEXT:    movdqa %xmm1, %xmm5
; SSSE3-NEXT:    pxor %xmm3, %xmm5
; SSSE3-NEXT:    movdqa %xmm4, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm5, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm4, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm5, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [2147483647,2147483647]
; SSSE3-NEXT:    pand %xmm4, %xmm1
; SSSE3-NEXT:    pandn %xmm5, %xmm4
; SSSE3-NEXT:    por %xmm1, %xmm4
; SSSE3-NEXT:    pand %xmm2, %xmm0
; SSSE3-NEXT:    pandn %xmm5, %xmm2
; SSSE3-NEXT:    por %xmm0, %xmm2
; SSSE3-NEXT:    movdqa %xmm2, %xmm0
; SSSE3-NEXT:    pxor %xmm3, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [18446744069414584320,18446744069414584320]
; SSSE3-NEXT:    movdqa %xmm0, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm1, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm0[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm0
; SSSE3-NEXT:    pxor %xmm4, %xmm3
; SSSE3-NEXT:    movdqa %xmm3, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm1, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm3[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [18446744071562067968,18446744071562067968]
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm1, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    pand %xmm0, %xmm2
; SSSE3-NEXT:    pandn %xmm1, %xmm0
; SSSE3-NEXT:    por %xmm2, %xmm0
; SSSE3-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm3[0,2]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v4i64_v4i32:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa %xmm0, %xmm2
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [2147483648,0,2147483648,0]
; SSE41-NEXT:    pxor %xmm4, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm5 = [4294967295,4294967295]
; SSE41-NEXT:    movdqa %xmm5, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm5, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm3
; SSE41-NEXT:    movdqa %xmm1, %xmm0
; SSE41-NEXT:    pxor %xmm4, %xmm0
; SSE41-NEXT:    movdqa %xmm5, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm5, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm5 = [2147483647,2147483647]
; SSE41-NEXT:    movapd %xmm5, %xmm6
; SSE41-NEXT:    blendvpd %xmm0, %xmm1, %xmm6
; SSE41-NEXT:    movdqa %xmm3, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm2, %xmm5
; SSE41-NEXT:    movapd %xmm5, %xmm0
; SSE41-NEXT:    xorpd %xmm4, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [18446744069414584320,18446744069414584320]
; SSE41-NEXT:    movapd %xmm0, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm1
; SSE41-NEXT:    xorpd %xmm6, %xmm4
; SSE41-NEXT:    movapd %xmm4, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm0[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm4[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm2, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm2 = [18446744071562067968,18446744071562067968]
; SSE41-NEXT:    movapd %xmm2, %xmm3
; SSE41-NEXT:    blendvpd %xmm0, %xmm6, %xmm3
; SSE41-NEXT:    movdqa %xmm1, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm5, %xmm2
; SSE41-NEXT:    shufps {{.*#+}} xmm2 = xmm2[0,2],xmm3[0,2]
; SSE41-NEXT:    movaps %xmm2, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v4i64_v4i32:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [2147483647,2147483647]
; AVX1-NEXT:    vpcmpgtq %xmm1, %xmm2, %xmm1
; AVX1-NEXT:    vpcmpgtq %xmm0, %xmm2, %xmm2
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm2, %ymm1
; AVX1-NEXT:    vmovapd {{.*#+}} ymm2 = [2147483647,2147483647,2147483647,2147483647]
; AVX1-NEXT:    vblendvpd %ymm1, %ymm0, %ymm2, %ymm0
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [18446744071562067968,18446744071562067968]
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm0, %xmm2
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm2, %ymm1
; AVX1-NEXT:    vmovapd {{.*#+}} ymm2 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX1-NEXT:    vblendvpd %ymm1, %ymm0, %ymm2, %ymm0
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vshufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,2]
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-SLOW-LABEL: trunc_ssat_v4i64_v4i32:
; AVX2-SLOW:       # %bb.0:
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [2147483647,2147483647,2147483647,2147483647]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm0, %ymm1, %ymm2
; AVX2-SLOW-NEXT:    vblendvpd %ymm2, %ymm0, %ymm1, %ymm0
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm1, %ymm0, %ymm2
; AVX2-SLOW-NEXT:    vblendvpd %ymm2, %ymm0, %ymm1, %ymm0
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-SLOW-NEXT:    vzeroupper
; AVX2-SLOW-NEXT:    retq
;
; AVX2-FAST-LABEL: trunc_ssat_v4i64_v4i32:
; AVX2-FAST:       # %bb.0:
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [2147483647,2147483647,2147483647,2147483647]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm0, %ymm1, %ymm2
; AVX2-FAST-NEXT:    vblendvpd %ymm2, %ymm0, %ymm1, %ymm0
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm1, %ymm0, %ymm2
; AVX2-FAST-NEXT:    vblendvpd %ymm2, %ymm0, %ymm1, %ymm0
; AVX2-FAST-NEXT:    vmovapd {{.*#+}} ymm1 = [0,2,4,6,4,6,6,7]
; AVX2-FAST-NEXT:    vpermps %ymm0, %ymm1, %ymm0
; AVX2-FAST-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-FAST-NEXT:    vzeroupper
; AVX2-FAST-NEXT:    retq
;
; AVX512F-LABEL: trunc_ssat_v4i64_v4i32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    # kill: def $ymm0 killed $ymm0 def $zmm0
; AVX512F-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [2147483647,2147483647,2147483647,2147483647]
; AVX512F-NEXT:    vpminsq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX512F-NEXT:    vpmaxsq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vpmovqd %zmm0, %ymm0
; AVX512F-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
;
; AVX512VL-LABEL: trunc_ssat_v4i64_v4i32:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vpmovsqd %ymm0, %xmm0
; AVX512VL-NEXT:    vzeroupper
; AVX512VL-NEXT:    retq
;
; AVX512BW-LABEL: trunc_ssat_v4i64_v4i32:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    # kill: def $ymm0 killed $ymm0 def $zmm0
; AVX512BW-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [2147483647,2147483647,2147483647,2147483647]
; AVX512BW-NEXT:    vpminsq %zmm1, %zmm0, %zmm0
; AVX512BW-NEXT:    vpbroadcastq {{.*#+}} ymm1 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX512BW-NEXT:    vpmaxsq %zmm1, %zmm0, %zmm0
; AVX512BW-NEXT:    vpmovqd %zmm0, %ymm0
; AVX512BW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512BW-NEXT:    vzeroupper
; AVX512BW-NEXT:    retq
;
; AVX512BWVL-LABEL: trunc_ssat_v4i64_v4i32:
; AVX512BWVL:       # %bb.0:
; AVX512BWVL-NEXT:    vpmovsqd %ymm0, %xmm0
; AVX512BWVL-NEXT:    vzeroupper
; AVX512BWVL-NEXT:    retq
  %1 = icmp slt <4 x i64> %a0, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2 = select <4 x i1> %1, <4 x i64> %a0, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3 = icmp sgt <4 x i64> %2, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4 = select <4 x i1> %3, <4 x i64> %2, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5 = trunc <4 x i64> %4 to <4 x i32>
  ret <4 x i32> %5
}


define <8 x i32> @trunc_ssat_v8i64_v8i32(<8 x i64> %a0) {
; SSE2-LABEL: trunc_ssat_v8i64_v8i32:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [2147483648,0,2147483648,0]
; SSE2-NEXT:    movdqa %xmm0, %xmm5
; SSE2-NEXT:    pxor %xmm6, %xmm5
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [4294967295,4294967295]
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm5, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE2-NEXT:    pand %xmm4, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm5, %xmm8
; SSE2-NEXT:    movdqa %xmm1, %xmm4
; SSE2-NEXT:    pxor %xmm6, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm11 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm11
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    pxor %xmm6, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm12
; SSE2-NEXT:    movdqa %xmm3, %xmm4
; SSE2-NEXT:    pxor %xmm6, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [2147483647,2147483647]
; SSE2-NEXT:    pand %xmm4, %xmm3
; SSE2-NEXT:    pandn %xmm5, %xmm4
; SSE2-NEXT:    por %xmm3, %xmm4
; SSE2-NEXT:    pand %xmm12, %xmm2
; SSE2-NEXT:    pandn %xmm5, %xmm12
; SSE2-NEXT:    por %xmm2, %xmm12
; SSE2-NEXT:    pand %xmm11, %xmm1
; SSE2-NEXT:    pandn %xmm5, %xmm11
; SSE2-NEXT:    por %xmm1, %xmm11
; SSE2-NEXT:    pand %xmm8, %xmm0
; SSE2-NEXT:    pandn %xmm5, %xmm8
; SSE2-NEXT:    por %xmm0, %xmm8
; SSE2-NEXT:    movdqa %xmm8, %xmm0
; SSE2-NEXT:    pxor %xmm6, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [18446744069414584320,18446744069414584320]
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[1,1,3,3]
; SSE2-NEXT:    pand %xmm2, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE2-NEXT:    por %xmm5, %xmm0
; SSE2-NEXT:    movdqa %xmm11, %xmm1
; SSE2-NEXT:    pxor %xmm6, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm5, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm2
; SSE2-NEXT:    movdqa %xmm12, %xmm1
; SSE2-NEXT:    pxor %xmm6, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm5[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm5[1,1,3,3]
; SSE2-NEXT:    por %xmm3, %xmm1
; SSE2-NEXT:    pxor %xmm4, %xmm6
; SSE2-NEXT:    movdqa %xmm6, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm3[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSE2-NEXT:    pand %xmm5, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE2-NEXT:    por %xmm6, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [18446744071562067968,18446744071562067968]
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm5, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    pand %xmm1, %xmm12
; SSE2-NEXT:    pandn %xmm5, %xmm1
; SSE2-NEXT:    por %xmm12, %xmm1
; SSE2-NEXT:    shufps {{.*#+}} xmm1 = xmm1[0,2],xmm3[0,2]
; SSE2-NEXT:    pand %xmm2, %xmm11
; SSE2-NEXT:    pandn %xmm5, %xmm2
; SSE2-NEXT:    por %xmm11, %xmm2
; SSE2-NEXT:    pand %xmm0, %xmm8
; SSE2-NEXT:    pandn %xmm5, %xmm0
; SSE2-NEXT:    por %xmm8, %xmm0
; SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm2[0,2]
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v8i64_v8i32:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm6 = [2147483648,0,2147483648,0]
; SSSE3-NEXT:    movdqa %xmm0, %xmm5
; SSSE3-NEXT:    pxor %xmm6, %xmm5
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [4294967295,4294967295]
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm5, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSSE3-NEXT:    pand %xmm4, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm5, %xmm8
; SSSE3-NEXT:    movdqa %xmm1, %xmm4
; SSSE3-NEXT:    pxor %xmm6, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm11 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm11
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    pxor %xmm6, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm12
; SSSE3-NEXT:    movdqa %xmm3, %xmm4
; SSSE3-NEXT:    pxor %xmm6, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [2147483647,2147483647]
; SSSE3-NEXT:    pand %xmm4, %xmm3
; SSSE3-NEXT:    pandn %xmm5, %xmm4
; SSSE3-NEXT:    por %xmm3, %xmm4
; SSSE3-NEXT:    pand %xmm12, %xmm2
; SSSE3-NEXT:    pandn %xmm5, %xmm12
; SSSE3-NEXT:    por %xmm2, %xmm12
; SSSE3-NEXT:    pand %xmm11, %xmm1
; SSSE3-NEXT:    pandn %xmm5, %xmm11
; SSSE3-NEXT:    por %xmm1, %xmm11
; SSSE3-NEXT:    pand %xmm8, %xmm0
; SSSE3-NEXT:    pandn %xmm5, %xmm8
; SSSE3-NEXT:    por %xmm0, %xmm8
; SSSE3-NEXT:    movdqa %xmm8, %xmm0
; SSSE3-NEXT:    pxor %xmm6, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [18446744069414584320,18446744069414584320]
; SSSE3-NEXT:    movdqa %xmm0, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[1,1,3,3]
; SSSE3-NEXT:    pand %xmm2, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSSE3-NEXT:    por %xmm5, %xmm0
; SSSE3-NEXT:    movdqa %xmm11, %xmm1
; SSSE3-NEXT:    pxor %xmm6, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm5, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm2
; SSSE3-NEXT:    movdqa %xmm12, %xmm1
; SSSE3-NEXT:    pxor %xmm6, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm5[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm5[1,1,3,3]
; SSSE3-NEXT:    por %xmm3, %xmm1
; SSSE3-NEXT:    pxor %xmm4, %xmm6
; SSSE3-NEXT:    movdqa %xmm6, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm3[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSSE3-NEXT:    pand %xmm5, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSSE3-NEXT:    por %xmm6, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [18446744071562067968,18446744071562067968]
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm5, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    pand %xmm1, %xmm12
; SSSE3-NEXT:    pandn %xmm5, %xmm1
; SSSE3-NEXT:    por %xmm12, %xmm1
; SSSE3-NEXT:    shufps {{.*#+}} xmm1 = xmm1[0,2],xmm3[0,2]
; SSSE3-NEXT:    pand %xmm2, %xmm11
; SSSE3-NEXT:    pandn %xmm5, %xmm2
; SSSE3-NEXT:    por %xmm11, %xmm2
; SSSE3-NEXT:    pand %xmm0, %xmm8
; SSSE3-NEXT:    pandn %xmm5, %xmm0
; SSSE3-NEXT:    por %xmm8, %xmm0
; SSSE3-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm2[0,2]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v8i64_v8i32:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa %xmm0, %xmm8
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [2147483648,0,2147483648,0]
; SSE41-NEXT:    movdqa %xmm0, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa {{.*#+}} xmm10 = [4294967295,4294967295]
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm9
; SSE41-NEXT:    movdqa %xmm1, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm12 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm12
; SSE41-NEXT:    movdqa %xmm2, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm7
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm7[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm3, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm0, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm5 = [2147483647,2147483647]
; SSE41-NEXT:    movapd %xmm5, %xmm10
; SSE41-NEXT:    blendvpd %xmm0, %xmm3, %xmm10
; SSE41-NEXT:    movapd %xmm5, %xmm11
; SSE41-NEXT:    movdqa %xmm7, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm2, %xmm11
; SSE41-NEXT:    movapd %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm12, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm1, %xmm7
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm5
; SSE41-NEXT:    movapd %xmm5, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm0 = [18446744069414584320,18446744069414584320]
; SSE41-NEXT:    movapd %xmm1, %xmm2
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm8 = xmm2[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm8
; SSE41-NEXT:    movapd %xmm7, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movapd %xmm1, %xmm2
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm2
; SSE41-NEXT:    movapd %xmm11, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm3
; SSE41-NEXT:    xorpd %xmm10, %xmm4
; SSE41-NEXT:    movapd %xmm4, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm1[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm4 = [18446744071562067968,18446744071562067968]
; SSE41-NEXT:    movapd %xmm4, %xmm6
; SSE41-NEXT:    blendvpd %xmm0, %xmm10, %xmm6
; SSE41-NEXT:    movapd %xmm4, %xmm1
; SSE41-NEXT:    movdqa %xmm3, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm11, %xmm1
; SSE41-NEXT:    shufps {{.*#+}} xmm1 = xmm1[0,2],xmm6[0,2]
; SSE41-NEXT:    movapd %xmm4, %xmm3
; SSE41-NEXT:    movdqa %xmm2, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm7, %xmm3
; SSE41-NEXT:    movdqa %xmm8, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm5, %xmm4
; SSE41-NEXT:    shufps {{.*#+}} xmm4 = xmm4[0,2],xmm3[0,2]
; SSE41-NEXT:    movaps %xmm4, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v8i64_v8i32:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [2147483647,2147483647]
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm3, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm1, %xmm3, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm4, %xmm3, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm0, %xmm3, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [2147483647,2147483647,2147483647,2147483647]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [18446744071562067968,18446744071562067968]
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm1, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm0, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vshufps {{.*#+}} xmm1 = xmm1[0,2],xmm2[0,2]
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm2
; AVX1-NEXT:    vshufps {{.*#+}} xmm0 = xmm0[0,2],xmm2[0,2]
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-SLOW-LABEL: trunc_ssat_v8i64_v8i32:
; AVX2-SLOW:       # %bb.0:
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [2147483647,2147483647,2147483647,2147483647]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-SLOW-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-SLOW-NEXT:    retq
;
; AVX2-FAST-LABEL: trunc_ssat_v8i64_v8i32:
; AVX2-FAST:       # %bb.0:
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [2147483647,2147483647,2147483647,2147483647]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744071562067968,18446744071562067968,18446744071562067968,18446744071562067968]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vmovapd {{.*#+}} ymm2 = [0,2,4,6,4,6,6,7]
; AVX2-FAST-NEXT:    vpermps %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpermps %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-FAST-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v8i64_v8i32:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpmovsqd %zmm0, %ymm0
; AVX512-NEXT:    retq
  %1 = icmp slt <8 x i64> %a0, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2 = select <8 x i1> %1, <8 x i64> %a0, <8 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3 = icmp sgt <8 x i64> %2, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4 = select <8 x i1> %3, <8 x i64> %2, <8 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5 = trunc <8 x i64> %4 to <8 x i32>
  ret <8 x i32> %5
}

;
; Signed saturation truncation to vXi16
;

define <8 x i16> @trunc_ssat_v8i64_v8i16(<8 x i64> %a0) {
; SSE2-LABEL: trunc_ssat_v8i64_v8i16:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [2147483648,0,2147483648,0]
; SSE2-NEXT:    movdqa %xmm1, %xmm6
; SSE2-NEXT:    pxor %xmm5, %xmm6
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [2147516415,2147516415]
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSE2-NEXT:    pand %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm6, %xmm8
; SSE2-NEXT:    movdqa %xmm0, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm11
; SSE2-NEXT:    movdqa %xmm3, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm12
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [32767,32767]
; SSE2-NEXT:    pand %xmm4, %xmm2
; SSE2-NEXT:    pandn %xmm6, %xmm4
; SSE2-NEXT:    por %xmm2, %xmm4
; SSE2-NEXT:    pand %xmm12, %xmm3
; SSE2-NEXT:    pandn %xmm6, %xmm12
; SSE2-NEXT:    por %xmm3, %xmm12
; SSE2-NEXT:    pand %xmm11, %xmm0
; SSE2-NEXT:    pandn %xmm6, %xmm11
; SSE2-NEXT:    por %xmm0, %xmm11
; SSE2-NEXT:    pand %xmm8, %xmm1
; SSE2-NEXT:    pandn %xmm6, %xmm8
; SSE2-NEXT:    por %xmm1, %xmm8
; SSE2-NEXT:    movdqa %xmm8, %xmm0
; SSE2-NEXT:    pxor %xmm5, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [18446744071562035200,18446744071562035200]
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm0[1,1,3,3]
; SSE2-NEXT:    pand %xmm2, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE2-NEXT:    por %xmm6, %xmm0
; SSE2-NEXT:    movdqa %xmm11, %xmm1
; SSE2-NEXT:    pxor %xmm5, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm1
; SSE2-NEXT:    movdqa %xmm12, %xmm2
; SSE2-NEXT:    pxor %xmm5, %xmm2
; SSE2-NEXT:    movdqa %xmm2, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm3, %xmm2
; SSE2-NEXT:    pxor %xmm4, %xmm5
; SSE2-NEXT:    movdqa %xmm5, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE2-NEXT:    por %xmm5, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [18446744073709518848,18446744073709518848]
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm5, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    pand %xmm2, %xmm12
; SSE2-NEXT:    pandn %xmm5, %xmm2
; SSE2-NEXT:    por %xmm12, %xmm2
; SSE2-NEXT:    pand %xmm1, %xmm11
; SSE2-NEXT:    pandn %xmm5, %xmm1
; SSE2-NEXT:    por %xmm11, %xmm1
; SSE2-NEXT:    pand %xmm0, %xmm8
; SSE2-NEXT:    pandn %xmm5, %xmm0
; SSE2-NEXT:    por %xmm8, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,2,2,3,4,5,6,7]
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,2,2,3,4,5,6,7]
; SSE2-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm2 = xmm0[0,1,0,2,4,5,6,7]
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm3[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,1,0,2,4,5,6,7]
; SSE2-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = xmm1[0],xmm0[1]
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v8i64_v8i16:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [2147483648,0,2147483648,0]
; SSSE3-NEXT:    movdqa %xmm1, %xmm6
; SSSE3-NEXT:    pxor %xmm5, %xmm6
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [2147516415,2147516415]
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSSE3-NEXT:    pand %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm6, %xmm8
; SSSE3-NEXT:    movdqa %xmm0, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm11
; SSSE3-NEXT:    movdqa %xmm3, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm12
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm6 = [32767,32767]
; SSSE3-NEXT:    pand %xmm4, %xmm2
; SSSE3-NEXT:    pandn %xmm6, %xmm4
; SSSE3-NEXT:    por %xmm2, %xmm4
; SSSE3-NEXT:    pand %xmm12, %xmm3
; SSSE3-NEXT:    pandn %xmm6, %xmm12
; SSSE3-NEXT:    por %xmm3, %xmm12
; SSSE3-NEXT:    pand %xmm11, %xmm0
; SSSE3-NEXT:    pandn %xmm6, %xmm11
; SSSE3-NEXT:    por %xmm0, %xmm11
; SSSE3-NEXT:    pand %xmm8, %xmm1
; SSSE3-NEXT:    pandn %xmm6, %xmm8
; SSSE3-NEXT:    por %xmm1, %xmm8
; SSSE3-NEXT:    movdqa %xmm8, %xmm0
; SSSE3-NEXT:    pxor %xmm5, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [18446744071562035200,18446744071562035200]
; SSSE3-NEXT:    movdqa %xmm0, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm0[1,1,3,3]
; SSSE3-NEXT:    pand %xmm2, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSSE3-NEXT:    por %xmm6, %xmm0
; SSSE3-NEXT:    movdqa %xmm11, %xmm1
; SSSE3-NEXT:    pxor %xmm5, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm1
; SSSE3-NEXT:    movdqa %xmm12, %xmm2
; SSSE3-NEXT:    pxor %xmm5, %xmm2
; SSSE3-NEXT:    movdqa %xmm2, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm3, %xmm2
; SSSE3-NEXT:    pxor %xmm4, %xmm5
; SSSE3-NEXT:    movdqa %xmm5, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSSE3-NEXT:    por %xmm5, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [18446744073709518848,18446744073709518848]
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm5, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    pand %xmm2, %xmm12
; SSSE3-NEXT:    pandn %xmm5, %xmm2
; SSSE3-NEXT:    por %xmm12, %xmm2
; SSSE3-NEXT:    pand %xmm1, %xmm11
; SSSE3-NEXT:    pandn %xmm5, %xmm1
; SSSE3-NEXT:    por %xmm11, %xmm1
; SSSE3-NEXT:    pand %xmm0, %xmm8
; SSSE3-NEXT:    pandn %xmm5, %xmm0
; SSSE3-NEXT:    por %xmm8, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,2,2,3,4,5,6,7]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,2,2,3,4,5,6,7]
; SSSE3-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm2 = xmm0[0,1,0,2,4,5,6,7]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm3[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,1,0,2,4,5,6,7]
; SSSE3-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; SSSE3-NEXT:    movsd {{.*#+}} xmm0 = xmm1[0],xmm0[1]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v8i64_v8i16:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa %xmm0, %xmm8
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [2147483648,0,2147483648,0]
; SSE41-NEXT:    movdqa %xmm3, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa {{.*#+}} xmm10 = [2147516415,2147516415]
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm9
; SSE41-NEXT:    movdqa %xmm2, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm11
; SSE41-NEXT:    movdqa %xmm1, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm7
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm7[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm0, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm0, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm5 = [32767,32767]
; SSE41-NEXT:    movapd %xmm5, %xmm10
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm10
; SSE41-NEXT:    movapd %xmm5, %xmm8
; SSE41-NEXT:    movdqa %xmm7, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm1, %xmm8
; SSE41-NEXT:    movapd %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm11, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm2, %xmm7
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm3, %xmm5
; SSE41-NEXT:    movapd %xmm5, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm0 = [18446744071562035200,18446744071562035200]
; SSE41-NEXT:    movapd %xmm1, %xmm2
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[1,1,3,3]
; SSE41-NEXT:    por %xmm6, %xmm9
; SSE41-NEXT:    movapd %xmm7, %xmm2
; SSE41-NEXT:    xorpd %xmm4, %xmm2
; SSE41-NEXT:    movapd %xmm2, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm2
; SSE41-NEXT:    movapd %xmm8, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm3
; SSE41-NEXT:    xorpd %xmm10, %xmm4
; SSE41-NEXT:    movapd %xmm4, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm1[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm1 = [18446744073709518848,18446744073709518848]
; SSE41-NEXT:    movapd %xmm1, %xmm4
; SSE41-NEXT:    blendvpd %xmm0, %xmm10, %xmm4
; SSE41-NEXT:    movapd %xmm1, %xmm6
; SSE41-NEXT:    movdqa %xmm3, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm6
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    movdqa %xmm2, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm7, %xmm3
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm5, %xmm1
; SSE41-NEXT:    pxor %xmm0, %xmm0
; SSE41-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0],xmm0[1,2,3],xmm1[4],xmm0[5,6,7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm3 = xmm3[0],xmm0[1,2,3],xmm3[4],xmm0[5,6,7]
; SSE41-NEXT:    packusdw %xmm1, %xmm3
; SSE41-NEXT:    pblendw {{.*#+}} xmm6 = xmm6[0],xmm0[1,2,3],xmm6[4],xmm0[5,6,7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0],xmm0[1,2,3],xmm4[4],xmm0[5,6,7]
; SSE41-NEXT:    packusdw %xmm6, %xmm4
; SSE41-NEXT:    packusdw %xmm3, %xmm4
; SSE41-NEXT:    movdqa %xmm4, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v8i64_v8i16:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [32767,32767]
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm3, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm1, %xmm3, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm4, %xmm3, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm0, %xmm3, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [32767,32767,32767,32767]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [18446744073709518848,18446744073709518848]
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm1, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm0, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [18446744073709518848,18446744073709518848,18446744073709518848,18446744073709518848]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vxorpd %xmm3, %xmm3, %xmm3
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm2[0],xmm3[1,2,3],xmm2[4],xmm3[5,6,7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm1 = xmm1[0],xmm3[1,2,3],xmm1[4],xmm3[5,6,7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm2
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm2[0],xmm3[1,2,3],xmm2[4],xmm3[5,6,7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0],xmm3[1,2,3],xmm0[4],xmm3[5,6,7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpackusdw %xmm1, %xmm0, %xmm0
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-SLOW-LABEL: trunc_ssat_v8i64_v8i16:
; AVX2-SLOW:       # %bb.0:
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [32767,32767,32767,32767]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744073709518848,18446744073709518848,18446744073709518848,18446744073709518848]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-SLOW-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-SLOW-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-SLOW-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-SLOW-NEXT:    vzeroupper
; AVX2-SLOW-NEXT:    retq
;
; AVX2-FAST-LABEL: trunc_ssat_v8i64_v8i16:
; AVX2-FAST:       # %bb.0:
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [32767,32767,32767,32767]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744073709518848,18446744073709518848,18446744073709518848,18446744073709518848]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vmovapd {{.*#+}} ymm2 = [0,2,4,6,4,6,6,7]
; AVX2-FAST-NEXT:    vpermps %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpermps %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-FAST-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-FAST-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-FAST-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-FAST-NEXT:    vzeroupper
; AVX2-FAST-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v8i64_v8i16:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpmovsqw %zmm0, %xmm0
; AVX512-NEXT:    vzeroupper
; AVX512-NEXT:    retq
  %1 = icmp slt <8 x i64> %a0, <i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767>
  %2 = select <8 x i1> %1, <8 x i64> %a0, <8 x i64> <i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767, i64 32767>
  %3 = icmp sgt <8 x i64> %2, <i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768>
  %4 = select <8 x i1> %3, <8 x i64> %2, <8 x i64> <i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768, i64 -32768>
  %5 = trunc <8 x i64> %4 to <8 x i16>
  ret <8 x i16> %5
}

define <8 x i16> @trunc_ssat_v8i32_v8i16(<8 x i32> %a0) {
; SSE2-LABEL: trunc_ssat_v8i32_v8i16:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [32767,32767,32767,32767]
; SSE2-NEXT:    movdqa %xmm2, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm3
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm0, %xmm4
; SSE2-NEXT:    pand %xmm4, %xmm0
; SSE2-NEXT:    pandn %xmm2, %xmm4
; SSE2-NEXT:    por %xmm0, %xmm4
; SSE2-NEXT:    pand %xmm3, %xmm1
; SSE2-NEXT:    pandn %xmm2, %xmm3
; SSE2-NEXT:    por %xmm1, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [4294934528,4294934528,4294934528,4294934528]
; SSE2-NEXT:    movdqa %xmm3, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    movdqa %xmm4, %xmm0
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm0
; SSE2-NEXT:    pand %xmm0, %xmm4
; SSE2-NEXT:    pandn %xmm1, %xmm0
; SSE2-NEXT:    por %xmm4, %xmm0
; SSE2-NEXT:    pand %xmm2, %xmm3
; SSE2-NEXT:    pandn %xmm1, %xmm2
; SSE2-NEXT:    por %xmm3, %xmm2
; SSE2-NEXT:    pslld $16, %xmm2
; SSE2-NEXT:    psrad $16, %xmm2
; SSE2-NEXT:    pslld $16, %xmm0
; SSE2-NEXT:    psrad $16, %xmm0
; SSE2-NEXT:    packssdw %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v8i32_v8i16:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [32767,32767,32767,32767]
; SSSE3-NEXT:    movdqa %xmm2, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm3
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm0, %xmm4
; SSSE3-NEXT:    pand %xmm4, %xmm0
; SSSE3-NEXT:    pandn %xmm2, %xmm4
; SSSE3-NEXT:    por %xmm0, %xmm4
; SSSE3-NEXT:    pand %xmm3, %xmm1
; SSSE3-NEXT:    pandn %xmm2, %xmm3
; SSSE3-NEXT:    por %xmm1, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [4294934528,4294934528,4294934528,4294934528]
; SSSE3-NEXT:    movdqa %xmm3, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    movdqa %xmm4, %xmm0
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm0
; SSSE3-NEXT:    pand %xmm0, %xmm4
; SSSE3-NEXT:    pandn %xmm1, %xmm0
; SSSE3-NEXT:    por %xmm4, %xmm0
; SSSE3-NEXT:    pand %xmm2, %xmm3
; SSSE3-NEXT:    pandn %xmm1, %xmm2
; SSSE3-NEXT:    por %xmm3, %xmm2
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; SSSE3-NEXT:    pshufb %xmm1, %xmm2
; SSSE3-NEXT:    pshufb %xmm1, %xmm0
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v8i32_v8i16:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [32767,32767,32767,32767]
; SSE41-NEXT:    pminsd %xmm2, %xmm1
; SSE41-NEXT:    pminsd %xmm2, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [4294934528,4294934528,4294934528,4294934528]
; SSE41-NEXT:    pmaxsd %xmm2, %xmm0
; SSE41-NEXT:    pmaxsd %xmm2, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; SSE41-NEXT:    pshufb %xmm2, %xmm1
; SSE41-NEXT:    pshufb %xmm2, %xmm0
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v8i32_v8i16:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [32767,32767,32767,32767]
; AVX1-NEXT:    vpminsd %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpminsd %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [4294934528,4294934528,4294934528,4294934528]
; AVX1-NEXT:    vpmaxsd %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsd %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; AVX1-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v8i32_v8i16:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [32767,32767,32767,32767,32767,32767,32767,32767]
; AVX2-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528]
; AVX2-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-NEXT:    vzeroupper
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: trunc_ssat_v8i32_v8i16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [32767,32767,32767,32767,32767,32767,32767,32767]
; AVX512F-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528]
; AVX512F-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vpmovdw %zmm0, %ymm0
; AVX512F-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
;
; AVX512VL-LABEL: trunc_ssat_v8i32_v8i16:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vpmovsdw %ymm0, %xmm0
; AVX512VL-NEXT:    vzeroupper
; AVX512VL-NEXT:    retq
;
; AVX512BW-LABEL: trunc_ssat_v8i32_v8i16:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [32767,32767,32767,32767,32767,32767,32767,32767]
; AVX512BW-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX512BW-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528]
; AVX512BW-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512BW-NEXT:    vpmovdw %zmm0, %ymm0
; AVX512BW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512BW-NEXT:    vzeroupper
; AVX512BW-NEXT:    retq
;
; AVX512BWVL-LABEL: trunc_ssat_v8i32_v8i16:
; AVX512BWVL:       # %bb.0:
; AVX512BWVL-NEXT:    vpmovsdw %ymm0, %xmm0
; AVX512BWVL-NEXT:    vzeroupper
; AVX512BWVL-NEXT:    retq
  %1 = icmp slt <8 x i32> %a0, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2 = select <8 x i1> %1, <8 x i32> %a0, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %3 = icmp sgt <8 x i32> %2, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %4 = select <8 x i1> %3, <8 x i32> %2, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %5 = trunc <8 x i32> %4 to <8 x i16>
  ret <8 x i16> %5
}

define <16 x i16> @trunc_ssat_v16i32_v16i16(<16 x i32> %a0) {
; SSE2-LABEL: trunc_ssat_v16i32_v16i16:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm8 = [32767,32767,32767,32767]
; SSE2-NEXT:    movdqa %xmm8, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm4
; SSE2-NEXT:    movdqa %xmm8, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm0, %xmm5
; SSE2-NEXT:    movdqa %xmm8, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm3, %xmm6
; SSE2-NEXT:    movdqa %xmm8, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm7
; SSE2-NEXT:    pand %xmm7, %xmm2
; SSE2-NEXT:    pandn %xmm8, %xmm7
; SSE2-NEXT:    por %xmm2, %xmm7
; SSE2-NEXT:    pand %xmm6, %xmm3
; SSE2-NEXT:    pandn %xmm8, %xmm6
; SSE2-NEXT:    por %xmm3, %xmm6
; SSE2-NEXT:    pand %xmm5, %xmm0
; SSE2-NEXT:    pandn %xmm8, %xmm5
; SSE2-NEXT:    por %xmm0, %xmm5
; SSE2-NEXT:    pand %xmm4, %xmm1
; SSE2-NEXT:    pandn %xmm8, %xmm4
; SSE2-NEXT:    por %xmm1, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm8 = [4294934528,4294934528,4294934528,4294934528]
; SSE2-NEXT:    movdqa %xmm4, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm3
; SSE2-NEXT:    movdqa %xmm5, %xmm0
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm0
; SSE2-NEXT:    movdqa %xmm6, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm2
; SSE2-NEXT:    movdqa %xmm7, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm1
; SSE2-NEXT:    pand %xmm1, %xmm7
; SSE2-NEXT:    pandn %xmm8, %xmm1
; SSE2-NEXT:    por %xmm7, %xmm1
; SSE2-NEXT:    pand %xmm2, %xmm6
; SSE2-NEXT:    pandn %xmm8, %xmm2
; SSE2-NEXT:    por %xmm6, %xmm2
; SSE2-NEXT:    pand %xmm0, %xmm5
; SSE2-NEXT:    pandn %xmm8, %xmm0
; SSE2-NEXT:    por %xmm5, %xmm0
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm8, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    pslld $16, %xmm3
; SSE2-NEXT:    psrad $16, %xmm3
; SSE2-NEXT:    pslld $16, %xmm0
; SSE2-NEXT:    psrad $16, %xmm0
; SSE2-NEXT:    packssdw %xmm3, %xmm0
; SSE2-NEXT:    pslld $16, %xmm2
; SSE2-NEXT:    psrad $16, %xmm2
; SSE2-NEXT:    pslld $16, %xmm1
; SSE2-NEXT:    psrad $16, %xmm1
; SSE2-NEXT:    packssdw %xmm2, %xmm1
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v16i32_v16i16:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm8 = [32767,32767,32767,32767]
; SSSE3-NEXT:    movdqa %xmm8, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm4
; SSSE3-NEXT:    movdqa %xmm8, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm0, %xmm5
; SSSE3-NEXT:    movdqa %xmm8, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm3, %xmm6
; SSSE3-NEXT:    movdqa %xmm8, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm7
; SSSE3-NEXT:    pand %xmm7, %xmm2
; SSSE3-NEXT:    pandn %xmm8, %xmm7
; SSSE3-NEXT:    por %xmm2, %xmm7
; SSSE3-NEXT:    pand %xmm6, %xmm3
; SSSE3-NEXT:    pandn %xmm8, %xmm6
; SSSE3-NEXT:    por %xmm3, %xmm6
; SSSE3-NEXT:    pand %xmm5, %xmm0
; SSSE3-NEXT:    pandn %xmm8, %xmm5
; SSSE3-NEXT:    por %xmm0, %xmm5
; SSSE3-NEXT:    pand %xmm4, %xmm1
; SSSE3-NEXT:    pandn %xmm8, %xmm4
; SSSE3-NEXT:    por %xmm1, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm8 = [4294934528,4294934528,4294934528,4294934528]
; SSSE3-NEXT:    movdqa %xmm4, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm3
; SSSE3-NEXT:    movdqa %xmm5, %xmm0
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm0
; SSSE3-NEXT:    movdqa %xmm6, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm2
; SSSE3-NEXT:    movdqa %xmm7, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm1
; SSSE3-NEXT:    pand %xmm1, %xmm7
; SSSE3-NEXT:    pandn %xmm8, %xmm1
; SSSE3-NEXT:    por %xmm7, %xmm1
; SSSE3-NEXT:    pand %xmm2, %xmm6
; SSSE3-NEXT:    pandn %xmm8, %xmm2
; SSSE3-NEXT:    por %xmm6, %xmm2
; SSSE3-NEXT:    pand %xmm0, %xmm5
; SSSE3-NEXT:    pandn %xmm8, %xmm0
; SSSE3-NEXT:    por %xmm5, %xmm0
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm8, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    pslld $16, %xmm3
; SSSE3-NEXT:    psrad $16, %xmm3
; SSSE3-NEXT:    pslld $16, %xmm0
; SSSE3-NEXT:    psrad $16, %xmm0
; SSSE3-NEXT:    packssdw %xmm3, %xmm0
; SSSE3-NEXT:    pslld $16, %xmm2
; SSSE3-NEXT:    psrad $16, %xmm2
; SSSE3-NEXT:    pslld $16, %xmm1
; SSSE3-NEXT:    psrad $16, %xmm1
; SSSE3-NEXT:    packssdw %xmm2, %xmm1
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v16i32_v16i16:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [32767,32767,32767,32767]
; SSE41-NEXT:    pminsd %xmm4, %xmm1
; SSE41-NEXT:    pminsd %xmm4, %xmm0
; SSE41-NEXT:    pminsd %xmm4, %xmm3
; SSE41-NEXT:    pminsd %xmm2, %xmm4
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [4294934528,4294934528,4294934528,4294934528]
; SSE41-NEXT:    pmaxsd %xmm2, %xmm4
; SSE41-NEXT:    pmaxsd %xmm2, %xmm3
; SSE41-NEXT:    pmaxsd %xmm2, %xmm0
; SSE41-NEXT:    pmaxsd %xmm2, %xmm1
; SSE41-NEXT:    pxor %xmm2, %xmm2
; SSE41-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0],xmm2[1],xmm1[2],xmm2[3],xmm1[4],xmm2[5],xmm1[6],xmm2[7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm0 = xmm0[0],xmm2[1],xmm0[2],xmm2[3],xmm0[4],xmm2[5],xmm0[6],xmm2[7]
; SSE41-NEXT:    packusdw %xmm1, %xmm0
; SSE41-NEXT:    pblendw {{.*#+}} xmm3 = xmm3[0],xmm2[1],xmm3[2],xmm2[3],xmm3[4],xmm2[5],xmm3[6],xmm2[7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0],xmm2[1],xmm4[2],xmm2[3],xmm4[4],xmm2[5],xmm4[6],xmm2[7]
; SSE41-NEXT:    packusdw %xmm3, %xmm4
; SSE41-NEXT:    movdqa %xmm4, %xmm1
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v16i32_v16i16:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [32767,32767,32767,32767]
; AVX1-NEXT:    vpminsd %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpminsd %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpminsd %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpminsd %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [4294934528,4294934528,4294934528,4294934528]
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpxor %xmm3, %xmm3, %xmm3
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm2[0],xmm3[1],xmm2[2],xmm3[3],xmm2[4],xmm3[5],xmm2[6],xmm3[7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm1 = xmm1[0],xmm3[1],xmm1[2],xmm3[3],xmm1[4],xmm3[5],xmm1[6],xmm3[7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm4[0],xmm3[1],xmm4[2],xmm3[3],xmm4[4],xmm3[5],xmm4[6],xmm3[7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0],xmm3[1],xmm0[2],xmm3[3],xmm0[4],xmm3[5],xmm0[6],xmm3[7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v16i32_v16i16:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [32767,32767,32767,32767,32767,32767,32767,32767]
; AVX2-NEXT:    vpminsd %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpminsd %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528,4294934528]
; AVX2-NEXT:    vpmaxsd %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpmaxsd %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vmovdqa {{.*#+}} ymm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-NEXT:    vpshufb %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-NEXT:    vpshufb %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpermq {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v16i32_v16i16:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpmovsdw %zmm0, %ymm0
; AVX512-NEXT:    retq
  %1 = icmp slt <16 x i32> %a0, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2 = select <16 x i1> %1, <16 x i32> %a0, <16 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %3 = icmp sgt <16 x i32> %2, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %4 = select <16 x i1> %3, <16 x i32> %2, <16 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %5 = trunc <16 x i32> %4 to <16 x i16>
  ret <16 x i16> %5
}

;
; Signed saturation truncation to v16i8
;

define <8 x i8> @trunc_ssat_v8i64_v8i8(<8 x i64> %a0) {
; SSE2-LABEL: trunc_ssat_v8i64_v8i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [2147483648,0,2147483648,0]
; SSE2-NEXT:    movdqa %xmm1, %xmm6
; SSE2-NEXT:    pxor %xmm5, %xmm6
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [2147483775,2147483775]
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSE2-NEXT:    pand %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm6, %xmm8
; SSE2-NEXT:    movdqa %xmm0, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm11
; SSE2-NEXT:    movdqa %xmm3, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm4, %xmm12
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    pxor %xmm5, %xmm4
; SSE2-NEXT:    movdqa %xmm9, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm4, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm6 = [127,127]
; SSE2-NEXT:    pand %xmm4, %xmm2
; SSE2-NEXT:    pandn %xmm6, %xmm4
; SSE2-NEXT:    por %xmm2, %xmm4
; SSE2-NEXT:    pand %xmm12, %xmm3
; SSE2-NEXT:    pandn %xmm6, %xmm12
; SSE2-NEXT:    por %xmm3, %xmm12
; SSE2-NEXT:    pand %xmm11, %xmm0
; SSE2-NEXT:    pandn %xmm6, %xmm11
; SSE2-NEXT:    por %xmm0, %xmm11
; SSE2-NEXT:    pand %xmm8, %xmm1
; SSE2-NEXT:    pandn %xmm6, %xmm8
; SSE2-NEXT:    por %xmm1, %xmm8
; SSE2-NEXT:    movdqa %xmm8, %xmm0
; SSE2-NEXT:    pxor %xmm5, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm9 = [18446744071562067840,18446744071562067840]
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm0[1,1,3,3]
; SSE2-NEXT:    pand %xmm2, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE2-NEXT:    por %xmm6, %xmm0
; SSE2-NEXT:    movdqa %xmm11, %xmm1
; SSE2-NEXT:    pxor %xmm5, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm7
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm7, %xmm1
; SSE2-NEXT:    movdqa %xmm12, %xmm2
; SSE2-NEXT:    pxor %xmm5, %xmm2
; SSE2-NEXT:    movdqa %xmm2, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm6
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[1,1,3,3]
; SSE2-NEXT:    pand %xmm7, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm3, %xmm2
; SSE2-NEXT:    pxor %xmm4, %xmm5
; SSE2-NEXT:    movdqa %xmm5, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm9, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm9, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm5
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE2-NEXT:    por %xmm5, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm5 = [18446744073709551488,18446744073709551488]
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm5, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    pand %xmm2, %xmm12
; SSE2-NEXT:    pandn %xmm5, %xmm2
; SSE2-NEXT:    por %xmm12, %xmm2
; SSE2-NEXT:    pand %xmm1, %xmm11
; SSE2-NEXT:    pandn %xmm5, %xmm1
; SSE2-NEXT:    por %xmm11, %xmm1
; SSE2-NEXT:    pand %xmm0, %xmm8
; SSE2-NEXT:    pandn %xmm5, %xmm0
; SSE2-NEXT:    por %xmm8, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,2,2,3,4,5,6,7]
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,2,2,3,4,5,6,7]
; SSE2-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm2 = xmm0[0,1,0,2,4,5,6,7]
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm3[0,2,2,3]
; SSE2-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,1,0,2,4,5,6,7]
; SSE2-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = xmm1[0],xmm0[1]
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v8i64_v8i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [2147483648,0,2147483648,0]
; SSSE3-NEXT:    movdqa %xmm1, %xmm6
; SSSE3-NEXT:    pxor %xmm5, %xmm6
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [2147483775,2147483775]
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSSE3-NEXT:    pand %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm8 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm6, %xmm8
; SSSE3-NEXT:    movdqa %xmm0, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm11
; SSSE3-NEXT:    movdqa %xmm3, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm12 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm4, %xmm12
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    pxor %xmm5, %xmm4
; SSSE3-NEXT:    movdqa %xmm9, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm4, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm4[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm6 = [127,127]
; SSSE3-NEXT:    pand %xmm4, %xmm2
; SSSE3-NEXT:    pandn %xmm6, %xmm4
; SSSE3-NEXT:    por %xmm2, %xmm4
; SSSE3-NEXT:    pand %xmm12, %xmm3
; SSSE3-NEXT:    pandn %xmm6, %xmm12
; SSSE3-NEXT:    por %xmm3, %xmm12
; SSSE3-NEXT:    pand %xmm11, %xmm0
; SSSE3-NEXT:    pandn %xmm6, %xmm11
; SSSE3-NEXT:    por %xmm0, %xmm11
; SSSE3-NEXT:    pand %xmm8, %xmm1
; SSSE3-NEXT:    pandn %xmm6, %xmm8
; SSSE3-NEXT:    por %xmm1, %xmm8
; SSSE3-NEXT:    movdqa %xmm8, %xmm0
; SSSE3-NEXT:    pxor %xmm5, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm9 = [18446744071562067840,18446744071562067840]
; SSSE3-NEXT:    movdqa %xmm0, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm0[1,1,3,3]
; SSSE3-NEXT:    pand %xmm2, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSSE3-NEXT:    por %xmm6, %xmm0
; SSSE3-NEXT:    movdqa %xmm11, %xmm1
; SSSE3-NEXT:    pxor %xmm5, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm7
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm7, %xmm1
; SSSE3-NEXT:    movdqa %xmm12, %xmm2
; SSSE3-NEXT:    pxor %xmm5, %xmm2
; SSSE3-NEXT:    movdqa %xmm2, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm6
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[1,1,3,3]
; SSSE3-NEXT:    pand %xmm7, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm3, %xmm2
; SSSE3-NEXT:    pxor %xmm4, %xmm5
; SSSE3-NEXT:    movdqa %xmm5, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm9, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm9, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm5
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSSE3-NEXT:    por %xmm5, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm5 = [18446744073709551488,18446744073709551488]
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm5, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    pand %xmm2, %xmm12
; SSSE3-NEXT:    pandn %xmm5, %xmm2
; SSSE3-NEXT:    por %xmm12, %xmm2
; SSSE3-NEXT:    pand %xmm1, %xmm11
; SSSE3-NEXT:    pandn %xmm5, %xmm1
; SSSE3-NEXT:    por %xmm11, %xmm1
; SSSE3-NEXT:    pand %xmm0, %xmm8
; SSSE3-NEXT:    pandn %xmm5, %xmm0
; SSSE3-NEXT:    por %xmm8, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,2,2,3,4,5,6,7]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,2,2,3,4,5,6,7]
; SSSE3-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm2 = xmm0[0,1,0,2,4,5,6,7]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm3[0,2,2,3]
; SSSE3-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,1,0,2,4,5,6,7]
; SSSE3-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; SSSE3-NEXT:    movsd {{.*#+}} xmm0 = xmm1[0],xmm0[1]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v8i64_v8i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa %xmm0, %xmm8
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [2147483648,0,2147483648,0]
; SSE41-NEXT:    movdqa %xmm3, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa {{.*#+}} xmm10 = [2147483775,2147483775]
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm9
; SSE41-NEXT:    movdqa %xmm2, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm11 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm11
; SSE41-NEXT:    movdqa %xmm1, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm7
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm7[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm0, %xmm5
; SSE41-NEXT:    pxor %xmm4, %xmm5
; SSE41-NEXT:    movdqa %xmm10, %xmm6
; SSE41-NEXT:    pcmpgtd %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm10, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; SSE41-NEXT:    pand %xmm0, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm6[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm5 = [127,127]
; SSE41-NEXT:    movapd %xmm5, %xmm10
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm10
; SSE41-NEXT:    movapd %xmm5, %xmm8
; SSE41-NEXT:    movdqa %xmm7, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm1, %xmm8
; SSE41-NEXT:    movapd %xmm5, %xmm7
; SSE41-NEXT:    movdqa %xmm11, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm2, %xmm7
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm3, %xmm5
; SSE41-NEXT:    movapd %xmm5, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm0 = [18446744071562067840,18446744071562067840]
; SSE41-NEXT:    movapd %xmm1, %xmm2
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm2[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm3, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[1,1,3,3]
; SSE41-NEXT:    por %xmm6, %xmm9
; SSE41-NEXT:    movapd %xmm7, %xmm2
; SSE41-NEXT:    xorpd %xmm4, %xmm2
; SSE41-NEXT:    movapd %xmm2, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm2
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm2
; SSE41-NEXT:    movapd %xmm8, %xmm1
; SSE41-NEXT:    xorpd %xmm4, %xmm1
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm3
; SSE41-NEXT:    xorpd %xmm10, %xmm4
; SSE41-NEXT:    movapd %xmm4, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm1[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm0, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE41-NEXT:    pand %xmm6, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm1 = [18446744073709551488,18446744073709551488]
; SSE41-NEXT:    movapd %xmm1, %xmm4
; SSE41-NEXT:    blendvpd %xmm0, %xmm10, %xmm4
; SSE41-NEXT:    movapd %xmm1, %xmm6
; SSE41-NEXT:    movdqa %xmm3, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm6
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    movdqa %xmm2, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm7, %xmm3
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm5, %xmm1
; SSE41-NEXT:    pxor %xmm0, %xmm0
; SSE41-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0],xmm0[1,2,3],xmm1[4],xmm0[5,6,7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm3 = xmm3[0],xmm0[1,2,3],xmm3[4],xmm0[5,6,7]
; SSE41-NEXT:    packusdw %xmm1, %xmm3
; SSE41-NEXT:    pblendw {{.*#+}} xmm6 = xmm6[0],xmm0[1,2,3],xmm6[4],xmm0[5,6,7]
; SSE41-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0],xmm0[1,2,3],xmm4[4],xmm0[5,6,7]
; SSE41-NEXT:    packusdw %xmm6, %xmm4
; SSE41-NEXT:    packusdw %xmm3, %xmm4
; SSE41-NEXT:    movdqa %xmm4, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v8i64_v8i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [127,127]
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm3, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm1, %xmm3, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm4, %xmm3, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm0, %xmm3, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [127,127,127,127]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [18446744073709551488,18446744073709551488]
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm1, %xmm4
; AVX1-NEXT:    vinsertf128 $1, %xmm2, %ymm4, %ymm2
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm0, %xmm3
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm3, %ymm3
; AVX1-NEXT:    vmovapd {{.*#+}} ymm4 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX1-NEXT:    vblendvpd %ymm3, %ymm0, %ymm4, %ymm0
; AVX1-NEXT:    vblendvpd %ymm2, %ymm1, %ymm4, %ymm1
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vxorpd %xmm3, %xmm3, %xmm3
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm2[0],xmm3[1,2,3],xmm2[4],xmm3[5,6,7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm1 = xmm1[0],xmm3[1,2,3],xmm1[4],xmm3[5,6,7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm2
; AVX1-NEXT:    vpblendw {{.*#+}} xmm2 = xmm2[0],xmm3[1,2,3],xmm2[4],xmm3[5,6,7]
; AVX1-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0],xmm3[1,2,3],xmm0[4],xmm3[5,6,7]
; AVX1-NEXT:    vpackusdw %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpackusdw %xmm1, %xmm0, %xmm0
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-SLOW-LABEL: trunc_ssat_v8i64_v8i8:
; AVX2-SLOW:       # %bb.0:
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [127,127,127,127]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-SLOW-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-SLOW-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-SLOW-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-SLOW-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-SLOW-NEXT:    vzeroupper
; AVX2-SLOW-NEXT:    retq
;
; AVX2-FAST-LABEL: trunc_ssat_v8i64_v8i8:
; AVX2-FAST:       # %bb.0:
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [127,127,127,127]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm0, %ymm2, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm1, %ymm2, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm0, %ymm3
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm1, %ymm4
; AVX2-FAST-NEXT:    vblendvpd %ymm4, %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm3, %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vmovapd {{.*#+}} ymm2 = [0,2,4,6,4,6,6,7]
; AVX2-FAST-NEXT:    vpermps %ymm0, %ymm2, %ymm0
; AVX2-FAST-NEXT:    vpermps %ymm1, %ymm2, %ymm1
; AVX2-FAST-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-FAST-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-FAST-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-FAST-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-FAST-NEXT:    vzeroupper
; AVX2-FAST-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v8i64_v8i8:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpminsq {{.*}}(%rip){1to8}, %zmm0, %zmm0
; AVX512-NEXT:    vpmaxsq {{.*}}(%rip){1to8}, %zmm0, %zmm0
; AVX512-NEXT:    vpmovqw %zmm0, %xmm0
; AVX512-NEXT:    vzeroupper
; AVX512-NEXT:    retq
  %1 = icmp slt <8 x i64> %a0, <i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127>
  %2 = select <8 x i1> %1, <8 x i64> %a0, <8 x i64> <i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127>
  %3 = icmp sgt <8 x i64> %2, <i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128>
  %4 = select <8 x i1> %3, <8 x i64> %2, <8 x i64> <i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128>
  %5 = trunc <8 x i64> %4 to <8 x i8>
  ret <8 x i8> %5
}

define <16 x i8> @trunc_ssat_v16i64_v16i8(<16 x i64> %a0) {
; SSE2-LABEL: trunc_ssat_v16i64_v16i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa %xmm7, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm6, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm5, %xmm8
; SSE2-NEXT:    movdqa %xmm5, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm4, %xmm12
; SSE2-NEXT:    movdqa %xmm4, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm3, %xmm5
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    movdqa %xmm1, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm11 = [2147483648,0,2147483648,0]
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pxor %xmm11, %xmm2
; SSE2-NEXT:    movdqa {{.*#+}} xmm7 = [2147483775,2147483775]
; SSE2-NEXT:    movdqa %xmm7, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm9 = xmm1[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; SSE2-NEXT:    pand %xmm9, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    por %xmm2, %xmm1
; SSE2-NEXT:    movdqa %xmm1, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm6, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm9
; SSE2-NEXT:    pxor %xmm11, %xmm8
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm8
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm8[1,1,3,3]
; SSE2-NEXT:    pand %xmm10, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm10
; SSE2-NEXT:    movdqa %xmm12, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm12 = xmm2[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm12, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm12 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm12
; SSE2-NEXT:    movdqa %xmm5, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm13 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm13
; SSE2-NEXT:    movdqa %xmm4, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm14 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm14
; SSE2-NEXT:    movdqa %xmm3, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm15 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm15
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm7, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    pcmpeqd %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm8 = xmm2[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm8
; SSE2-NEXT:    pand %xmm8, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [127,127]
; SSE2-NEXT:    pandn %xmm1, %xmm8
; SSE2-NEXT:    por %xmm0, %xmm8
; SSE2-NEXT:    pand %xmm15, %xmm3
; SSE2-NEXT:    pandn %xmm1, %xmm15
; SSE2-NEXT:    por %xmm3, %xmm15
; SSE2-NEXT:    pand %xmm14, %xmm4
; SSE2-NEXT:    pandn %xmm1, %xmm14
; SSE2-NEXT:    por %xmm4, %xmm14
; SSE2-NEXT:    pand %xmm13, %xmm5
; SSE2-NEXT:    pandn %xmm1, %xmm13
; SSE2-NEXT:    por %xmm5, %xmm13
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSE2-NEXT:    pand %xmm12, %xmm0
; SSE2-NEXT:    pandn %xmm1, %xmm12
; SSE2-NEXT:    por %xmm0, %xmm12
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSE2-NEXT:    pand %xmm10, %xmm0
; SSE2-NEXT:    pandn %xmm1, %xmm10
; SSE2-NEXT:    por %xmm0, %xmm10
; SSE2-NEXT:    movdqa %xmm10, %xmm5
; SSE2-NEXT:    movdqa %xmm10, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSE2-NEXT:    pand %xmm9, %xmm0
; SSE2-NEXT:    pandn %xmm1, %xmm9
; SSE2-NEXT:    por %xmm0, %xmm9
; SSE2-NEXT:    movdqa %xmm9, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSE2-NEXT:    pand %xmm0, %xmm2
; SSE2-NEXT:    pandn %xmm1, %xmm0
; SSE2-NEXT:    por %xmm2, %xmm0
; SSE2-NEXT:    movdqa %xmm0, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [18446744071562067840,18446744071562067840]
; SSE2-NEXT:    movdqa %xmm1, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm4, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm10 = xmm3[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm10
; SSE2-NEXT:    movdqa %xmm9, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm3
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm4, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm3
; SSE2-NEXT:    movdqa %xmm5, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm4[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm5, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm5 = xmm4[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm5
; SSE2-NEXT:    movdqa %xmm12, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm4
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm4[0,0,2,2]
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm4
; SSE2-NEXT:    movdqa %xmm13, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm6
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSE2-NEXT:    pand %xmm7, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm6
; SSE2-NEXT:    movdqa %xmm14, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm7
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm9 = xmm7[0,0,2,2]
; SSE2-NEXT:    pand %xmm9, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm9 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm1, %xmm9
; SSE2-NEXT:    movdqa %xmm15, %xmm1
; SSE2-NEXT:    pxor %xmm11, %xmm1
; SSE2-NEXT:    movdqa %xmm1, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm7
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm7[0,0,2,2]
; SSE2-NEXT:    pand %xmm1, %xmm0
; SSE2-NEXT:    pshufd {{.*#+}} xmm1 = xmm7[1,1,3,3]
; SSE2-NEXT:    por %xmm0, %xmm1
; SSE2-NEXT:    pxor %xmm8, %xmm11
; SSE2-NEXT:    movdqa %xmm11, %xmm0
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE2-NEXT:    pcmpeqd %xmm2, %xmm11
; SSE2-NEXT:    pshufd {{.*#+}} xmm2 = xmm11[1,1,3,3]
; SSE2-NEXT:    pshufd {{.*#+}} xmm7 = xmm0[0,0,2,2]
; SSE2-NEXT:    pand %xmm7, %xmm2
; SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE2-NEXT:    por %xmm2, %xmm0
; SSE2-NEXT:    pand %xmm0, %xmm8
; SSE2-NEXT:    movdqa {{.*#+}} xmm11 = [18446744073709551488,18446744073709551488]
; SSE2-NEXT:    pandn %xmm11, %xmm0
; SSE2-NEXT:    por %xmm8, %xmm0
; SSE2-NEXT:    pand %xmm1, %xmm15
; SSE2-NEXT:    pandn %xmm11, %xmm1
; SSE2-NEXT:    por %xmm15, %xmm1
; SSE2-NEXT:    pand %xmm9, %xmm14
; SSE2-NEXT:    pandn %xmm11, %xmm9
; SSE2-NEXT:    por %xmm14, %xmm9
; SSE2-NEXT:    pand %xmm6, %xmm13
; SSE2-NEXT:    pandn %xmm11, %xmm6
; SSE2-NEXT:    por %xmm13, %xmm6
; SSE2-NEXT:    pand %xmm4, %xmm12
; SSE2-NEXT:    pandn %xmm11, %xmm4
; SSE2-NEXT:    por %xmm12, %xmm4
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSE2-NEXT:    pand %xmm5, %xmm2
; SSE2-NEXT:    pandn %xmm11, %xmm5
; SSE2-NEXT:    por %xmm2, %xmm5
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSE2-NEXT:    pand %xmm3, %xmm2
; SSE2-NEXT:    pandn %xmm11, %xmm3
; SSE2-NEXT:    por %xmm2, %xmm3
; SSE2-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSE2-NEXT:    pand %xmm10, %xmm2
; SSE2-NEXT:    pandn %xmm11, %xmm10
; SSE2-NEXT:    por %xmm2, %xmm10
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0]
; SSE2-NEXT:    pand %xmm2, %xmm10
; SSE2-NEXT:    pand %xmm2, %xmm3
; SSE2-NEXT:    packuswb %xmm10, %xmm3
; SSE2-NEXT:    pand %xmm2, %xmm5
; SSE2-NEXT:    pand %xmm2, %xmm4
; SSE2-NEXT:    packuswb %xmm5, %xmm4
; SSE2-NEXT:    packuswb %xmm3, %xmm4
; SSE2-NEXT:    pand %xmm2, %xmm6
; SSE2-NEXT:    pand %xmm2, %xmm9
; SSE2-NEXT:    packuswb %xmm6, %xmm9
; SSE2-NEXT:    pand %xmm2, %xmm1
; SSE2-NEXT:    pand %xmm2, %xmm0
; SSE2-NEXT:    packuswb %xmm1, %xmm0
; SSE2-NEXT:    packuswb %xmm9, %xmm0
; SSE2-NEXT:    packuswb %xmm4, %xmm0
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v16i64_v16i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa %xmm7, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm6, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm5, %xmm8
; SSSE3-NEXT:    movdqa %xmm5, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm4, %xmm12
; SSSE3-NEXT:    movdqa %xmm4, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm3, %xmm5
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    movdqa %xmm1, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm11 = [2147483648,0,2147483648,0]
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pxor %xmm11, %xmm2
; SSSE3-NEXT:    movdqa {{.*#+}} xmm7 = [2147483775,2147483775]
; SSSE3-NEXT:    movdqa %xmm7, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm9 = xmm1[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm2[1,1,3,3]
; SSSE3-NEXT:    pand %xmm9, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    por %xmm2, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm6, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm9 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm9
; SSSE3-NEXT:    pxor %xmm11, %xmm8
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm8
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm8[1,1,3,3]
; SSSE3-NEXT:    pand %xmm10, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm10
; SSSE3-NEXT:    movdqa %xmm12, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm12 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm12, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm12 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm12
; SSSE3-NEXT:    movdqa %xmm5, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm13 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm13
; SSSE3-NEXT:    movdqa %xmm4, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm14 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm14
; SSSE3-NEXT:    movdqa %xmm3, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm15 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm15
; SSSE3-NEXT:    movdqa %xmm0, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm7, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    pcmpeqd %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm2[0,0,2,2]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm8 = xmm2[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm8
; SSSE3-NEXT:    pand %xmm8, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [127,127]
; SSSE3-NEXT:    pandn %xmm1, %xmm8
; SSSE3-NEXT:    por %xmm0, %xmm8
; SSSE3-NEXT:    pand %xmm15, %xmm3
; SSSE3-NEXT:    pandn %xmm1, %xmm15
; SSSE3-NEXT:    por %xmm3, %xmm15
; SSSE3-NEXT:    pand %xmm14, %xmm4
; SSSE3-NEXT:    pandn %xmm1, %xmm14
; SSSE3-NEXT:    por %xmm4, %xmm14
; SSSE3-NEXT:    pand %xmm13, %xmm5
; SSSE3-NEXT:    pandn %xmm1, %xmm13
; SSSE3-NEXT:    por %xmm5, %xmm13
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm12, %xmm0
; SSSE3-NEXT:    pandn %xmm1, %xmm12
; SSSE3-NEXT:    por %xmm0, %xmm12
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm10, %xmm0
; SSSE3-NEXT:    pandn %xmm1, %xmm10
; SSSE3-NEXT:    por %xmm0, %xmm10
; SSSE3-NEXT:    movdqa %xmm10, %xmm5
; SSSE3-NEXT:    movdqa %xmm10, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm9, %xmm0
; SSSE3-NEXT:    pandn %xmm1, %xmm9
; SSSE3-NEXT:    por %xmm0, %xmm9
; SSSE3-NEXT:    movdqa %xmm9, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm0 # 16-byte Reload
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm0, %xmm2
; SSSE3-NEXT:    pandn %xmm1, %xmm0
; SSSE3-NEXT:    por %xmm2, %xmm0
; SSSE3-NEXT:    movdqa %xmm0, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSSE3-NEXT:    movdqa %xmm0, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [18446744071562067840,18446744071562067840]
; SSSE3-NEXT:    movdqa %xmm1, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm4, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm10 = xmm3[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm10
; SSSE3-NEXT:    movdqa %xmm9, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm3
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm4, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm3
; SSSE3-NEXT:    movdqa %xmm5, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm4[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm5, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm5 = xmm4[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm5
; SSSE3-NEXT:    movdqa %xmm12, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm4
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm4[0,0,2,2]
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm4 = xmm4[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm4
; SSSE3-NEXT:    movdqa %xmm13, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm6
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[0,0,2,2]
; SSSE3-NEXT:    pand %xmm7, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm6 = xmm6[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm6
; SSSE3-NEXT:    movdqa %xmm14, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm7
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm9 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pand %xmm9, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm9 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm1, %xmm9
; SSSE3-NEXT:    movdqa %xmm15, %xmm1
; SSSE3-NEXT:    pxor %xmm11, %xmm1
; SSSE3-NEXT:    movdqa %xmm1, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm7
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm1
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm7[0,0,2,2]
; SSSE3-NEXT:    pand %xmm1, %xmm0
; SSSE3-NEXT:    pshufd {{.*#+}} xmm1 = xmm7[1,1,3,3]
; SSSE3-NEXT:    por %xmm0, %xmm1
; SSSE3-NEXT:    pxor %xmm8, %xmm11
; SSSE3-NEXT:    movdqa %xmm11, %xmm0
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm0
; SSSE3-NEXT:    pcmpeqd %xmm2, %xmm11
; SSSE3-NEXT:    pshufd {{.*#+}} xmm2 = xmm11[1,1,3,3]
; SSSE3-NEXT:    pshufd {{.*#+}} xmm7 = xmm0[0,0,2,2]
; SSSE3-NEXT:    pand %xmm7, %xmm2
; SSSE3-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSSE3-NEXT:    por %xmm2, %xmm0
; SSSE3-NEXT:    pand %xmm0, %xmm8
; SSSE3-NEXT:    movdqa {{.*#+}} xmm11 = [18446744073709551488,18446744073709551488]
; SSSE3-NEXT:    pandn %xmm11, %xmm0
; SSSE3-NEXT:    por %xmm8, %xmm0
; SSSE3-NEXT:    pand %xmm1, %xmm15
; SSSE3-NEXT:    pandn %xmm11, %xmm1
; SSSE3-NEXT:    por %xmm15, %xmm1
; SSSE3-NEXT:    pand %xmm9, %xmm14
; SSSE3-NEXT:    pandn %xmm11, %xmm9
; SSSE3-NEXT:    por %xmm14, %xmm9
; SSSE3-NEXT:    pand %xmm6, %xmm13
; SSSE3-NEXT:    pandn %xmm11, %xmm6
; SSSE3-NEXT:    por %xmm13, %xmm6
; SSSE3-NEXT:    pand %xmm4, %xmm12
; SSSE3-NEXT:    pandn %xmm11, %xmm4
; SSSE3-NEXT:    por %xmm12, %xmm4
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm5, %xmm2
; SSSE3-NEXT:    pandn %xmm11, %xmm5
; SSSE3-NEXT:    por %xmm2, %xmm5
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm3, %xmm2
; SSSE3-NEXT:    pandn %xmm11, %xmm3
; SSSE3-NEXT:    por %xmm2, %xmm3
; SSSE3-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm2 # 16-byte Reload
; SSSE3-NEXT:    pand %xmm10, %xmm2
; SSSE3-NEXT:    pandn %xmm11, %xmm10
; SSSE3-NEXT:    por %xmm2, %xmm10
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0]
; SSSE3-NEXT:    pand %xmm2, %xmm10
; SSSE3-NEXT:    pand %xmm2, %xmm3
; SSSE3-NEXT:    packuswb %xmm10, %xmm3
; SSSE3-NEXT:    pand %xmm2, %xmm5
; SSSE3-NEXT:    pand %xmm2, %xmm4
; SSSE3-NEXT:    packuswb %xmm5, %xmm4
; SSSE3-NEXT:    packuswb %xmm3, %xmm4
; SSSE3-NEXT:    pand %xmm2, %xmm6
; SSSE3-NEXT:    pand %xmm2, %xmm9
; SSSE3-NEXT:    packuswb %xmm6, %xmm9
; SSSE3-NEXT:    pand %xmm2, %xmm1
; SSSE3-NEXT:    pand %xmm2, %xmm0
; SSSE3-NEXT:    packuswb %xmm1, %xmm0
; SSSE3-NEXT:    packuswb %xmm9, %xmm0
; SSSE3-NEXT:    packuswb %xmm4, %xmm0
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v16i64_v16i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa %xmm7, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movdqa %xmm6, %xmm9
; SSE41-NEXT:    movdqa %xmm6, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movdqa %xmm5, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movaps %xmm4, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movdqa %xmm3, %xmm15
; SSE41-NEXT:    movdqa %xmm0, %xmm10
; SSE41-NEXT:    movdqa {{.*#+}} xmm12 = [2147483648,0,2147483648,0]
; SSE41-NEXT:    movdqa %xmm7, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [2147483775,2147483775]
; SSE41-NEXT:    movdqa %xmm4, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm6
; SSE41-NEXT:    pxor %xmm12, %xmm9
; SSE41-NEXT:    movdqa %xmm4, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm9, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm9
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm9[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm9 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm9
; SSE41-NEXT:    movdqa %xmm5, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm3
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm3[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm7, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm3
; SSE41-NEXT:    movdqa %xmm10, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm7
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm11 = xmm7[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm13 = xmm0[1,1,3,3]
; SSE41-NEXT:    pand %xmm11, %xmm13
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm7[1,1,3,3]
; SSE41-NEXT:    por %xmm13, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm13 = [127,127]
; SSE41-NEXT:    movapd %xmm13, %xmm14
; SSE41-NEXT:    blendvpd %xmm0, %xmm10, %xmm14
; SSE41-NEXT:    movdqa %xmm1, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm7
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm7
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm10 = xmm0[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm7[0,0,2,2]
; SSE41-NEXT:    pand %xmm0, %xmm10
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm7[1,1,3,3]
; SSE41-NEXT:    por %xmm10, %xmm0
; SSE41-NEXT:    movapd %xmm13, %xmm7
; SSE41-NEXT:    blendvpd %xmm0, %xmm1, %xmm7
; SSE41-NEXT:    movapd %xmm7, %xmm11
; SSE41-NEXT:    movdqa %xmm2, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm1
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm7 = xmm0[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[0,0,2,2]
; SSE41-NEXT:    pand %xmm0, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm7, %xmm0
; SSE41-NEXT:    movapd %xmm13, %xmm8
; SSE41-NEXT:    blendvpd %xmm0, %xmm2, %xmm8
; SSE41-NEXT:    movapd %xmm8, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movdqa -{{[0-9]+}}(%rsp), %xmm7 # 16-byte Reload
; SSE41-NEXT:    movdqa %xmm7, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm1
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm1
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm1[0,0,2,2]
; SSE41-NEXT:    pand %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; SSE41-NEXT:    por %xmm0, %xmm1
; SSE41-NEXT:    movdqa %xmm15, %xmm0
; SSE41-NEXT:    pxor %xmm12, %xmm0
; SSE41-NEXT:    movdqa %xmm4, %xmm2
; SSE41-NEXT:    pcmpgtd %xmm0, %xmm2
; SSE41-NEXT:    pcmpeqd %xmm4, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[0,0,2,2]
; SSE41-NEXT:    pand %xmm0, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm2[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd %xmm13, %xmm5
; SSE41-NEXT:    blendvpd %xmm0, %xmm15, %xmm5
; SSE41-NEXT:    movapd %xmm5, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movapd %xmm13, %xmm2
; SSE41-NEXT:    movdqa %xmm1, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm7, %xmm2
; SSE41-NEXT:    movapd %xmm2, %xmm4
; SSE41-NEXT:    movapd %xmm2, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movapd %xmm13, %xmm1
; SSE41-NEXT:    movdqa %xmm3, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm1 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm1, %xmm2
; SSE41-NEXT:    movapd %xmm1, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movapd %xmm13, %xmm1
; SSE41-NEXT:    movdqa %xmm9, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm1 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm1, -{{[0-9]+}}(%rsp) # 16-byte Spill
; SSE41-NEXT:    movdqa %xmm6, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm13 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm13, %xmm10
; SSE41-NEXT:    xorpd %xmm12, %xmm10
; SSE41-NEXT:    movapd %xmm1, %xmm9
; SSE41-NEXT:    xorpd %xmm12, %xmm9
; SSE41-NEXT:    movapd %xmm2, %xmm6
; SSE41-NEXT:    xorpd %xmm12, %xmm6
; SSE41-NEXT:    movapd %xmm4, %xmm3
; SSE41-NEXT:    xorpd %xmm12, %xmm3
; SSE41-NEXT:    movapd %xmm5, %xmm7
; SSE41-NEXT:    xorpd %xmm12, %xmm7
; SSE41-NEXT:    movapd %xmm8, %xmm15
; SSE41-NEXT:    xorpd %xmm12, %xmm15
; SSE41-NEXT:    movapd %xmm11, %xmm8
; SSE41-NEXT:    xorpd %xmm12, %xmm11
; SSE41-NEXT:    xorpd %xmm14, %xmm12
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [18446744071562067840,18446744071562067840]
; SSE41-NEXT:    movapd %xmm12, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm12
; SSE41-NEXT:    pshufd {{.*#+}} xmm1 = xmm12[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[0,0,2,2]
; SSE41-NEXT:    pand %xmm5, %xmm1
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm1, %xmm0
; SSE41-NEXT:    movapd {{.*#+}} xmm1 = [18446744073709551488,18446744073709551488]
; SSE41-NEXT:    movapd %xmm1, %xmm12
; SSE41-NEXT:    blendvpd %xmm0, %xmm14, %xmm12
; SSE41-NEXT:    movapd %xmm11, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm11
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm11[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[0,0,2,2]
; SSE41-NEXT:    pand %xmm4, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm14
; SSE41-NEXT:    blendvpd %xmm0, %xmm8, %xmm14
; SSE41-NEXT:    movapd %xmm15, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm15
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm15[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[0,0,2,2]
; SSE41-NEXT:    pand %xmm5, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm11
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm11 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm7, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm7
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm7[1,1,3,3]
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[0,0,2,2]
; SSE41-NEXT:    pand %xmm5, %xmm4
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm4, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm7
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm7 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm3, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; SSE41-NEXT:    pand %xmm4, %xmm3
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm3, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm3
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm3 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm6, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm6[1,1,3,3]
; SSE41-NEXT:    pand %xmm4, %xmm5
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm5, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm4
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm4 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm9, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pshufd {{.*#+}} xmm5 = xmm0[0,0,2,2]
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm9
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm9[1,1,3,3]
; SSE41-NEXT:    pand %xmm5, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm6, %xmm0
; SSE41-NEXT:    movapd %xmm1, %xmm5
; SSE41-NEXT:    blendvpd %xmm0, -{{[0-9]+}}(%rsp), %xmm5 # 16-byte Folded Reload
; SSE41-NEXT:    movapd %xmm10, %xmm0
; SSE41-NEXT:    pcmpgtd %xmm2, %xmm0
; SSE41-NEXT:    pcmpeqd %xmm2, %xmm10
; SSE41-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[0,0,2,2]
; SSE41-NEXT:    pshufd {{.*#+}} xmm6 = xmm10[1,1,3,3]
; SSE41-NEXT:    pand %xmm2, %xmm6
; SSE41-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; SSE41-NEXT:    por %xmm6, %xmm0
; SSE41-NEXT:    blendvpd %xmm0, %xmm13, %xmm1
; SSE41-NEXT:    movapd {{.*#+}} xmm0 = [255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0]
; SSE41-NEXT:    andpd %xmm0, %xmm1
; SSE41-NEXT:    andpd %xmm0, %xmm5
; SSE41-NEXT:    packuswb %xmm1, %xmm5
; SSE41-NEXT:    andpd %xmm0, %xmm4
; SSE41-NEXT:    andpd %xmm0, %xmm3
; SSE41-NEXT:    packuswb %xmm4, %xmm3
; SSE41-NEXT:    packuswb %xmm5, %xmm3
; SSE41-NEXT:    andpd %xmm0, %xmm7
; SSE41-NEXT:    andpd %xmm0, %xmm11
; SSE41-NEXT:    packuswb %xmm7, %xmm11
; SSE41-NEXT:    andpd %xmm0, %xmm14
; SSE41-NEXT:    andpd %xmm0, %xmm12
; SSE41-NEXT:    packuswb %xmm14, %xmm12
; SSE41-NEXT:    packuswb %xmm11, %xmm12
; SSE41-NEXT:    packuswb %xmm3, %xmm12
; SSE41-NEXT:    movdqa %xmm12, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v16i64_v16i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm3, %xmm4
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm5 = [127,127]
; AVX1-NEXT:    vpcmpgtq %xmm4, %xmm5, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm3, %xmm5, %xmm6
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm6, %ymm9
; AVX1-NEXT:    vextractf128 $1, %ymm2, %xmm6
; AVX1-NEXT:    vpcmpgtq %xmm6, %xmm5, %xmm6
; AVX1-NEXT:    vpcmpgtq %xmm2, %xmm5, %xmm7
; AVX1-NEXT:    vinsertf128 $1, %xmm6, %ymm7, %ymm6
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm7
; AVX1-NEXT:    vpcmpgtq %xmm7, %xmm5, %xmm7
; AVX1-NEXT:    vpcmpgtq %xmm1, %xmm5, %xmm8
; AVX1-NEXT:    vinsertf128 $1, %xmm7, %ymm8, %ymm7
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm4, %xmm5, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm0, %xmm5, %xmm5
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm5, %ymm4
; AVX1-NEXT:    vmovapd {{.*#+}} ymm5 = [127,127,127,127]
; AVX1-NEXT:    vblendvpd %ymm4, %ymm0, %ymm5, %ymm0
; AVX1-NEXT:    vblendvpd %ymm7, %ymm1, %ymm5, %ymm1
; AVX1-NEXT:    vblendvpd %ymm6, %ymm2, %ymm5, %ymm2
; AVX1-NEXT:    vblendvpd %ymm9, %ymm3, %ymm5, %ymm3
; AVX1-NEXT:    vextractf128 $1, %ymm3, %xmm4
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm5 = [18446744073709551488,18446744073709551488]
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm4, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm3, %xmm6
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm6, %ymm9
; AVX1-NEXT:    vextractf128 $1, %ymm2, %xmm6
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm6, %xmm6
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm2, %xmm7
; AVX1-NEXT:    vinsertf128 $1, %xmm6, %ymm7, %ymm6
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm7
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm7, %xmm7
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm1, %xmm8
; AVX1-NEXT:    vinsertf128 $1, %xmm7, %ymm8, %ymm7
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm4, %xmm4
; AVX1-NEXT:    vpcmpgtq %xmm5, %xmm0, %xmm5
; AVX1-NEXT:    vinsertf128 $1, %xmm4, %ymm5, %ymm4
; AVX1-NEXT:    vmovapd {{.*#+}} ymm5 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX1-NEXT:    vblendvpd %ymm4, %ymm0, %ymm5, %ymm0
; AVX1-NEXT:    vblendvpd %ymm7, %ymm1, %ymm5, %ymm1
; AVX1-NEXT:    vblendvpd %ymm6, %ymm2, %ymm5, %ymm2
; AVX1-NEXT:    vblendvpd %ymm9, %ymm3, %ymm5, %ymm3
; AVX1-NEXT:    vextractf128 $1, %ymm3, %xmm4
; AVX1-NEXT:    vmovapd {{.*#+}} xmm5 = [255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0]
; AVX1-NEXT:    vandpd %xmm5, %xmm4, %xmm4
; AVX1-NEXT:    vandpd %xmm5, %xmm3, %xmm3
; AVX1-NEXT:    vpackuswb %xmm4, %xmm3, %xmm3
; AVX1-NEXT:    vextractf128 $1, %ymm2, %xmm4
; AVX1-NEXT:    vandpd %xmm5, %xmm4, %xmm4
; AVX1-NEXT:    vandpd %xmm5, %xmm2, %xmm2
; AVX1-NEXT:    vpackuswb %xmm4, %xmm2, %xmm2
; AVX1-NEXT:    vpackuswb %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm3
; AVX1-NEXT:    vandpd %xmm5, %xmm3, %xmm3
; AVX1-NEXT:    vandpd %xmm5, %xmm1, %xmm1
; AVX1-NEXT:    vpackuswb %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm3
; AVX1-NEXT:    vandpd %xmm5, %xmm3, %xmm3
; AVX1-NEXT:    vandpd %xmm5, %xmm0, %xmm0
; AVX1-NEXT:    vpackuswb %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpackuswb %xmm1, %xmm0, %xmm0
; AVX1-NEXT:    vpackuswb %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-SLOW-LABEL: trunc_ssat_v16i64_v16i8:
; AVX2-SLOW:       # %bb.0:
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm4 = [127,127,127,127]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm2, %ymm4, %ymm5
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm3, %ymm4, %ymm6
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm0, %ymm4, %ymm7
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm1, %ymm4, %ymm8
; AVX2-SLOW-NEXT:    vblendvpd %ymm8, %ymm1, %ymm4, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm7, %ymm0, %ymm4, %ymm0
; AVX2-SLOW-NEXT:    vblendvpd %ymm6, %ymm3, %ymm4, %ymm3
; AVX2-SLOW-NEXT:    vblendvpd %ymm5, %ymm2, %ymm4, %ymm2
; AVX2-SLOW-NEXT:    vpbroadcastq {{.*#+}} ymm4 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm4, %ymm2, %ymm5
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm4, %ymm3, %ymm6
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm4, %ymm0, %ymm7
; AVX2-SLOW-NEXT:    vpcmpgtq %ymm4, %ymm1, %ymm8
; AVX2-SLOW-NEXT:    vblendvpd %ymm8, %ymm1, %ymm4, %ymm1
; AVX2-SLOW-NEXT:    vblendvpd %ymm7, %ymm0, %ymm4, %ymm0
; AVX2-SLOW-NEXT:    vblendvpd %ymm6, %ymm3, %ymm4, %ymm3
; AVX2-SLOW-NEXT:    vblendvpd %ymm5, %ymm2, %ymm4, %ymm2
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm2 = ymm2[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm2 = ymm2[0,2,2,3]
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm3 = ymm3[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm3 = ymm3[0,2,2,3]
; AVX2-SLOW-NEXT:    vinsertf128 $1, %xmm3, %ymm2, %ymm2
; AVX2-SLOW-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-SLOW-NEXT:    vpshufb %ymm3, %ymm2, %ymm2
; AVX2-SLOW-NEXT:    vpermq {{.*#+}} ymm2 = ymm2[0,2,2,3]
; AVX2-SLOW-NEXT:    vmovdqa {{.*#+}} xmm4 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX2-SLOW-NEXT:    vpshufb %xmm4, %xmm2, %xmm2
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[0,2,2,3,4,6,6,7]
; AVX2-SLOW-NEXT:    vpermpd {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-SLOW-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-SLOW-NEXT:    vpshufb %ymm3, %ymm0, %ymm0
; AVX2-SLOW-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-SLOW-NEXT:    vpshufb %xmm4, %xmm0, %xmm0
; AVX2-SLOW-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX2-SLOW-NEXT:    vzeroupper
; AVX2-SLOW-NEXT:    retq
;
; AVX2-FAST-LABEL: trunc_ssat_v16i64_v16i8:
; AVX2-FAST:       # %bb.0:
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm4 = [127,127,127,127]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm2, %ymm4, %ymm5
; AVX2-FAST-NEXT:    vpcmpgtq %ymm3, %ymm4, %ymm6
; AVX2-FAST-NEXT:    vpcmpgtq %ymm0, %ymm4, %ymm7
; AVX2-FAST-NEXT:    vpcmpgtq %ymm1, %ymm4, %ymm8
; AVX2-FAST-NEXT:    vblendvpd %ymm8, %ymm1, %ymm4, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm7, %ymm0, %ymm4, %ymm0
; AVX2-FAST-NEXT:    vblendvpd %ymm6, %ymm3, %ymm4, %ymm3
; AVX2-FAST-NEXT:    vblendvpd %ymm5, %ymm2, %ymm4, %ymm2
; AVX2-FAST-NEXT:    vpbroadcastq {{.*#+}} ymm4 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX2-FAST-NEXT:    vpcmpgtq %ymm4, %ymm2, %ymm5
; AVX2-FAST-NEXT:    vpcmpgtq %ymm4, %ymm3, %ymm6
; AVX2-FAST-NEXT:    vpcmpgtq %ymm4, %ymm0, %ymm7
; AVX2-FAST-NEXT:    vpcmpgtq %ymm4, %ymm1, %ymm8
; AVX2-FAST-NEXT:    vblendvpd %ymm8, %ymm1, %ymm4, %ymm1
; AVX2-FAST-NEXT:    vblendvpd %ymm7, %ymm0, %ymm4, %ymm0
; AVX2-FAST-NEXT:    vblendvpd %ymm6, %ymm3, %ymm4, %ymm3
; AVX2-FAST-NEXT:    vblendvpd %ymm5, %ymm2, %ymm4, %ymm2
; AVX2-FAST-NEXT:    vmovapd {{.*#+}} ymm4 = [0,2,4,6,4,6,6,7]
; AVX2-FAST-NEXT:    vpermps %ymm2, %ymm4, %ymm2
; AVX2-FAST-NEXT:    vpermps %ymm3, %ymm4, %ymm3
; AVX2-FAST-NEXT:    vinsertf128 $1, %xmm3, %ymm2, %ymm2
; AVX2-FAST-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-FAST-NEXT:    vpshufb %ymm3, %ymm2, %ymm2
; AVX2-FAST-NEXT:    vpermq {{.*#+}} ymm2 = ymm2[0,2,2,3]
; AVX2-FAST-NEXT:    vmovdqa {{.*#+}} xmm5 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX2-FAST-NEXT:    vpshufb %xmm5, %xmm2, %xmm2
; AVX2-FAST-NEXT:    vpermps %ymm0, %ymm4, %ymm0
; AVX2-FAST-NEXT:    vpermps %ymm1, %ymm4, %ymm1
; AVX2-FAST-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX2-FAST-NEXT:    vpshufb %ymm3, %ymm0, %ymm0
; AVX2-FAST-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-FAST-NEXT:    vpshufb %xmm5, %xmm0, %xmm0
; AVX2-FAST-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX2-FAST-NEXT:    vzeroupper
; AVX2-FAST-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v16i64_v16i8:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpbroadcastq {{.*#+}} zmm2 = [127,127,127,127,127,127,127,127]
; AVX512-NEXT:    vpminsq %zmm2, %zmm0, %zmm0
; AVX512-NEXT:    vpminsq %zmm2, %zmm1, %zmm1
; AVX512-NEXT:    vpbroadcastq {{.*#+}} zmm2 = [18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488,18446744073709551488]
; AVX512-NEXT:    vpmaxsq %zmm2, %zmm1, %zmm1
; AVX512-NEXT:    vpmaxsq %zmm2, %zmm0, %zmm0
; AVX512-NEXT:    vpmovqd %zmm0, %ymm0
; AVX512-NEXT:    vpmovqd %zmm1, %ymm1
; AVX512-NEXT:    vinserti64x4 $1, %ymm1, %zmm0, %zmm0
; AVX512-NEXT:    vpmovdb %zmm0, %xmm0
; AVX512-NEXT:    vzeroupper
; AVX512-NEXT:    retq
  %1 = icmp slt <16 x i64> %a0, <i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127>
  %2 = select <16 x i1> %1, <16 x i64> %a0, <16 x i64> <i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127, i64 127>
  %3 = icmp sgt <16 x i64> %2, <i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128>
  %4 = select <16 x i1> %3, <16 x i64> %2, <16 x i64> <i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128, i64 -128>
  %5 = trunc <16 x i64> %4 to <16 x i8>
  ret <16 x i8> %5
}

define <8 x i8> @trunc_ssat_v8i32_v8i8(<8 x i32> %a0) {
; SSE2-LABEL: trunc_ssat_v8i32_v8i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127]
; SSE2-NEXT:    movdqa %xmm2, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm3
; SSE2-NEXT:    movdqa %xmm2, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm0, %xmm4
; SSE2-NEXT:    pand %xmm4, %xmm0
; SSE2-NEXT:    pandn %xmm2, %xmm4
; SSE2-NEXT:    por %xmm0, %xmm4
; SSE2-NEXT:    pand %xmm3, %xmm1
; SSE2-NEXT:    pandn %xmm2, %xmm3
; SSE2-NEXT:    por %xmm1, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm1 = [4294967168,4294967168,4294967168,4294967168]
; SSE2-NEXT:    movdqa %xmm3, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm2
; SSE2-NEXT:    movdqa %xmm4, %xmm0
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm0
; SSE2-NEXT:    pand %xmm0, %xmm4
; SSE2-NEXT:    pandn %xmm1, %xmm0
; SSE2-NEXT:    por %xmm4, %xmm0
; SSE2-NEXT:    pand %xmm2, %xmm3
; SSE2-NEXT:    pandn %xmm1, %xmm2
; SSE2-NEXT:    por %xmm3, %xmm2
; SSE2-NEXT:    pslld $16, %xmm2
; SSE2-NEXT:    psrad $16, %xmm2
; SSE2-NEXT:    pslld $16, %xmm0
; SSE2-NEXT:    psrad $16, %xmm0
; SSE2-NEXT:    packssdw %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v8i32_v8i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127]
; SSSE3-NEXT:    movdqa %xmm2, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm3
; SSSE3-NEXT:    movdqa %xmm2, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm0, %xmm4
; SSSE3-NEXT:    pand %xmm4, %xmm0
; SSSE3-NEXT:    pandn %xmm2, %xmm4
; SSSE3-NEXT:    por %xmm0, %xmm4
; SSSE3-NEXT:    pand %xmm3, %xmm1
; SSSE3-NEXT:    pandn %xmm2, %xmm3
; SSSE3-NEXT:    por %xmm1, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [4294967168,4294967168,4294967168,4294967168]
; SSSE3-NEXT:    movdqa %xmm3, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm2
; SSSE3-NEXT:    movdqa %xmm4, %xmm0
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm0
; SSSE3-NEXT:    pand %xmm0, %xmm4
; SSSE3-NEXT:    pandn %xmm1, %xmm0
; SSSE3-NEXT:    por %xmm4, %xmm0
; SSSE3-NEXT:    pand %xmm2, %xmm3
; SSSE3-NEXT:    pandn %xmm1, %xmm2
; SSSE3-NEXT:    por %xmm3, %xmm2
; SSSE3-NEXT:    movdqa {{.*#+}} xmm1 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; SSSE3-NEXT:    pshufb %xmm1, %xmm2
; SSSE3-NEXT:    pshufb %xmm1, %xmm0
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v8i32_v8i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127]
; SSE41-NEXT:    pminsd %xmm2, %xmm1
; SSE41-NEXT:    pminsd %xmm2, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [4294967168,4294967168,4294967168,4294967168]
; SSE41-NEXT:    pmaxsd %xmm2, %xmm0
; SSE41-NEXT:    pmaxsd %xmm2, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; SSE41-NEXT:    pshufb %xmm2, %xmm1
; SSE41-NEXT:    pshufb %xmm2, %xmm0
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v8i32_v8i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [127,127,127,127]
; AVX1-NEXT:    vpminsd %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpminsd %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [4294967168,4294967168,4294967168,4294967168]
; AVX1-NEXT:    vpmaxsd %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsd %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15]
; AVX1-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v8i32_v8i8:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [127,127,127,127,127,127,127,127]
; AVX2-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168]
; AVX2-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX2-NEXT:    vzeroupper
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: trunc_ssat_v8i32_v8i8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [127,127,127,127,127,127,127,127]
; AVX512F-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168]
; AVX512F-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vpmovdw %zmm0, %ymm0
; AVX512F-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
;
; AVX512VL-LABEL: trunc_ssat_v8i32_v8i8:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vpminsd {{.*}}(%rip){1to8}, %ymm0, %ymm0
; AVX512VL-NEXT:    vpmaxsd {{.*}}(%rip){1to8}, %ymm0, %ymm0
; AVX512VL-NEXT:    vpmovdw %ymm0, %xmm0
; AVX512VL-NEXT:    vzeroupper
; AVX512VL-NEXT:    retq
;
; AVX512BW-LABEL: trunc_ssat_v8i32_v8i8:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [127,127,127,127,127,127,127,127]
; AVX512BW-NEXT:    vpminsd %ymm1, %ymm0, %ymm0
; AVX512BW-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168]
; AVX512BW-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512BW-NEXT:    vpmovdw %zmm0, %ymm0
; AVX512BW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512BW-NEXT:    vzeroupper
; AVX512BW-NEXT:    retq
;
; AVX512BWVL-LABEL: trunc_ssat_v8i32_v8i8:
; AVX512BWVL:       # %bb.0:
; AVX512BWVL-NEXT:    vpminsd {{.*}}(%rip){1to8}, %ymm0, %ymm0
; AVX512BWVL-NEXT:    vpmaxsd {{.*}}(%rip){1to8}, %ymm0, %ymm0
; AVX512BWVL-NEXT:    vpmovdw %ymm0, %xmm0
; AVX512BWVL-NEXT:    vzeroupper
; AVX512BWVL-NEXT:    retq
  %1 = icmp slt <8 x i32> %a0, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %2 = select <8 x i1> %1, <8 x i32> %a0, <8 x i32> <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %3 = icmp sgt <8 x i32> %2, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %4 = select <8 x i1> %3, <8 x i32> %2, <8 x i32> <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %5 = trunc <8 x i32> %4 to <8 x i8>
  ret <8 x i8> %5
}

define <16 x i8> @trunc_ssat_v16i32_v16i8(<16 x i32> %a0) {
; SSE2-LABEL: trunc_ssat_v16i32_v16i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm8 = [127,127,127,127]
; SSE2-NEXT:    movdqa %xmm8, %xmm4
; SSE2-NEXT:    pcmpgtd %xmm3, %xmm4
; SSE2-NEXT:    movdqa %xmm8, %xmm5
; SSE2-NEXT:    pcmpgtd %xmm2, %xmm5
; SSE2-NEXT:    movdqa %xmm8, %xmm6
; SSE2-NEXT:    pcmpgtd %xmm1, %xmm6
; SSE2-NEXT:    movdqa %xmm8, %xmm7
; SSE2-NEXT:    pcmpgtd %xmm0, %xmm7
; SSE2-NEXT:    pand %xmm7, %xmm0
; SSE2-NEXT:    pandn %xmm8, %xmm7
; SSE2-NEXT:    por %xmm0, %xmm7
; SSE2-NEXT:    pand %xmm6, %xmm1
; SSE2-NEXT:    pandn %xmm8, %xmm6
; SSE2-NEXT:    por %xmm1, %xmm6
; SSE2-NEXT:    pand %xmm5, %xmm2
; SSE2-NEXT:    pandn %xmm8, %xmm5
; SSE2-NEXT:    por %xmm2, %xmm5
; SSE2-NEXT:    pand %xmm4, %xmm3
; SSE2-NEXT:    pandn %xmm8, %xmm4
; SSE2-NEXT:    por %xmm3, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm8 = [4294967168,4294967168,4294967168,4294967168]
; SSE2-NEXT:    movdqa %xmm4, %xmm3
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm3
; SSE2-NEXT:    movdqa %xmm5, %xmm1
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm1
; SSE2-NEXT:    movdqa %xmm6, %xmm2
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm2
; SSE2-NEXT:    movdqa %xmm7, %xmm0
; SSE2-NEXT:    pcmpgtd %xmm8, %xmm0
; SSE2-NEXT:    pand %xmm0, %xmm7
; SSE2-NEXT:    pandn %xmm8, %xmm0
; SSE2-NEXT:    por %xmm7, %xmm0
; SSE2-NEXT:    pand %xmm2, %xmm6
; SSE2-NEXT:    pandn %xmm8, %xmm2
; SSE2-NEXT:    por %xmm6, %xmm2
; SSE2-NEXT:    pand %xmm1, %xmm5
; SSE2-NEXT:    pandn %xmm8, %xmm1
; SSE2-NEXT:    por %xmm5, %xmm1
; SSE2-NEXT:    pand %xmm3, %xmm4
; SSE2-NEXT:    pandn %xmm8, %xmm3
; SSE2-NEXT:    por %xmm4, %xmm3
; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0]
; SSE2-NEXT:    pand %xmm4, %xmm3
; SSE2-NEXT:    pand %xmm4, %xmm1
; SSE2-NEXT:    packuswb %xmm3, %xmm1
; SSE2-NEXT:    pand %xmm4, %xmm2
; SSE2-NEXT:    pand %xmm4, %xmm0
; SSE2-NEXT:    packuswb %xmm2, %xmm0
; SSE2-NEXT:    packuswb %xmm1, %xmm0
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v16i32_v16i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm8 = [127,127,127,127]
; SSSE3-NEXT:    movdqa %xmm8, %xmm4
; SSSE3-NEXT:    pcmpgtd %xmm3, %xmm4
; SSSE3-NEXT:    movdqa %xmm8, %xmm5
; SSSE3-NEXT:    pcmpgtd %xmm2, %xmm5
; SSSE3-NEXT:    movdqa %xmm8, %xmm6
; SSSE3-NEXT:    pcmpgtd %xmm1, %xmm6
; SSSE3-NEXT:    movdqa %xmm8, %xmm7
; SSSE3-NEXT:    pcmpgtd %xmm0, %xmm7
; SSSE3-NEXT:    pand %xmm7, %xmm0
; SSSE3-NEXT:    pandn %xmm8, %xmm7
; SSSE3-NEXT:    por %xmm0, %xmm7
; SSSE3-NEXT:    pand %xmm6, %xmm1
; SSSE3-NEXT:    pandn %xmm8, %xmm6
; SSSE3-NEXT:    por %xmm1, %xmm6
; SSSE3-NEXT:    pand %xmm5, %xmm2
; SSSE3-NEXT:    pandn %xmm8, %xmm5
; SSSE3-NEXT:    por %xmm2, %xmm5
; SSSE3-NEXT:    pand %xmm4, %xmm3
; SSSE3-NEXT:    pandn %xmm8, %xmm4
; SSSE3-NEXT:    por %xmm3, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm8 = [4294967168,4294967168,4294967168,4294967168]
; SSSE3-NEXT:    movdqa %xmm4, %xmm3
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm3
; SSSE3-NEXT:    movdqa %xmm5, %xmm1
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm1
; SSSE3-NEXT:    movdqa %xmm6, %xmm2
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm2
; SSSE3-NEXT:    movdqa %xmm7, %xmm0
; SSSE3-NEXT:    pcmpgtd %xmm8, %xmm0
; SSSE3-NEXT:    pand %xmm0, %xmm7
; SSSE3-NEXT:    pandn %xmm8, %xmm0
; SSSE3-NEXT:    por %xmm7, %xmm0
; SSSE3-NEXT:    pand %xmm2, %xmm6
; SSSE3-NEXT:    pandn %xmm8, %xmm2
; SSSE3-NEXT:    por %xmm6, %xmm2
; SSSE3-NEXT:    pand %xmm1, %xmm5
; SSSE3-NEXT:    pandn %xmm8, %xmm1
; SSSE3-NEXT:    por %xmm5, %xmm1
; SSSE3-NEXT:    pand %xmm3, %xmm4
; SSSE3-NEXT:    pandn %xmm8, %xmm3
; SSSE3-NEXT:    por %xmm4, %xmm3
; SSSE3-NEXT:    movdqa {{.*#+}} xmm4 = [255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0]
; SSSE3-NEXT:    pand %xmm4, %xmm3
; SSSE3-NEXT:    pand %xmm4, %xmm1
; SSSE3-NEXT:    packuswb %xmm3, %xmm1
; SSSE3-NEXT:    pand %xmm4, %xmm2
; SSSE3-NEXT:    pand %xmm4, %xmm0
; SSSE3-NEXT:    packuswb %xmm2, %xmm0
; SSSE3-NEXT:    packuswb %xmm1, %xmm0
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v16i32_v16i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [127,127,127,127]
; SSE41-NEXT:    pminsd %xmm4, %xmm3
; SSE41-NEXT:    pminsd %xmm4, %xmm2
; SSE41-NEXT:    pminsd %xmm4, %xmm1
; SSE41-NEXT:    pminsd %xmm4, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [4294967168,4294967168,4294967168,4294967168]
; SSE41-NEXT:    pmaxsd %xmm4, %xmm0
; SSE41-NEXT:    pmaxsd %xmm4, %xmm1
; SSE41-NEXT:    pmaxsd %xmm4, %xmm2
; SSE41-NEXT:    pmaxsd %xmm4, %xmm3
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0]
; SSE41-NEXT:    pand %xmm4, %xmm3
; SSE41-NEXT:    pand %xmm4, %xmm2
; SSE41-NEXT:    packuswb %xmm3, %xmm2
; SSE41-NEXT:    pand %xmm4, %xmm1
; SSE41-NEXT:    pand %xmm4, %xmm0
; SSE41-NEXT:    packuswb %xmm1, %xmm0
; SSE41-NEXT:    packuswb %xmm2, %xmm0
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v16i32_v16i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [127,127,127,127]
; AVX1-NEXT:    vpminsd %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpminsd %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpminsd %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpminsd %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [4294967168,4294967168,4294967168,4294967168]
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vpmaxsd %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0]
; AVX1-NEXT:    vpand %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpand %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vpackuswb %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpand %xmm3, %xmm4, %xmm2
; AVX1-NEXT:    vpand %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpackuswb %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpackuswb %xmm1, %xmm0, %xmm0
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v16i32_v16i8:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [127,127,127,127,127,127,127,127]
; AVX2-NEXT:    vpminsd %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpminsd %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168,4294967168]
; AVX2-NEXT:    vpmaxsd %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpmaxsd %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vmovdqa {{.*#+}} ymm2 = [0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
; AVX2-NEXT:    vpshufb %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpermq {{.*#+}} ymm1 = ymm1[0,2,2,3]
; AVX2-NEXT:    vmovdqa {{.*#+}} xmm3 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX2-NEXT:    vpshufb %xmm3, %xmm1, %xmm1
; AVX2-NEXT:    vpshufb %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
; AVX2-NEXT:    vpshufb %xmm3, %xmm0, %xmm0
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; AVX2-NEXT:    vzeroupper
; AVX2-NEXT:    retq
;
; AVX512-LABEL: trunc_ssat_v16i32_v16i8:
; AVX512:       # %bb.0:
; AVX512-NEXT:    vpmovsdb %zmm0, %xmm0
; AVX512-NEXT:    vzeroupper
; AVX512-NEXT:    retq
  %1 = icmp slt <16 x i32> %a0, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %2 = select <16 x i1> %1, <16 x i32> %a0, <16 x i32> <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %3 = icmp sgt <16 x i32> %2, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %4 = select <16 x i1> %3, <16 x i32> %2, <16 x i32> <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %5 = trunc <16 x i32> %4 to <16 x i8>
  ret <16 x i8> %5
}

define <16 x i8> @trunc_ssat_v16i16_v16i8(<16 x i16> %a0) {
; SSE2-LABEL: trunc_ssat_v16i16_v16i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127,127,127,127,127]
; SSE2-NEXT:    pminsw %xmm2, %xmm1
; SSE2-NEXT:    pminsw %xmm2, %xmm0
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSE2-NEXT:    pmaxsw %xmm2, %xmm0
; SSE2-NEXT:    pmaxsw %xmm2, %xmm1
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [255,255,255,255,255,255,255,255]
; SSE2-NEXT:    pand %xmm2, %xmm1
; SSE2-NEXT:    pand %xmm2, %xmm0
; SSE2-NEXT:    packuswb %xmm1, %xmm0
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v16i16_v16i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127,127,127,127,127]
; SSSE3-NEXT:    pminsw %xmm2, %xmm1
; SSSE3-NEXT:    pminsw %xmm2, %xmm0
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm0
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm1
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; SSSE3-NEXT:    pshufb %xmm2, %xmm1
; SSSE3-NEXT:    pshufb %xmm2, %xmm0
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v16i16_v16i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [127,127,127,127,127,127,127,127]
; SSE41-NEXT:    pminsw %xmm2, %xmm1
; SSE41-NEXT:    pminsw %xmm2, %xmm0
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSE41-NEXT:    pmaxsw %xmm2, %xmm0
; SSE41-NEXT:    pmaxsw %xmm2, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; SSE41-NEXT:    pshufb %xmm2, %xmm1
; SSE41-NEXT:    pshufb %xmm2, %xmm0
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v16i16_v16i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [127,127,127,127,127,127,127,127]
; AVX1-NEXT:    vpminsw %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpminsw %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; AVX1-NEXT:    vpmaxsw %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsw %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX1-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
; AVX1-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; AVX1-NEXT:    vzeroupper
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v16i16_v16i8:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vpminsw {{.*}}(%rip), %ymm0, %ymm0
; AVX2-NEXT:    vpmaxsw {{.*}}(%rip), %ymm0, %ymm0
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX2-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
; AVX2-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; AVX2-NEXT:    vzeroupper
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: trunc_ssat_v16i16_v16i8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpminsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512F-NEXT:    vpmaxsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512F-NEXT:    vpmovsxwd %ymm0, %zmm0
; AVX512F-NEXT:    vpmovdb %zmm0, %xmm0
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
;
; AVX512VL-LABEL: trunc_ssat_v16i16_v16i8:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vpminsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512VL-NEXT:    vpmaxsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512VL-NEXT:    vpmovsxwd %ymm0, %zmm0
; AVX512VL-NEXT:    vpmovdb %zmm0, %xmm0
; AVX512VL-NEXT:    vzeroupper
; AVX512VL-NEXT:    retq
;
; AVX512BW-LABEL: trunc_ssat_v16i16_v16i8:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vpminsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512BW-NEXT:    vpmaxsw {{.*}}(%rip), %ymm0, %ymm0
; AVX512BW-NEXT:    vpmovwb %zmm0, %ymm0
; AVX512BW-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; AVX512BW-NEXT:    vzeroupper
; AVX512BW-NEXT:    retq
;
; AVX512BWVL-LABEL: trunc_ssat_v16i16_v16i8:
; AVX512BWVL:       # %bb.0:
; AVX512BWVL-NEXT:    vpmovswb %ymm0, %xmm0
; AVX512BWVL-NEXT:    vzeroupper
; AVX512BWVL-NEXT:    retq
  %1 = icmp slt <16 x i16> %a0, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %2 = select <16 x i1> %1, <16 x i16> %a0, <16 x i16> <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %3 = icmp sgt <16 x i16> %2, <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>
  %4 = select <16 x i1> %3, <16 x i16> %2, <16 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>
  %5 = trunc <16 x i16> %4 to <16 x i8>
  ret <16 x i8> %5
}

define <32 x i8> @trunc_ssat_v32i16_v32i8(<32 x i16> %a0) {
; SSE2-LABEL: trunc_ssat_v32i16_v32i8:
; SSE2:       # %bb.0:
; SSE2-NEXT:    movdqa {{.*#+}} xmm4 = [127,127,127,127,127,127,127,127]
; SSE2-NEXT:    pminsw %xmm4, %xmm1
; SSE2-NEXT:    pminsw %xmm4, %xmm0
; SSE2-NEXT:    pminsw %xmm4, %xmm3
; SSE2-NEXT:    pminsw %xmm2, %xmm4
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSE2-NEXT:    pmaxsw %xmm2, %xmm4
; SSE2-NEXT:    pmaxsw %xmm2, %xmm3
; SSE2-NEXT:    pmaxsw %xmm2, %xmm0
; SSE2-NEXT:    pmaxsw %xmm2, %xmm1
; SSE2-NEXT:    movdqa {{.*#+}} xmm2 = [255,255,255,255,255,255,255,255]
; SSE2-NEXT:    pand %xmm2, %xmm1
; SSE2-NEXT:    pand %xmm2, %xmm0
; SSE2-NEXT:    packuswb %xmm1, %xmm0
; SSE2-NEXT:    pand %xmm2, %xmm3
; SSE2-NEXT:    pand %xmm2, %xmm4
; SSE2-NEXT:    packuswb %xmm3, %xmm4
; SSE2-NEXT:    movdqa %xmm4, %xmm1
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: trunc_ssat_v32i16_v32i8:
; SSSE3:       # %bb.0:
; SSSE3-NEXT:    movdqa {{.*#+}} xmm4 = [127,127,127,127,127,127,127,127]
; SSSE3-NEXT:    pminsw %xmm4, %xmm1
; SSSE3-NEXT:    pminsw %xmm4, %xmm0
; SSSE3-NEXT:    pminsw %xmm4, %xmm3
; SSSE3-NEXT:    pminsw %xmm2, %xmm4
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm4
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm3
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm0
; SSSE3-NEXT:    pmaxsw %xmm2, %xmm1
; SSSE3-NEXT:    movdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; SSSE3-NEXT:    pshufb %xmm2, %xmm1
; SSSE3-NEXT:    pshufb %xmm2, %xmm0
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSSE3-NEXT:    pshufb %xmm2, %xmm3
; SSSE3-NEXT:    pshufb %xmm2, %xmm4
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm4 = xmm4[0],xmm3[0]
; SSSE3-NEXT:    movdqa %xmm4, %xmm1
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: trunc_ssat_v32i16_v32i8:
; SSE41:       # %bb.0:
; SSE41-NEXT:    movdqa {{.*#+}} xmm4 = [127,127,127,127,127,127,127,127]
; SSE41-NEXT:    pminsw %xmm4, %xmm1
; SSE41-NEXT:    pminsw %xmm4, %xmm0
; SSE41-NEXT:    pminsw %xmm4, %xmm3
; SSE41-NEXT:    pminsw %xmm2, %xmm4
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = [65408,65408,65408,65408,65408,65408,65408,65408]
; SSE41-NEXT:    pmaxsw %xmm2, %xmm4
; SSE41-NEXT:    pmaxsw %xmm2, %xmm3
; SSE41-NEXT:    pmaxsw %xmm2, %xmm0
; SSE41-NEXT:    pmaxsw %xmm2, %xmm1
; SSE41-NEXT:    movdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; SSE41-NEXT:    pshufb %xmm2, %xmm1
; SSE41-NEXT:    pshufb %xmm2, %xmm0
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE41-NEXT:    pshufb %xmm2, %xmm3
; SSE41-NEXT:    pshufb %xmm2, %xmm4
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm4 = xmm4[0],xmm3[0]
; SSE41-NEXT:    movdqa %xmm4, %xmm1
; SSE41-NEXT:    retq
;
; AVX1-LABEL: trunc_ssat_v32i16_v32i8:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vextractf128 $1, %ymm1, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [127,127,127,127,127,127,127,127]
; AVX1-NEXT:    vpminsw %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpminsw %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm4
; AVX1-NEXT:    vpminsw %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpminsw %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = [65408,65408,65408,65408,65408,65408,65408,65408]
; AVX1-NEXT:    vpmaxsw %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpmaxsw %xmm3, %xmm4, %xmm4
; AVX1-NEXT:    vpmaxsw %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vpmaxsw %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vmovdqa {{.*#+}} xmm3 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX1-NEXT:    vpshufb %xmm3, %xmm2, %xmm2
; AVX1-NEXT:    vpshufb %xmm3, %xmm1, %xmm1
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX1-NEXT:    vpshufb %xmm3, %xmm4, %xmm2
; AVX1-NEXT:    vpshufb %xmm3, %xmm0, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: trunc_ssat_v32i16_v32i8:
; AVX2:       # %bb.0:
; AVX2-NEXT:    vmovdqa {{.*#+}} ymm2 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
; AVX2-NEXT:    vpminsw %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpminsw %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vmovdqa {{.*#+}} ymm2 = [65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408]
; AVX2-NEXT:    vpmaxsw %ymm2, %ymm0, %ymm0
; AVX2-NEXT:    vpmaxsw %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vextracti128 $1, %ymm1, %xmm2
; AVX2-NEXT:    vmovdqa {{.*#+}} xmm3 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
; AVX2-NEXT:    vpshufb %xmm3, %xmm2, %xmm2
; AVX2-NEXT:    vpshufb %xmm3, %xmm1, %xmm1
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm2
; AVX2-NEXT:    vpshufb %xmm3, %xmm2, %xmm2
; AVX2-NEXT:    vpshufb %xmm3, %xmm0, %xmm0
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
;
; AVX512F-LABEL: trunc_ssat_v32i16_v32i8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm2 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
; AVX512F-NEXT:    vpminsw %ymm2, %ymm0, %ymm0
; AVX512F-NEXT:    vpminsw %ymm2, %ymm1, %ymm1
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm2 = [65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408]
; AVX512F-NEXT:    vpmaxsw %ymm2, %ymm1, %ymm1
; AVX512F-NEXT:    vpmaxsw %ymm2, %ymm0, %ymm0
; AVX512F-NEXT:    vpmovsxwd %ymm0, %zmm0
; AVX512F-NEXT:    vpmovdb %zmm0, %xmm0
; AVX512F-NEXT:    vpmovsxwd %ymm1, %zmm1
; AVX512F-NEXT:    vpmovdb %zmm1, %xmm1
; AVX512F-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX512F-NEXT:    retq
;
; AVX512VL-LABEL: trunc_ssat_v32i16_v32i8:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vmovdqa {{.*#+}} ymm2 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
; AVX512VL-NEXT:    vpminsw %ymm2, %ymm0, %ymm0
; AVX512VL-NEXT:    vpminsw %ymm2, %ymm1, %ymm1
; AVX512VL-NEXT:    vmovdqa {{.*#+}} ymm2 = [65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408,65408]
; AVX512VL-NEXT:    vpmaxsw %ymm2, %ymm1, %ymm1
; AVX512VL-NEXT:    vpmaxsw %ymm2, %ymm0, %ymm0
; AVX512VL-NEXT:    vpmovsxwd %ymm0, %zmm0
; AVX512VL-NEXT:    vpmovdb %zmm0, %xmm0
; AVX512VL-NEXT:    vpmovsxwd %ymm1, %zmm1
; AVX512VL-NEXT:    vpmovdb %zmm1, %xmm1
; AVX512VL-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX512VL-NEXT:    retq
;
; AVX512BW-LABEL: trunc_ssat_v32i16_v32i8:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    vpmovswb %zmm0, %ymm0
; AVX512BW-NEXT:    retq
;
; AVX512BWVL-LABEL: trunc_ssat_v32i16_v32i8:
; AVX512BWVL:       # %bb.0:
; AVX512BWVL-NEXT:    vpmovswb %zmm0, %ymm0
; AVX512BWVL-NEXT:    retq
  %1 = icmp slt <32 x i16> %a0, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %2 = select <32 x i1> %1, <32 x i16> %a0, <32 x i16> <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %3 = icmp sgt <32 x i16> %2, <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>
  %4 = select <32 x i1> %3, <32 x i16> %2, <32 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>
  %5 = trunc <32 x i16> %4 to <32 x i8>
  ret <32 x i8> %5
}
