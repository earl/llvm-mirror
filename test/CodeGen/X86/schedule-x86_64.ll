; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=x86-64 | FileCheck %s --check-prefix=CHECK --check-prefix=GENERIC
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=atom | FileCheck %s --check-prefix=CHECK --check-prefix=ATOM
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=slm | FileCheck %s --check-prefix=CHECK --check-prefix=SLM
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=sandybridge | FileCheck %s --check-prefix=CHECK --check-prefix=SANDY
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=ivybridge | FileCheck %s --check-prefix=CHECK --check-prefix=SANDY
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=haswell | FileCheck %s --check-prefix=CHECK --check-prefix=HASWELL
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=broadwell | FileCheck %s --check-prefix=CHECK --check-prefix=BROADWELL
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=skylake | FileCheck %s --check-prefix=CHECK --check-prefix=SKYLAKE
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=skx | FileCheck %s --check-prefix=CHECK --check-prefix=SKX
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=btver2 | FileCheck %s --check-prefix=CHECK --check-prefix=BTVER2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -print-schedule -mcpu=znver1 | FileCheck %s --check-prefix=CHECK --check-prefix=ZNVER1

; TODO - test_adc

define void @test_adcx(i32 %a0, i32* %a1, i64 %a2, i64* %a3) optsize {
; GENERIC-LABEL: test_adcx:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    adcxl %edi, %edi # sched: [1:0.33]
; GENERIC-NEXT:    adcxq %rdx, %rdx # sched: [1:0.33]
; GENERIC-NEXT:    adcxl (%rsi), %edi # sched: [5:0.50]
; GENERIC-NEXT:    adcxq (%rcx), %rdx # sched: [5:0.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_adcx:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; ATOM-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; ATOM-NEXT:    adcxl (%rsi), %edi # sched: [1:1.00]
; ATOM-NEXT:    adcxq (%rcx), %rdx # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_adcx:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; SLM-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; SLM-NEXT:    adcxl (%rsi), %edi # sched: [4:1.00]
; SLM-NEXT:    adcxq (%rcx), %rdx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_adcx:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    adcxl %edi, %edi # sched: [1:0.33]
; SANDY-NEXT:    adcxq %rdx, %rdx # sched: [1:0.33]
; SANDY-NEXT:    adcxl (%rsi), %edi # sched: [5:0.50]
; SANDY-NEXT:    adcxq (%rcx), %rdx # sched: [5:0.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_adcx:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    adcxl %edi, %edi # sched: [1:0.25]
; HASWELL-NEXT:    adcxq %rdx, %rdx # sched: [1:0.25]
; HASWELL-NEXT:    adcxl (%rsi), %edi # sched: [6:0.50]
; HASWELL-NEXT:    adcxq (%rcx), %rdx # sched: [6:0.50]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_adcx:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; BROADWELL-NEXT:    adcxl (%rsi), %edi # sched: [6:0.50]
; BROADWELL-NEXT:    adcxq (%rcx), %rdx # sched: [6:0.50]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_adcx:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; SKYLAKE-NEXT:    adcxl (%rsi), %edi # sched: [6:0.50]
; SKYLAKE-NEXT:    adcxq (%rcx), %rdx # sched: [6:0.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_adcx:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; SKX-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; SKX-NEXT:    adcxl (%rsi), %edi # sched: [6:0.50]
; SKX-NEXT:    adcxq (%rcx), %rdx # sched: [6:0.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_adcx:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    adcxl %edi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    adcxq %rdx, %rdx # sched: [1:0.50]
; BTVER2-NEXT:    adcxl (%rsi), %edi # sched: [4:1.00]
; BTVER2-NEXT:    adcxq (%rcx), %rdx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_adcx:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    adcxl %edi, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    adcxq %rdx, %rdx # sched: [1:0.25]
; ZNVER1-NEXT:    adcxl (%rsi), %edi # sched: [5:0.50]
; ZNVER1-NEXT:    adcxq (%rcx), %rdx # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "adcx $0, $0 \0A\09 adcx $2, $2 \0A\09 adcx $1, $0 \0A\09 adcx $3, $2", "r,*m,r,*m"(i32 %a0, i32* %a1, i64 %a2, i64* %a3) nounwind
  ret void
}

; TODO - test_add

define void @test_adox(i32 %a0, i32* %a1, i64 %a2, i64* %a3) optsize {
; GENERIC-LABEL: test_adox:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    adoxl %edi, %edi # sched: [1:0.33]
; GENERIC-NEXT:    adoxq %rdx, %rdx # sched: [1:0.33]
; GENERIC-NEXT:    adoxl (%rsi), %edi # sched: [5:0.50]
; GENERIC-NEXT:    adoxq (%rcx), %rdx # sched: [5:0.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_adox:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; ATOM-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; ATOM-NEXT:    adoxl (%rsi), %edi # sched: [1:1.00]
; ATOM-NEXT:    adoxq (%rcx), %rdx # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_adox:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; SLM-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; SLM-NEXT:    adoxl (%rsi), %edi # sched: [4:1.00]
; SLM-NEXT:    adoxq (%rcx), %rdx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_adox:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    adoxl %edi, %edi # sched: [1:0.33]
; SANDY-NEXT:    adoxq %rdx, %rdx # sched: [1:0.33]
; SANDY-NEXT:    adoxl (%rsi), %edi # sched: [5:0.50]
; SANDY-NEXT:    adoxq (%rcx), %rdx # sched: [5:0.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_adox:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    adoxl %edi, %edi # sched: [1:0.25]
; HASWELL-NEXT:    adoxq %rdx, %rdx # sched: [1:0.25]
; HASWELL-NEXT:    adoxl (%rsi), %edi # sched: [6:0.50]
; HASWELL-NEXT:    adoxq (%rcx), %rdx # sched: [6:0.50]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_adox:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; BROADWELL-NEXT:    adoxl (%rsi), %edi # sched: [6:0.50]
; BROADWELL-NEXT:    adoxq (%rcx), %rdx # sched: [6:0.50]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_adox:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; SKYLAKE-NEXT:    adoxl (%rsi), %edi # sched: [6:0.50]
; SKYLAKE-NEXT:    adoxq (%rcx), %rdx # sched: [6:0.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_adox:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; SKX-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; SKX-NEXT:    adoxl (%rsi), %edi # sched: [6:0.50]
; SKX-NEXT:    adoxq (%rcx), %rdx # sched: [6:0.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_adox:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    adoxl %edi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    adoxq %rdx, %rdx # sched: [1:0.50]
; BTVER2-NEXT:    adoxl (%rsi), %edi # sched: [4:1.00]
; BTVER2-NEXT:    adoxq (%rcx), %rdx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_adox:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    adoxl %edi, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    adoxq %rdx, %rdx # sched: [1:0.25]
; ZNVER1-NEXT:    adoxl (%rsi), %edi # sched: [5:0.50]
; ZNVER1-NEXT:    adoxq (%rcx), %rdx # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "adox $0, $0 \0A\09 adox $2, $2 \0A\09 adox $1, $0 \0A\09 adox $3, $2", "r,*m,r,*m"(i32 %a0, i32* %a1, i64 %a2, i64* %a3) nounwind
  ret void
}

; TODO - test_and

define i16 @test_bsf16(i16 %a0, i16* %a1) optsize {
; GENERIC-LABEL: test_bsf16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; GENERIC-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; GENERIC-NEXT:    # kill: def %ax killed %ax killed %eax
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsf16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsfw %di, %ax # sched: [16:8.00]
; ATOM-NEXT:    bsfw (%rsi), %cx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; ATOM-NEXT:    # kill: def %ax killed %ax killed %eax
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsf16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsfw %di, %ax # sched: [1:1.00]
; SLM-NEXT:    bsfw (%rsi), %cx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; SLM-NEXT:    # kill: def %ax killed %ax killed %eax
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsf16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; SANDY-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; SANDY-NEXT:    # kill: def %ax killed %ax killed %eax
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsf16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; HASWELL-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; HASWELL-NEXT:    # kill: def %ax killed %ax killed %eax
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsf16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; BROADWELL-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; BROADWELL-NEXT:    # kill: def %ax killed %ax killed %eax
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsf16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKYLAKE-NEXT:    # kill: def %ax killed %ax killed %eax
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsf16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsfw %di, %ax # sched: [3:1.00]
; SKX-NEXT:    bsfw (%rsi), %cx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKX-NEXT:    # kill: def %ax killed %ax killed %eax
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsf16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsfw %di, %ax # sched: [1:0.50]
; BTVER2-NEXT:    bsfw (%rsi), %cx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; BTVER2-NEXT:    # kill: def %ax killed %ax killed %eax
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsf16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsfw %di, %ax # sched: [3:0.25]
; ZNVER1-NEXT:    bsfw (%rsi), %cx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; ZNVER1-NEXT:    # kill: def %ax killed %ax killed %eax
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i16, i16 } asm sideeffect "bsf $2, $0 \0A\09 bsf $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i16 %a0, i16* %a1)
  %2 = extractvalue { i16, i16 } %1, 0
  %3 = extractvalue { i16, i16 } %1, 1
  %4 = or i16 %2, %3
  ret i16 %4
}
define i32 @test_bsf32(i32 %a0, i32* %a1) optsize {
; GENERIC-LABEL: test_bsf32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; GENERIC-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsf32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsfl %edi, %eax # sched: [16:8.00]
; ATOM-NEXT:    bsfl (%rsi), %ecx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsf32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsfl %edi, %eax # sched: [1:1.00]
; SLM-NEXT:    bsfl (%rsi), %ecx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsf32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; SANDY-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsf32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; HASWELL-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsf32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; BROADWELL-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsf32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsf32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsfl %edi, %eax # sched: [3:1.00]
; SKX-NEXT:    bsfl (%rsi), %ecx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsf32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsfl %edi, %eax # sched: [1:0.50]
; BTVER2-NEXT:    bsfl (%rsi), %ecx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsf32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsfl %edi, %eax # sched: [3:0.25]
; ZNVER1-NEXT:    bsfl (%rsi), %ecx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i32, i32 } asm sideeffect "bsf $2, $0 \0A\09 bsf $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i32 %a0, i32* %a1)
  %2 = extractvalue { i32, i32 } %1, 0
  %3 = extractvalue { i32, i32 } %1, 1
  %4 = or i32 %2, %3
  ret i32 %4
}
define i64 @test_bsf64(i64 %a0, i64* %a1) optsize {
; GENERIC-LABEL: test_bsf64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; GENERIC-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orq %rcx, %rax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsf64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsfq %rdi, %rax # sched: [16:8.00]
; ATOM-NEXT:    bsfq (%rsi), %rcx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsf64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsfq %rdi, %rax # sched: [1:1.00]
; SLM-NEXT:    bsfq (%rsi), %rcx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsf64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; SANDY-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orq %rcx, %rax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsf64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; HASWELL-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsf64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; BROADWELL-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsf64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsf64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsfq %rdi, %rax # sched: [3:1.00]
; SKX-NEXT:    bsfq (%rsi), %rcx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsf64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsfq %rdi, %rax # sched: [1:0.50]
; BTVER2-NEXT:    bsfq (%rsi), %rcx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsf64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsfq %rdi, %rax # sched: [3:0.25]
; ZNVER1-NEXT:    bsfq (%rsi), %rcx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i64, i64 } asm sideeffect "bsf $2, $0 \0A\09 bsf $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i64 %a0, i64* %a1)
  %2 = extractvalue { i64, i64 } %1, 0
  %3 = extractvalue { i64, i64 } %1, 1
  %4 = or i64 %2, %3
  ret i64 %4
}

define i16 @test_bsr16(i16 %a0, i16* %a1) optsize {
; GENERIC-LABEL: test_bsr16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; GENERIC-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; GENERIC-NEXT:    # kill: def %ax killed %ax killed %eax
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsr16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsrw %di, %ax # sched: [16:8.00]
; ATOM-NEXT:    bsrw (%rsi), %cx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; ATOM-NEXT:    # kill: def %ax killed %ax killed %eax
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsr16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsrw %di, %ax # sched: [1:1.00]
; SLM-NEXT:    bsrw (%rsi), %cx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; SLM-NEXT:    # kill: def %ax killed %ax killed %eax
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsr16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; SANDY-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; SANDY-NEXT:    # kill: def %ax killed %ax killed %eax
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsr16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; HASWELL-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; HASWELL-NEXT:    # kill: def %ax killed %ax killed %eax
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsr16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; BROADWELL-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; BROADWELL-NEXT:    # kill: def %ax killed %ax killed %eax
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsr16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKYLAKE-NEXT:    # kill: def %ax killed %ax killed %eax
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsr16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsrw %di, %ax # sched: [3:1.00]
; SKX-NEXT:    bsrw (%rsi), %cx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKX-NEXT:    # kill: def %ax killed %ax killed %eax
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsr16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsrw %di, %ax # sched: [1:0.50]
; BTVER2-NEXT:    bsrw (%rsi), %cx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; BTVER2-NEXT:    # kill: def %ax killed %ax killed %eax
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsr16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsrw %di, %ax # sched: [3:0.25]
; ZNVER1-NEXT:    bsrw (%rsi), %cx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; ZNVER1-NEXT:    # kill: def %ax killed %ax killed %eax
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i16, i16 } asm sideeffect "bsr $2, $0 \0A\09 bsr $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i16 %a0, i16* %a1)
  %2 = extractvalue { i16, i16 } %1, 0
  %3 = extractvalue { i16, i16 } %1, 1
  %4 = or i16 %2, %3
  ret i16 %4
}
define i32 @test_bsr32(i32 %a0, i32* %a1) optsize {
; GENERIC-LABEL: test_bsr32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; GENERIC-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsr32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsrl %edi, %eax # sched: [16:8.00]
; ATOM-NEXT:    bsrl (%rsi), %ecx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsr32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsrl %edi, %eax # sched: [1:1.00]
; SLM-NEXT:    bsrl (%rsi), %ecx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsr32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; SANDY-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orl %ecx, %eax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsr32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; HASWELL-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsr32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; BROADWELL-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsr32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsr32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsrl %edi, %eax # sched: [3:1.00]
; SKX-NEXT:    bsrl (%rsi), %ecx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsr32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsrl %edi, %eax # sched: [1:0.50]
; BTVER2-NEXT:    bsrl (%rsi), %ecx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orl %ecx, %eax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsr32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsrl %edi, %eax # sched: [3:0.25]
; ZNVER1-NEXT:    bsrl (%rsi), %ecx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orl %ecx, %eax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i32, i32 } asm sideeffect "bsr $2, $0 \0A\09 bsr $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i32 %a0, i32* %a1)
  %2 = extractvalue { i32, i32 } %1, 0
  %3 = extractvalue { i32, i32 } %1, 1
  %4 = or i32 %2, %3
  ret i32 %4
}
define i64 @test_bsr64(i64 %a0, i64* %a1) optsize {
; GENERIC-LABEL: test_bsr64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; GENERIC-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    orq %rcx, %rax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bsr64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    bsrq %rdi, %rax # sched: [16:8.00]
; ATOM-NEXT:    bsrq (%rsi), %rcx # sched: [16:8.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bsr64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    bsrq %rdi, %rax # sched: [1:1.00]
; SLM-NEXT:    bsrq (%rsi), %rcx # sched: [4:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bsr64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; SANDY-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    orq %rcx, %rax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bsr64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; HASWELL-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bsr64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; BROADWELL-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bsr64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; SKYLAKE-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bsr64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    bsrq %rdi, %rax # sched: [3:1.00]
; SKX-NEXT:    bsrq (%rsi), %rcx # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bsr64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    bsrq %rdi, %rax # sched: [1:0.50]
; BTVER2-NEXT:    bsrq (%rsi), %rcx # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    orq %rcx, %rax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bsr64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    bsrq %rdi, %rax # sched: [3:0.25]
; ZNVER1-NEXT:    bsrq (%rsi), %rcx # sched: [7:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    orq %rcx, %rax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = call { i64, i64 } asm sideeffect "bsr $2, $0 \0A\09 bsr $3, $1", "=r,=r,r,*m,~{dirflag},~{fpsr},~{flags}"(i64 %a0, i64* %a1)
  %2 = extractvalue { i64, i64 } %1, 0
  %3 = extractvalue { i64, i64 } %1, 1
  %4 = or i64 %2, %3
  ret i64 %4
}

define i32 @test_bswap32(i32 %a0) optsize {
; GENERIC-LABEL: test_bswap32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    bswapl %edi # sched: [2:1.00]
; GENERIC-NEXT:    movl %edi, %eax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bswap32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    bswapl %edi # sched: [1:1.00]
; ATOM-NEXT:    movl %edi, %eax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bswap32:
; SLM:       # %bb.0:
; SLM-NEXT:    bswapl %edi # sched: [1:0.50]
; SLM-NEXT:    movl %edi, %eax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bswap32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    bswapl %edi # sched: [2:1.00]
; SANDY-NEXT:    movl %edi, %eax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bswap32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    bswapl %edi # sched: [2:0.50]
; HASWELL-NEXT:    movl %edi, %eax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bswap32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    bswapl %edi # sched: [2:0.50]
; BROADWELL-NEXT:    movl %edi, %eax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bswap32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    bswapl %edi # sched: [2:0.50]
; SKYLAKE-NEXT:    movl %edi, %eax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bswap32:
; SKX:       # %bb.0:
; SKX-NEXT:    bswapl %edi # sched: [2:0.50]
; SKX-NEXT:    movl %edi, %eax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bswap32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    bswapl %edi # sched: [1:0.50]
; BTVER2-NEXT:    movl %edi, %eax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bswap32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    bswapl %edi # sched: [1:1.00]
; ZNVER1-NEXT:    movl %edi, %eax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = tail call i32 asm "bswap $0", "=r,0"(i32 %a0) nounwind
  ret i32 %1
}
define i64 @test_bswap64(i64 %a0) optsize {
; GENERIC-LABEL: test_bswap64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    bswapq %rdi # sched: [2:1.00]
; GENERIC-NEXT:    movq %rdi, %rax # sched: [1:0.33]
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bswap64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    bswapq %rdi # sched: [1:1.00]
; ATOM-NEXT:    movq %rdi, %rax # sched: [1:0.50]
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bswap64:
; SLM:       # %bb.0:
; SLM-NEXT:    bswapq %rdi # sched: [1:0.50]
; SLM-NEXT:    movq %rdi, %rax # sched: [1:0.50]
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bswap64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    bswapq %rdi # sched: [2:1.00]
; SANDY-NEXT:    movq %rdi, %rax # sched: [1:0.33]
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bswap64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    bswapq %rdi # sched: [2:0.50]
; HASWELL-NEXT:    movq %rdi, %rax # sched: [1:0.25]
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bswap64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    bswapq %rdi # sched: [2:0.50]
; BROADWELL-NEXT:    movq %rdi, %rax # sched: [1:0.25]
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bswap64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    bswapq %rdi # sched: [2:0.50]
; SKYLAKE-NEXT:    movq %rdi, %rax # sched: [1:0.25]
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bswap64:
; SKX:       # %bb.0:
; SKX-NEXT:    bswapq %rdi # sched: [2:0.50]
; SKX-NEXT:    movq %rdi, %rax # sched: [1:0.25]
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bswap64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    bswapq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    movq %rdi, %rax # sched: [1:0.50]
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bswap64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    bswapq %rdi # sched: [1:1.00]
; ZNVER1-NEXT:    movq %rdi, %rax # sched: [1:0.25]
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  %1 = tail call i64 asm "bswap $0", "=r,0"(i64 %a0) nounwind
  ret i64 %1
}

define void @test_bt_btc_btr_bts_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_bt_btc_btr_bts_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    btw %si, %di # sched: [1:0.50]
; GENERIC-NEXT:    btcw %si, %di # sched: [1:0.50]
; GENERIC-NEXT:    btrw %si, %di # sched: [1:0.50]
; GENERIC-NEXT:    btsw %si, %di # sched: [1:0.50]
; GENERIC-NEXT:    btw %si, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btcw %si, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btrw %si, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btsw %si, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    btcw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    btrw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    btsw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; GENERIC-NEXT:    btcw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btrw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btsw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bt_btc_btr_bts_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    btw %si, %di # sched: [1:1.00]
; ATOM-NEXT:    btcw %si, %di # sched: [1:1.00]
; ATOM-NEXT:    btrw %si, %di # sched: [1:1.00]
; ATOM-NEXT:    btsw %si, %di # sched: [1:1.00]
; ATOM-NEXT:    btw %si, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    btcw %si, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btrw %si, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btsw %si, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    btcw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    btrw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    btsw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    btw $7, (%rdx) # sched: [1:0.50]
; ATOM-NEXT:    btcw $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btrw $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btsw $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bt_btc_btr_bts_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    btw %si, %di # sched: [1:0.50]
; SLM-NEXT:    btcw %si, %di # sched: [1:0.50]
; SLM-NEXT:    btrw %si, %di # sched: [1:0.50]
; SLM-NEXT:    btsw %si, %di # sched: [1:0.50]
; SLM-NEXT:    btw %si, (%rdx) # sched: [4:1.00]
; SLM-NEXT:    btcw %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrw %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsw %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btw $7, %di # sched: [1:0.50]
; SLM-NEXT:    btcw $7, %di # sched: [1:0.50]
; SLM-NEXT:    btrw $7, %di # sched: [1:0.50]
; SLM-NEXT:    btsw $7, %di # sched: [1:0.50]
; SLM-NEXT:    btw $7, (%rdx) # sched: [1:0.50]
; SLM-NEXT:    btcw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bt_btc_btr_bts_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    btw %si, %di # sched: [1:0.50]
; SANDY-NEXT:    btcw %si, %di # sched: [1:0.50]
; SANDY-NEXT:    btrw %si, %di # sched: [1:0.50]
; SANDY-NEXT:    btsw %si, %di # sched: [1:0.50]
; SANDY-NEXT:    btw %si, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btcw %si, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btrw %si, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btsw %si, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    btcw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    btrw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    btsw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; SANDY-NEXT:    btcw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btrw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btsw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bt_btc_btr_bts_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    btw %si, %di # sched: [1:0.50]
; HASWELL-NEXT:    btcw %si, %di # sched: [1:0.50]
; HASWELL-NEXT:    btrw %si, %di # sched: [1:0.50]
; HASWELL-NEXT:    btsw %si, %di # sched: [1:0.50]
; HASWELL-NEXT:    btw %si, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btcw %si, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btrw %si, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btsw %si, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    btcw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    btrw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    btsw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; HASWELL-NEXT:    btcw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btrw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btsw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bt_btc_btr_bts_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    btw %si, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btcw %si, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btrw %si, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btsw %si, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btw %si, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcw %si, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrw %si, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsw %si, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btcw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btrw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btsw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bt_btc_btr_bts_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    btw %si, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btcw %si, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btrw %si, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btsw %si, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btw %si, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcw %si, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrw %si, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsw %si, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btcw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btrw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btsw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bt_btc_btr_bts_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    btw %si, %di # sched: [1:0.50]
; SKX-NEXT:    btcw %si, %di # sched: [1:0.50]
; SKX-NEXT:    btrw %si, %di # sched: [1:0.50]
; SKX-NEXT:    btsw %si, %di # sched: [1:0.50]
; SKX-NEXT:    btw %si, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcw %si, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrw %si, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsw %si, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btw $7, %di # sched: [1:0.50]
; SKX-NEXT:    btcw $7, %di # sched: [1:0.50]
; SKX-NEXT:    btrw $7, %di # sched: [1:0.50]
; SKX-NEXT:    btsw $7, %di # sched: [1:0.50]
; SKX-NEXT:    btw $7, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bt_btc_btr_bts_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    btw %si, %di # sched: [1:0.50]
; BTVER2-NEXT:    btcw %si, %di # sched: [1:0.50]
; BTVER2-NEXT:    btrw %si, %di # sched: [1:0.50]
; BTVER2-NEXT:    btsw %si, %di # sched: [1:0.50]
; BTVER2-NEXT:    btw %si, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btcw %si, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrw %si, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsw %si, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    btcw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    btrw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    btsw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    btw $7, (%rdx) # sched: [1:0.50]
; BTVER2-NEXT:    btcw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bt_btc_btr_bts_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    btw %si, %di # sched: [1:0.25]
; ZNVER1-NEXT:    btcw %si, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btrw %si, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btsw %si, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btw %si, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcw %si, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrw %si, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsw %si, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    btcw $7, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btrw $7, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btsw $7, %di # sched: [2:0.25]
; ZNVER1-NEXT:    btw $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcw $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrw $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsw $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "btw $1, $0 \0A\09  btcw $1, $0 \0A\09  btrw $1, $0 \0A\09 btsw $1, $0 \0A\09 btw $1, $2 \0A\09 btcw $1, $2 \0A\09 btrw $1, $2 \0A\09 btsw $1, $2 \0A\09 btw $3, $0 \0A\09 btcw $3, $0 \0A\09 btrw $3, $0 \0A\09 btsw $3, $0 \0A\09 btw $3, $2 \0A\09 btcw $3, $2 \0A\09 btrw $3, $2 \0A\09 btsw $3, $2", "r,r,*m,i"(i16 %a0, i16 %a1, i16 *%a2, i8 7)
  ret void
}
define void @test_bt_btc_btr_bts_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_bt_btc_btr_bts_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    btl %esi, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btl %esi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btcl %esi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btrl %esi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btsl %esi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btcl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btrl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btsl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; GENERIC-NEXT:    btcl $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btrl $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btsl $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bt_btc_btr_bts_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    btl %esi, %edi # sched: [1:1.00]
; ATOM-NEXT:    btcl %esi, %edi # sched: [1:1.00]
; ATOM-NEXT:    btrl %esi, %edi # sched: [1:1.00]
; ATOM-NEXT:    btsl %esi, %edi # sched: [1:1.00]
; ATOM-NEXT:    btl %esi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    btcl %esi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btrl %esi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btsl %esi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    btcl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    btrl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    btsl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    btl $7, (%rdx) # sched: [1:0.50]
; ATOM-NEXT:    btcl $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btrl $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btsl $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bt_btc_btr_bts_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    btl %esi, %edi # sched: [1:0.50]
; SLM-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; SLM-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; SLM-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; SLM-NEXT:    btl %esi, (%rdx) # sched: [4:1.00]
; SLM-NEXT:    btcl %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrl %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsl %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btl $7, %edi # sched: [1:0.50]
; SLM-NEXT:    btcl $7, %edi # sched: [1:0.50]
; SLM-NEXT:    btrl $7, %edi # sched: [1:0.50]
; SLM-NEXT:    btsl $7, %edi # sched: [1:0.50]
; SLM-NEXT:    btl $7, (%rdx) # sched: [1:0.50]
; SLM-NEXT:    btcl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bt_btc_btr_bts_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    btl %esi, %edi # sched: [1:0.50]
; SANDY-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; SANDY-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; SANDY-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; SANDY-NEXT:    btl %esi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btcl %esi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btrl %esi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btsl %esi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    btcl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    btrl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    btsl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; SANDY-NEXT:    btcl $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btrl $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btsl $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bt_btc_btr_bts_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    btl %esi, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btl %esi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btcl %esi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btrl %esi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btsl %esi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btcl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btrl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btsl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; HASWELL-NEXT:    btcl $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btrl $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btsl $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bt_btc_btr_bts_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    btl %esi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btl %esi, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcl %esi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrl %esi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsl %esi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btcl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btrl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btsl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcl $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrl $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsl $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bt_btc_btr_bts_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    btl %esi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btl %esi, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcl %esi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrl %esi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsl %esi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btcl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btrl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btsl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcl $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrl $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsl $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bt_btc_btr_bts_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    btl %esi, %edi # sched: [1:0.50]
; SKX-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; SKX-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; SKX-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; SKX-NEXT:    btl %esi, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcl %esi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrl %esi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsl %esi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    btcl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    btrl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    btsl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    btl $7, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcl $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrl $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsl $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bt_btc_btr_bts_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    btl %esi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btcl %esi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btrl %esi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btsl %esi, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btl %esi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btcl %esi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrl %esi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsl %esi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btcl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btrl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btsl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    btl $7, (%rdx) # sched: [1:0.50]
; BTVER2-NEXT:    btcl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bt_btc_btr_bts_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    btl %esi, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    btcl %esi, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btrl %esi, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btsl %esi, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btl %esi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcl %esi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrl %esi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsl %esi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btl $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    btcl $7, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btrl $7, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btsl $7, %edi # sched: [2:0.25]
; ZNVER1-NEXT:    btl $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcl $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrl $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsl $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "btl $1, $0 \0A\09  btcl $1, $0 \0A\09  btrl $1, $0 \0A\09 btsl $1, $0 \0A\09 btl $1, $2 \0A\09 btcl $1, $2 \0A\09 btrl $1, $2 \0A\09 btsl $1, $2 \0A\09 btl $3, $0 \0A\09 btcl $3, $0 \0A\09 btrl $3, $0 \0A\09 btsl $3, $0 \0A\09 btl $3, $2 \0A\09 btcl $3, $2 \0A\09 btrl $3, $2 \0A\09 btsl $3, $2", "r,r,*m,i"(i32 %a0, i32 %a1, i32 *%a2, i8 7)
  ret void
}
define void @test_bt_btc_btr_bts_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_bt_btc_btr_bts_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btq %rsi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btcq %rsi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btrq %rsi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btsq %rsi, (%rdx) # sched: [9:1.00]
; GENERIC-NEXT:    btq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; GENERIC-NEXT:    btcq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btrq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    btsq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_bt_btc_btr_bts_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    btq %rsi, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btcq %rsi, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btrq %rsi, %rdi
; ATOM-NEXT:    btsq %rsi, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btq %rsi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    btcq %rsi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btrq %rsi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btsq %rsi, (%rdx) # sched: [11:5.50]
; ATOM-NEXT:    btq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btcq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btrq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btsq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    btq $7, (%rdx) # sched: [1:0.50]
; ATOM-NEXT:    btcq $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btrq $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    btsq $7, (%rdx) # sched: [2:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_bt_btc_btr_bts_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; SLM-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; SLM-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; SLM-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; SLM-NEXT:    btq %rsi, (%rdx) # sched: [4:1.00]
; SLM-NEXT:    btcq %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrq %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsq %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btq $7, %rdi # sched: [1:0.50]
; SLM-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; SLM-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; SLM-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; SLM-NEXT:    btq $7, (%rdx) # sched: [1:0.50]
; SLM-NEXT:    btcq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btrq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    btsq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_bt_btc_btr_bts_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btq %rsi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btcq %rsi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btrq %rsi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btsq %rsi, (%rdx) # sched: [9:1.00]
; SANDY-NEXT:    btq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; SANDY-NEXT:    btcq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btrq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    btsq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_bt_btc_btr_bts_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btq %rsi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btcq %rsi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btrq %rsi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btsq %rsi, (%rdx) # sched: [1:?]
; HASWELL-NEXT:    btq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; HASWELL-NEXT:    btcq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btrq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    btsq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_bt_btc_btr_bts_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btq %rsi, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcq %rsi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrq %rsi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsq %rsi, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; BROADWELL-NEXT:    btcq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btrq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    btsq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_bt_btc_btr_bts_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btq %rsi, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcq %rsi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrq %rsi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsq %rsi, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; SKYLAKE-NEXT:    btcq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btrq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    btsq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_bt_btc_btr_bts_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; SKX-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; SKX-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; SKX-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; SKX-NEXT:    btq %rsi, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcq %rsi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrq %rsi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsq %rsi, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    btq $7, (%rdx) # sched: [6:0.50]
; SKX-NEXT:    btcq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btrq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    btsq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_bt_btc_btr_bts_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    btq %rsi, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btcq %rsi, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btrq %rsi, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btsq %rsi, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btq %rsi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btcq %rsi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrq %rsi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsq %rsi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btcq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btrq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btsq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    btq $7, (%rdx) # sched: [1:0.50]
; BTVER2-NEXT:    btcq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btrq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    btsq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_bt_btc_btr_bts_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    btq %rsi, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    btcq %rsi, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btrq %rsi, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btsq %rsi, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btq %rsi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcq %rsi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrq %rsi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsq %rsi, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    btcq $7, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btrq $7, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btsq $7, %rdi # sched: [2:0.25]
; ZNVER1-NEXT:    btq $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    btcq $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btrq $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    btsq $7, (%rdx) # sched: [6:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "btq $1, $0 \0A\09  btcq $1, $0 \0A\09  btrq $1, $0 \0A\09 btsq $1, $0 \0A\09 btq $1, $2 \0A\09 btcq $1, $2 \0A\09 btrq $1, $2 \0A\09 btsq $1, $2 \0A\09 btq $3, $0 \0A\09 btcq $3, $0 \0A\09 btrq $3, $0 \0A\09 btsq $3, $0 \0A\09 btq $3, $2 \0A\09 btcq $3, $2 \0A\09 btrq $3, $2 \0A\09 btsq $3, $2", "r,r,*m,i"(i64 %a0, i64 %a1, i64 *%a2, i8 7)
  ret void
}

; TODO - test_call

define void @test_cbw_cdq_cdqe_cqo_cwd_cwde() optsize {
; GENERIC-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    cbtw # sched: [1:0.33]
; GENERIC-NEXT:    cltd # sched: [1:0.50]
; GENERIC-NEXT:    cltq # sched: [1:0.50]
; GENERIC-NEXT:    cqto # sched: [1:0.50]
; GENERIC-NEXT:    cwtd # sched: [2:1.00]
; GENERIC-NEXT:    cwtl # sched: [1:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    cbtw # sched: [4:2.00]
; ATOM-NEXT:    cltd # sched: [4:2.00]
; ATOM-NEXT:    cltq # sched: [4:2.00]
; ATOM-NEXT:    cqto # sched: [4:2.00]
; ATOM-NEXT:    cwtd # sched: [4:2.00]
; ATOM-NEXT:    cwtl # sched: [4:2.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    cbtw # sched: [1:0.50]
; SLM-NEXT:    cltd # sched: [1:0.50]
; SLM-NEXT:    cltq # sched: [1:0.50]
; SLM-NEXT:    cqto # sched: [1:0.50]
; SLM-NEXT:    cwtd # sched: [1:0.50]
; SLM-NEXT:    cwtl # sched: [1:0.50]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    cbtw # sched: [1:0.33]
; SANDY-NEXT:    cltd # sched: [1:0.50]
; SANDY-NEXT:    cltq # sched: [1:0.50]
; SANDY-NEXT:    cqto # sched: [1:0.50]
; SANDY-NEXT:    cwtd # sched: [2:1.00]
; SANDY-NEXT:    cwtl # sched: [1:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    cbtw # sched: [1:0.25]
; HASWELL-NEXT:    cltd # sched: [1:0.50]
; HASWELL-NEXT:    cltq # sched: [1:0.50]
; HASWELL-NEXT:    cqto # sched: [1:0.50]
; HASWELL-NEXT:    cwtd # sched: [2:0.50]
; HASWELL-NEXT:    cwtl # sched: [1:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    cbtw # sched: [1:0.25]
; BROADWELL-NEXT:    cltd # sched: [1:0.50]
; BROADWELL-NEXT:    cltq # sched: [1:0.50]
; BROADWELL-NEXT:    cqto # sched: [1:0.50]
; BROADWELL-NEXT:    cwtd # sched: [2:0.50]
; BROADWELL-NEXT:    cwtl # sched: [1:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    cbtw # sched: [1:0.25]
; SKYLAKE-NEXT:    cltd # sched: [1:0.50]
; SKYLAKE-NEXT:    cltq # sched: [1:0.50]
; SKYLAKE-NEXT:    cqto # sched: [1:0.50]
; SKYLAKE-NEXT:    cwtd # sched: [2:0.50]
; SKYLAKE-NEXT:    cwtl # sched: [1:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    cbtw # sched: [1:0.25]
; SKX-NEXT:    cltd # sched: [1:0.50]
; SKX-NEXT:    cltq # sched: [1:0.50]
; SKX-NEXT:    cqto # sched: [1:0.50]
; SKX-NEXT:    cwtd # sched: [2:0.50]
; SKX-NEXT:    cwtl # sched: [1:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    cbtw # sched: [1:0.50]
; BTVER2-NEXT:    cltd # sched: [1:0.50]
; BTVER2-NEXT:    cltq # sched: [1:0.50]
; BTVER2-NEXT:    cqto # sched: [1:0.50]
; BTVER2-NEXT:    cwtd # sched: [1:0.50]
; BTVER2-NEXT:    cwtl # sched: [1:0.50]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_cbw_cdq_cdqe_cqo_cwd_cwde:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    cbtw # sched: [1:0.25]
; ZNVER1-NEXT:    cltd # sched: [1:0.25]
; ZNVER1-NEXT:    cltq # sched: [1:0.25]
; ZNVER1-NEXT:    cqto # sched: [1:0.25]
; ZNVER1-NEXT:    cwtd # sched: [1:0.25]
; ZNVER1-NEXT:    cwtl # sched: [1:0.25]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "cbw \0A\09 cdq \0A\09 cdqe \0A\09 cqo \0A\09 cwd \0A\09 cwde", ""() nounwind
  ret void
}

define void @test_clc_cld_cmc() optsize {
; GENERIC-LABEL: test_clc_cld_cmc:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    clc # sched: [1:0.33]
; GENERIC-NEXT:    cld # sched: [1:0.33]
; GENERIC-NEXT:    cmc # sched: [1:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_clc_cld_cmc:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    clc # sched: [1:0.50]
; ATOM-NEXT:    cld # sched: [3:1.50]
; ATOM-NEXT:    cmc # sched: [1:0.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_clc_cld_cmc:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    clc # sched: [1:0.50]
; SLM-NEXT:    cld # sched: [1:0.50]
; SLM-NEXT:    cmc # sched: [1:0.50]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_clc_cld_cmc:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    clc # sched: [1:0.33]
; SANDY-NEXT:    cld # sched: [1:0.33]
; SANDY-NEXT:    cmc # sched: [1:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_clc_cld_cmc:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    clc # sched: [1:0.25]
; HASWELL-NEXT:    cld # sched: [3:1.00]
; HASWELL-NEXT:    cmc # sched: [1:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_clc_cld_cmc:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    clc # sched: [1:0.25]
; BROADWELL-NEXT:    cld # sched: [3:1.00]
; BROADWELL-NEXT:    cmc # sched: [1:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_clc_cld_cmc:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    clc # sched: [1:0.25]
; SKYLAKE-NEXT:    cld # sched: [3:1.00]
; SKYLAKE-NEXT:    cmc # sched: [1:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_clc_cld_cmc:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    clc # sched: [1:0.25]
; SKX-NEXT:    cld # sched: [3:1.00]
; SKX-NEXT:    cmc # sched: [1:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_clc_cld_cmc:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    clc # sched: [1:0.50]
; BTVER2-NEXT:    cld # sched: [1:0.50]
; BTVER2-NEXT:    cmc # sched: [1:0.50]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_clc_cld_cmc:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    clc # sched: [1:0.25]
; ZNVER1-NEXT:    cld # sched: [1:0.25]
; ZNVER1-NEXT:    cmc # sched: [1:0.25]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "clc \0A\09 cld \0A\09 cmc", ""() nounwind
  ret void
}

; TODO - test_cmp

define void @test_cmps() optsize {
; GENERIC-LABEL: test_cmps:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [8:1.00]
; GENERIC-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [8:1.00]
; GENERIC-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [8:1.00]
; GENERIC-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_cmps:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [3:1.50]
; ATOM-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [3:1.50]
; ATOM-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [3:1.50]
; ATOM-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_cmps:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:1.00]
; SLM-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:1.00]
; SLM-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:1.00]
; SLM-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_cmps:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [8:1.00]
; SANDY-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [8:1.00]
; SANDY-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [8:1.00]
; SANDY-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_cmps:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [4:1.00]
; HASWELL-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [4:1.00]
; HASWELL-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [4:1.00]
; HASWELL-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [4:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_cmps:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:0.25]
; BROADWELL-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:0.25]
; BROADWELL-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:0.25]
; BROADWELL-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_cmps:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKYLAKE-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKYLAKE-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKYLAKE-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_cmps:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKX-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKX-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKX-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_cmps:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:0.17]
; BTVER2-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:0.17]
; BTVER2-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:0.17]
; BTVER2-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_cmps:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    cmpsb %es:(%rdi), (%rsi) # sched: [100:?]
; ZNVER1-NEXT:    cmpsw %es:(%rdi), (%rsi) # sched: [100:?]
; ZNVER1-NEXT:    cmpsl %es:(%rdi), (%rsi) # sched: [100:?]
; ZNVER1-NEXT:    cmpsq %es:(%rdi), (%rsi) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "cmpsb \0A\09 cmpsw \0A\09 cmpsl \0A\09 cmpsq", ""()
  ret void
}

; TODO - test_cmpxchg
; TODO - test_cmpxchg8b
; TODO - test_cmpxchg16b

define void @test_cpuid() optsize {
; GENERIC-LABEL: test_cpuid:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    cpuid # sched: [100:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_cpuid:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    cpuid # sched: [121:60.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_cpuid:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    cpuid # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_cpuid:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    cpuid # sched: [100:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_cpuid:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    cpuid # sched: [18:2.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_cpuid:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    cpuid # sched: [18:2.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_cpuid:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    cpuid # sched: [18:2.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_cpuid:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    cpuid # sched: [18:2.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_cpuid:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    cpuid # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_cpuid:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    cpuid # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "cpuid", ""() nounwind
  ret void
}

define void @test_dec8(i8 %a0, i8* %a1) optsize {
; GENERIC-LABEL: test_dec8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    decb %dil # sched: [1:0.33]
; GENERIC-NEXT:    decb (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_dec8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    decb %dil # sched: [1:0.50]
; ATOM-NEXT:    decb (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_dec8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    decb %dil # sched: [1:0.50]
; SLM-NEXT:    decb (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_dec8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    decb %dil # sched: [1:0.33]
; SANDY-NEXT:    decb (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_dec8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    decb %dil # sched: [1:0.25]
; HASWELL-NEXT:    decb (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_dec8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    decb %dil # sched: [1:0.25]
; BROADWELL-NEXT:    decb (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_dec8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    decb %dil # sched: [1:0.25]
; SKYLAKE-NEXT:    decb (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_dec8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    decb %dil # sched: [1:0.25]
; SKX-NEXT:    decb (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_dec8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    decb %dil # sched: [1:0.50]
; BTVER2-NEXT:    decb (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_dec8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    decb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    decb (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "decb $0 \0A\09 decb $1", "r,*m"(i8 %a0, i8* %a1) nounwind
  ret void
}
define void @test_dec16(i16 %a0, i16* %a1) optsize {
; GENERIC-LABEL: test_dec16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    decw %di # sched: [1:0.33]
; GENERIC-NEXT:    decw (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_dec16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    decw %di # sched: [1:0.50]
; ATOM-NEXT:    decw (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_dec16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    decw %di # sched: [1:0.50]
; SLM-NEXT:    decw (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_dec16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    decw %di # sched: [1:0.33]
; SANDY-NEXT:    decw (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_dec16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    decw %di # sched: [1:0.25]
; HASWELL-NEXT:    decw (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_dec16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    decw %di # sched: [1:0.25]
; BROADWELL-NEXT:    decw (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_dec16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    decw %di # sched: [1:0.25]
; SKYLAKE-NEXT:    decw (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_dec16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    decw %di # sched: [1:0.25]
; SKX-NEXT:    decw (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_dec16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    decw %di # sched: [1:0.50]
; BTVER2-NEXT:    decw (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_dec16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    decw %di # sched: [1:0.25]
; ZNVER1-NEXT:    decw (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "decw $0 \0A\09 decw $1", "r,*m"(i16 %a0, i16* %a1) nounwind
  ret void
}
define void @test_dec32(i32 %a0, i32* %a1) optsize {
; GENERIC-LABEL: test_dec32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    decl %edi # sched: [1:0.33]
; GENERIC-NEXT:    decl (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_dec32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    decl %edi # sched: [1:0.50]
; ATOM-NEXT:    decl (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_dec32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    decl %edi # sched: [1:0.50]
; SLM-NEXT:    decl (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_dec32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    decl %edi # sched: [1:0.33]
; SANDY-NEXT:    decl (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_dec32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    decl %edi # sched: [1:0.25]
; HASWELL-NEXT:    decl (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_dec32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    decl %edi # sched: [1:0.25]
; BROADWELL-NEXT:    decl (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_dec32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    decl %edi # sched: [1:0.25]
; SKYLAKE-NEXT:    decl (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_dec32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    decl %edi # sched: [1:0.25]
; SKX-NEXT:    decl (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_dec32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    decl %edi # sched: [1:0.50]
; BTVER2-NEXT:    decl (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_dec32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    decl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    decl (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "decl $0 \0A\09 decl $1", "r,*m"(i32 %a0, i32* %a1) nounwind
  ret void
}
define void @test_dec64(i64 %a0, i64* %a1) optsize {
; GENERIC-LABEL: test_dec64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    decq %rdi # sched: [1:0.33]
; GENERIC-NEXT:    decq (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_dec64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    decq %rdi # sched: [1:0.50]
; ATOM-NEXT:    decq (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_dec64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    decq %rdi # sched: [1:0.50]
; SLM-NEXT:    decq (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_dec64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    decq %rdi # sched: [1:0.33]
; SANDY-NEXT:    decq (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_dec64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    decq %rdi # sched: [1:0.25]
; HASWELL-NEXT:    decq (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_dec64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    decq %rdi # sched: [1:0.25]
; BROADWELL-NEXT:    decq (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_dec64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    decq %rdi # sched: [1:0.25]
; SKYLAKE-NEXT:    decq (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_dec64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    decq %rdi # sched: [1:0.25]
; SKX-NEXT:    decq (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_dec64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    decq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    decq (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_dec64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    decq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    decq (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "decq $0 \0A\09 decq $1", "r,*m"(i64 %a0, i64* %a1) nounwind
  ret void
}

define void @test_div(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) optsize {
; GENERIC-LABEL: test_div:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    divb %dil # sched: [25:10.00]
; GENERIC-NEXT:    divb (%r8) # sched: [29:10.00]
; GENERIC-NEXT:    divw %si # sched: [25:10.00]
; GENERIC-NEXT:    divw (%r9) # sched: [29:10.00]
; GENERIC-NEXT:    divl %edx # sched: [25:10.00]
; GENERIC-NEXT:    divl (%rax) # sched: [29:10.00]
; GENERIC-NEXT:    divq %rcx # sched: [25:10.00]
; GENERIC-NEXT:    divq (%r10) # sched: [29:10.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_div:
; ATOM:       # %bb.0:
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [1:1.00]
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [1:1.00]
; ATOM-NEXT:    #APP
; ATOM-NEXT:    divb %dil # sched: [50:25.00]
; ATOM-NEXT:    divb (%r8) # sched: [68:34.00]
; ATOM-NEXT:    divw %si # sched: [50:25.00]
; ATOM-NEXT:    divw (%r9) # sched: [50:25.00]
; ATOM-NEXT:    divl %edx # sched: [50:25.00]
; ATOM-NEXT:    divl (%rax) # sched: [50:25.00]
; ATOM-NEXT:    divq %rcx # sched: [130:65.00]
; ATOM-NEXT:    divq (%r10) # sched: [130:65.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_div:
; SLM:       # %bb.0:
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [3:1.00]
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [3:1.00]
; SLM-NEXT:    #APP
; SLM-NEXT:    divb %dil # sched: [25:25.00]
; SLM-NEXT:    divb (%r8) # sched: [29:25.00]
; SLM-NEXT:    divw %si # sched: [25:25.00]
; SLM-NEXT:    divw (%r9) # sched: [29:25.00]
; SLM-NEXT:    divl %edx # sched: [25:25.00]
; SLM-NEXT:    divl (%rax) # sched: [29:25.00]
; SLM-NEXT:    divq %rcx # sched: [25:25.00]
; SLM-NEXT:    divq (%r10) # sched: [29:25.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_div:
; SANDY:       # %bb.0:
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SANDY-NEXT:    #APP
; SANDY-NEXT:    divb %dil # sched: [25:10.00]
; SANDY-NEXT:    divb (%r8) # sched: [29:10.00]
; SANDY-NEXT:    divw %si # sched: [25:10.00]
; SANDY-NEXT:    divw (%r9) # sched: [29:10.00]
; SANDY-NEXT:    divl %edx # sched: [25:10.00]
; SANDY-NEXT:    divl (%rax) # sched: [29:10.00]
; SANDY-NEXT:    divq %rcx # sched: [25:10.00]
; SANDY-NEXT:    divq (%r10) # sched: [29:10.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_div:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    divb %dil # sched: [22:1.00]
; HASWELL-NEXT:    divb (%r8) # sched: [29:10.00]
; HASWELL-NEXT:    divw %si # sched: [98:8.00]
; HASWELL-NEXT:    divw (%r9) # sched: [29:10.00]
; HASWELL-NEXT:    divl %edx # sched: [98:8.00]
; HASWELL-NEXT:    divl (%rax) # sched: [29:10.00]
; HASWELL-NEXT:    divq %rcx # sched: [98:8.00]
; HASWELL-NEXT:    divq (%r10) # sched: [29:10.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_div:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    divb %dil # sched: [25:10.00]
; BROADWELL-NEXT:    divb (%r8) # sched: [34:2.00]
; BROADWELL-NEXT:    divw %si # sched: [80:8.00]
; BROADWELL-NEXT:    divw (%r9) # sched: [34:2.00]
; BROADWELL-NEXT:    divl %edx # sched: [80:8.00]
; BROADWELL-NEXT:    divl (%rax) # sched: [34:2.00]
; BROADWELL-NEXT:    divq %rcx # sched: [80:8.00]
; BROADWELL-NEXT:    divq (%r10) # sched: [34:2.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_div:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    divb %dil # sched: [25:10.00]
; SKYLAKE-NEXT:    divb (%r8) # sched: [29:10.00]
; SKYLAKE-NEXT:    divw %si # sched: [76:8.00]
; SKYLAKE-NEXT:    divw (%r9) # sched: [29:10.00]
; SKYLAKE-NEXT:    divl %edx # sched: [76:8.00]
; SKYLAKE-NEXT:    divl (%rax) # sched: [29:10.00]
; SKYLAKE-NEXT:    divq %rcx # sched: [76:8.00]
; SKYLAKE-NEXT:    divq (%r10) # sched: [29:10.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_div:
; SKX:       # %bb.0:
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKX-NEXT:    #APP
; SKX-NEXT:    divb %dil # sched: [25:10.00]
; SKX-NEXT:    divb (%r8) # sched: [29:10.00]
; SKX-NEXT:    divw %si # sched: [76:8.00]
; SKX-NEXT:    divw (%r9) # sched: [29:10.00]
; SKX-NEXT:    divl %edx # sched: [76:8.00]
; SKX-NEXT:    divl (%rax) # sched: [29:10.00]
; SKX-NEXT:    divq %rcx # sched: [76:8.00]
; SKX-NEXT:    divq (%r10) # sched: [29:10.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_div:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:1.00]
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:1.00]
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    divb %dil # sched: [25:25.00]
; BTVER2-NEXT:    divb (%r8) # sched: [41:25.00]
; BTVER2-NEXT:    divw %si # sched: [25:25.00]
; BTVER2-NEXT:    divw (%r9) # sched: [41:25.00]
; BTVER2-NEXT:    divl %edx # sched: [25:25.00]
; BTVER2-NEXT:    divl (%rax) # sched: [41:25.00]
; BTVER2-NEXT:    divq %rcx # sched: [25:25.00]
; BTVER2-NEXT:    divq (%r10) # sched: [41:25.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_div:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [8:0.50]
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [8:0.50]
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    divb %dil # sched: [15:1.00]
; ZNVER1-NEXT:    divb (%r8) # sched: [45:41.00]
; ZNVER1-NEXT:    divw %si # sched: [17:1.00]
; ZNVER1-NEXT:    divw (%r9) # sched: [45:41.00]
; ZNVER1-NEXT:    divl %edx # sched: [25:1.00]
; ZNVER1-NEXT:    divl (%rax) # sched: [45:41.00]
; ZNVER1-NEXT:    divq %rcx # sched: [41:1.00]
; ZNVER1-NEXT:    divq (%r10) # sched: [45:41.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "divb $0 \0A\09 divb $4 \0A\09 divw $1 \0A\09 divw $5 \0A\09 divl $2 \0A\09 divl $6 \0A\09 divq $3 \0A\09 divq $7", "r,r,r,r,*m,*m,*m,*m"(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) nounwind
  ret void
}

; TODO - test_enter

; TODO - test_idiv
; TODO - test_imul

; TODO - test_in

define void @test_inc8(i8 %a0, i8* %a1) optsize {
; GENERIC-LABEL: test_inc8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    incb %dil # sched: [1:0.33]
; GENERIC-NEXT:    incb (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_inc8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    incb %dil # sched: [1:0.50]
; ATOM-NEXT:    incb (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_inc8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    incb %dil # sched: [1:0.50]
; SLM-NEXT:    incb (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_inc8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    incb %dil # sched: [1:0.33]
; SANDY-NEXT:    incb (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_inc8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    incb %dil # sched: [1:0.25]
; HASWELL-NEXT:    incb (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_inc8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    incb %dil # sched: [1:0.25]
; BROADWELL-NEXT:    incb (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_inc8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    incb %dil # sched: [1:0.25]
; SKYLAKE-NEXT:    incb (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_inc8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    incb %dil # sched: [1:0.25]
; SKX-NEXT:    incb (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_inc8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    incb %dil # sched: [1:0.50]
; BTVER2-NEXT:    incb (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_inc8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    incb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    incb (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "incb $0 \0A\09 incb $1", "r,*m"(i8 %a0, i8* %a1) nounwind
  ret void
}
define void @test_inc16(i16 %a0, i16* %a1) optsize {
; GENERIC-LABEL: test_inc16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    incw %di # sched: [1:0.33]
; GENERIC-NEXT:    incw (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_inc16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    incw %di # sched: [1:0.50]
; ATOM-NEXT:    incw (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_inc16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    incw %di # sched: [1:0.50]
; SLM-NEXT:    incw (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_inc16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    incw %di # sched: [1:0.33]
; SANDY-NEXT:    incw (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_inc16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    incw %di # sched: [1:0.25]
; HASWELL-NEXT:    incw (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_inc16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    incw %di # sched: [1:0.25]
; BROADWELL-NEXT:    incw (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_inc16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    incw %di # sched: [1:0.25]
; SKYLAKE-NEXT:    incw (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_inc16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    incw %di # sched: [1:0.25]
; SKX-NEXT:    incw (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_inc16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    incw %di # sched: [1:0.50]
; BTVER2-NEXT:    incw (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_inc16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    incw %di # sched: [1:0.25]
; ZNVER1-NEXT:    incw (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "incw $0 \0A\09 incw $1", "r,*m"(i16 %a0, i16* %a1) nounwind
  ret void
}
define void @test_inc32(i32 %a0, i32* %a1) optsize {
; GENERIC-LABEL: test_inc32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    incl %edi # sched: [1:0.33]
; GENERIC-NEXT:    incl (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_inc32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    incl %edi # sched: [1:0.50]
; ATOM-NEXT:    incl (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_inc32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    incl %edi # sched: [1:0.50]
; SLM-NEXT:    incl (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_inc32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    incl %edi # sched: [1:0.33]
; SANDY-NEXT:    incl (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_inc32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    incl %edi # sched: [1:0.25]
; HASWELL-NEXT:    incl (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_inc32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    incl %edi # sched: [1:0.25]
; BROADWELL-NEXT:    incl (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_inc32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    incl %edi # sched: [1:0.25]
; SKYLAKE-NEXT:    incl (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_inc32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    incl %edi # sched: [1:0.25]
; SKX-NEXT:    incl (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_inc32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    incl %edi # sched: [1:0.50]
; BTVER2-NEXT:    incl (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_inc32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    incl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    incl (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "incl $0 \0A\09 incl $1", "r,*m"(i32 %a0, i32* %a1) nounwind
  ret void
}
define void @test_inc64(i64 %a0, i64* %a1) optsize {
; GENERIC-LABEL: test_inc64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    incq %rdi # sched: [1:0.33]
; GENERIC-NEXT:    incq (%rsi) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_inc64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    incq %rdi # sched: [1:0.50]
; ATOM-NEXT:    incq (%rsi) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_inc64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    incq %rdi # sched: [1:0.50]
; SLM-NEXT:    incq (%rsi) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_inc64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    incq %rdi # sched: [1:0.33]
; SANDY-NEXT:    incq (%rsi) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_inc64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    incq %rdi # sched: [1:0.25]
; HASWELL-NEXT:    incq (%rsi) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_inc64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    incq %rdi # sched: [1:0.25]
; BROADWELL-NEXT:    incq (%rsi) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_inc64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    incq %rdi # sched: [1:0.25]
; SKYLAKE-NEXT:    incq (%rsi) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_inc64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    incq %rdi # sched: [1:0.25]
; SKX-NEXT:    incq (%rsi) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_inc64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    incq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    incq (%rsi) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_inc64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    incq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    incq (%rsi) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "incq $0 \0A\09 incq $1", "r,*m"(i64 %a0, i64* %a1) nounwind
  ret void
}

define void @test_ins() optsize {
; GENERIC-LABEL: test_ins:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    insb %dx, %es:(%rdi) # sched: [100:0.33]
; GENERIC-NEXT:    insw %dx, %es:(%rdi) # sched: [100:0.33]
; GENERIC-NEXT:    insl %dx, %es:(%rdi) # sched: [100:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_ins:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    insb %dx, %es:(%rdi) # sched: [59:29.50]
; ATOM-NEXT:    insw %dx, %es:(%rdi) # sched: [59:29.50]
; ATOM-NEXT:    insl %dx, %es:(%rdi) # sched: [59:29.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_ins:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    insb %dx, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    insw %dx, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    insl %dx, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_ins:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    insb %dx, %es:(%rdi) # sched: [100:0.33]
; SANDY-NEXT:    insw %dx, %es:(%rdi) # sched: [100:0.33]
; SANDY-NEXT:    insl %dx, %es:(%rdi) # sched: [100:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_ins:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    insb %dx, %es:(%rdi) # sched: [21:1.25]
; HASWELL-NEXT:    insw %dx, %es:(%rdi) # sched: [21:1.25]
; HASWELL-NEXT:    insl %dx, %es:(%rdi) # sched: [21:1.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_ins:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    insb %dx, %es:(%rdi) # sched: [20:1.25]
; BROADWELL-NEXT:    insw %dx, %es:(%rdi) # sched: [20:1.25]
; BROADWELL-NEXT:    insl %dx, %es:(%rdi) # sched: [20:1.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_ins:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    insb %dx, %es:(%rdi) # sched: [20:1.25]
; SKYLAKE-NEXT:    insw %dx, %es:(%rdi) # sched: [20:1.25]
; SKYLAKE-NEXT:    insl %dx, %es:(%rdi) # sched: [20:1.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_ins:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    insb %dx, %es:(%rdi) # sched: [20:1.25]
; SKX-NEXT:    insw %dx, %es:(%rdi) # sched: [20:1.25]
; SKX-NEXT:    insl %dx, %es:(%rdi) # sched: [20:1.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_ins:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    insb %dx, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    insw %dx, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    insl %dx, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_ins:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    insb %dx, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    insw %dx, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    insl %dx, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "insb \0A\09 insw \0A\09 insl", ""()
  ret void
}

; TODO - test_int
; TODO - test_into

define void @test_invlpg_invlpga(i8 *%a0) optsize {
; GENERIC-LABEL: test_invlpg_invlpga:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    invlpg (%rdi) # sched: [100:0.33]
; GENERIC-NEXT:    invlpga %ecx, %rax # sched: [100:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_invlpg_invlpga:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    invlpg (%rdi) # sched: [71:35.50]
; ATOM-NEXT:    invlpga %ecx, %rax # sched: [71:35.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_invlpg_invlpga:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    invlpg (%rdi) # sched: [100:1.00]
; SLM-NEXT:    invlpga %ecx, %rax # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_invlpg_invlpga:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    invlpg (%rdi) # sched: [100:0.33]
; SANDY-NEXT:    invlpga %ecx, %rax # sched: [100:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_invlpg_invlpga:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    invlpg (%rdi) # sched: [100:0.25]
; HASWELL-NEXT:    invlpga %ecx, %rax # sched: [100:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_invlpg_invlpga:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    invlpg (%rdi) # sched: [100:0.25]
; BROADWELL-NEXT:    invlpga %ecx, %rax # sched: [100:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_invlpg_invlpga:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    invlpg (%rdi) # sched: [100:0.25]
; SKYLAKE-NEXT:    invlpga %ecx, %rax # sched: [100:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_invlpg_invlpga:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    invlpg (%rdi) # sched: [100:0.25]
; SKX-NEXT:    invlpga %ecx, %rax # sched: [100:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_invlpg_invlpga:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    invlpg (%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    invlpga %ecx, %rax # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_invlpg_invlpga:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    invlpg (%rdi) # sched: [100:?]
; ZNVER1-NEXT:    invlpga %ecx, %rax # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm sideeffect "invlpg $0 \0A\09 invlpga %ecx, %rax", "*m"(i8 *%a0) nounwind
  ret void
}

; TODO - test_jcc
; TODO - test_jcxz
; TODO - test_jwcxz
; TODO - test_jrcxz

; TODO - test_jmp

define void @test_lahf_sahf() optsize {
; GENERIC-LABEL: test_lahf_sahf:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    lahf # sched: [1:0.50]
; GENERIC-NEXT:    sahf # sched: [1:0.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_lahf_sahf:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    lahf # sched: [1:0.50]
; ATOM-NEXT:    sahf # sched: [1:0.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_lahf_sahf:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    lahf # sched: [1:0.50]
; SLM-NEXT:    sahf # sched: [1:0.50]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_lahf_sahf:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    lahf # sched: [1:0.50]
; SANDY-NEXT:    sahf # sched: [1:0.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_lahf_sahf:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    lahf # sched: [1:0.25]
; HASWELL-NEXT:    sahf # sched: [1:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_lahf_sahf:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    lahf # sched: [1:0.25]
; BROADWELL-NEXT:    sahf # sched: [1:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_lahf_sahf:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    lahf # sched: [1:0.25]
; SKYLAKE-NEXT:    sahf # sched: [1:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_lahf_sahf:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    lahf # sched: [1:0.25]
; SKX-NEXT:    sahf # sched: [1:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_lahf_sahf:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    lahf # sched: [1:0.50]
; BTVER2-NEXT:    sahf # sched: [1:0.50]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_lahf_sahf:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    lahf # sched: [100:?]
; ZNVER1-NEXT:    sahf # sched: [2:0.25]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "lahf \0A\09 sahf", ""() nounwind
  ret void
}

; TODO - test_lds
; TODO - test_les
; TODO - test_lfs
; TODO - test_lgs
; TODO - test_lss

; TODO - test_lea

; TODO - test_leave

; TODO - test_lods
; TODO - test_lodsb
; TODO - test_lodsw
; TODO - test_lodsd
; TODO - test_lodsq

; TODO - test_loop
; TODO - test_loope
; TODO - test_loopne
; TODO - test_loopnz
; TODO - test_loopz

; TODO - test_mov
; TODO - test_movnti

define void @test_movs() optsize {
; GENERIC-LABEL: test_movs:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [8:1.00]
; GENERIC-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [8:1.00]
; GENERIC-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [8:1.00]
; GENERIC-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_movs:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [3:1.50]
; ATOM-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [3:1.50]
; ATOM-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [3:1.50]
; ATOM-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_movs:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_movs:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [8:1.00]
; SANDY-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [8:1.00]
; SANDY-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [8:1.00]
; SANDY-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_movs:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [4:1.00]
; HASWELL-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [4:1.00]
; HASWELL-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [4:1.00]
; HASWELL-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [4:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_movs:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:0.25]
; BROADWELL-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:0.25]
; BROADWELL-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:0.25]
; BROADWELL-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_movs:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKYLAKE-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKYLAKE-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKYLAKE-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_movs:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKX-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKX-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKX-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_movs:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_movs:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    movsb (%rsi), %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    movsw (%rsi), %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    movsl (%rsi), %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    movsq (%rsi), %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "movsb \0A\09 movsw \0A\09 movsl \0A\09 movsq", ""()
  ret void
}

; TODO - test_movsx
; TODO - test_movsxd
; TODO - test_movzx

define void @test_mul(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) optsize {
; GENERIC-LABEL: test_mul:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    mulb %dil # sched: [3:1.00]
; GENERIC-NEXT:    mulb (%r8) # sched: [8:1.00]
; GENERIC-NEXT:    mulw %si # sched: [4:1.00]
; GENERIC-NEXT:    mulw (%r9) # sched: [9:1.00]
; GENERIC-NEXT:    mull %edx # sched: [4:1.00]
; GENERIC-NEXT:    mull (%rax) # sched: [9:1.00]
; GENERIC-NEXT:    mulq %rcx # sched: [4:1.00]
; GENERIC-NEXT:    mulq (%r10) # sched: [9:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_mul:
; ATOM:       # %bb.0:
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [1:1.00]
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [1:1.00]
; ATOM-NEXT:    #APP
; ATOM-NEXT:    mulb %dil # sched: [7:3.50]
; ATOM-NEXT:    mulb (%r8) # sched: [7:3.50]
; ATOM-NEXT:    mulw %si # sched: [7:3.50]
; ATOM-NEXT:    mulw (%r9) # sched: [8:4.00]
; ATOM-NEXT:    mull %edx # sched: [6:3.00]
; ATOM-NEXT:    mull (%rax) # sched: [7:3.50]
; ATOM-NEXT:    mulq %rcx # sched: [12:6.00]
; ATOM-NEXT:    mulq (%r10) # sched: [12:6.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_mul:
; SLM:       # %bb.0:
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [3:1.00]
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [3:1.00]
; SLM-NEXT:    #APP
; SLM-NEXT:    mulb %dil # sched: [3:1.00]
; SLM-NEXT:    mulb (%r8) # sched: [6:1.00]
; SLM-NEXT:    mulw %si # sched: [3:1.00]
; SLM-NEXT:    mulw (%r9) # sched: [6:1.00]
; SLM-NEXT:    mull %edx # sched: [3:1.00]
; SLM-NEXT:    mull (%rax) # sched: [6:1.00]
; SLM-NEXT:    mulq %rcx # sched: [3:1.00]
; SLM-NEXT:    mulq (%r10) # sched: [6:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_mul:
; SANDY:       # %bb.0:
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SANDY-NEXT:    #APP
; SANDY-NEXT:    mulb %dil # sched: [3:1.00]
; SANDY-NEXT:    mulb (%r8) # sched: [8:1.00]
; SANDY-NEXT:    mulw %si # sched: [4:1.00]
; SANDY-NEXT:    mulw (%r9) # sched: [9:1.00]
; SANDY-NEXT:    mull %edx # sched: [4:1.00]
; SANDY-NEXT:    mull (%rax) # sched: [9:1.00]
; SANDY-NEXT:    mulq %rcx # sched: [4:1.00]
; SANDY-NEXT:    mulq (%r10) # sched: [9:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_mul:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    mulb %dil # sched: [3:1.00]
; HASWELL-NEXT:    mulb (%r8) # sched: [8:1.00]
; HASWELL-NEXT:    mulw %si # sched: [4:1.00]
; HASWELL-NEXT:    mulw (%r9) # sched: [8:1.00]
; HASWELL-NEXT:    mull %edx # sched: [4:1.00]
; HASWELL-NEXT:    mull (%rax) # sched: [8:1.00]
; HASWELL-NEXT:    mulq %rcx # sched: [4:1.00]
; HASWELL-NEXT:    mulq (%r10) # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_mul:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    mulb %dil # sched: [3:1.00]
; BROADWELL-NEXT:    mulb (%r8) # sched: [8:1.00]
; BROADWELL-NEXT:    mulw %si # sched: [4:1.00]
; BROADWELL-NEXT:    mulw (%r9) # sched: [8:1.00]
; BROADWELL-NEXT:    mull %edx # sched: [4:1.00]
; BROADWELL-NEXT:    mull (%rax) # sched: [8:1.00]
; BROADWELL-NEXT:    mulq %rcx # sched: [4:1.00]
; BROADWELL-NEXT:    mulq (%r10) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_mul:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    mulb %dil # sched: [3:1.00]
; SKYLAKE-NEXT:    mulb (%r8) # sched: [8:1.00]
; SKYLAKE-NEXT:    mulw %si # sched: [4:1.00]
; SKYLAKE-NEXT:    mulw (%r9) # sched: [8:1.00]
; SKYLAKE-NEXT:    mull %edx # sched: [5:1.00]
; SKYLAKE-NEXT:    mull (%rax) # sched: [8:1.00]
; SKYLAKE-NEXT:    mulq %rcx # sched: [4:1.00]
; SKYLAKE-NEXT:    mulq (%r10) # sched: [8:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_mul:
; SKX:       # %bb.0:
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKX-NEXT:    #APP
; SKX-NEXT:    mulb %dil # sched: [3:1.00]
; SKX-NEXT:    mulb (%r8) # sched: [8:1.00]
; SKX-NEXT:    mulw %si # sched: [4:1.00]
; SKX-NEXT:    mulw (%r9) # sched: [8:1.00]
; SKX-NEXT:    mull %edx # sched: [4:1.00]
; SKX-NEXT:    mull (%rax) # sched: [8:1.00]
; SKX-NEXT:    mulq %rcx # sched: [4:1.00]
; SKX-NEXT:    mulq (%r10) # sched: [8:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_mul:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:1.00]
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:1.00]
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    mulb %dil # sched: [3:1.00]
; BTVER2-NEXT:    mulb (%r8) # sched: [6:1.00]
; BTVER2-NEXT:    mulw %si # sched: [3:1.00]
; BTVER2-NEXT:    mulw (%r9) # sched: [6:1.00]
; BTVER2-NEXT:    mull %edx # sched: [3:1.00]
; BTVER2-NEXT:    mull (%rax) # sched: [6:1.00]
; BTVER2-NEXT:    mulq %rcx # sched: [3:1.00]
; BTVER2-NEXT:    mulq (%r10) # sched: [6:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_mul:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [8:0.50]
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [8:0.50]
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    mulb %dil # sched: [4:1.00]
; ZNVER1-NEXT:    mulb (%r8) # sched: [8:1.00]
; ZNVER1-NEXT:    mulw %si # sched: [3:1.00]
; ZNVER1-NEXT:    mulw (%r9) # sched: [8:1.00]
; ZNVER1-NEXT:    mull %edx # sched: [3:1.00]
; ZNVER1-NEXT:    mull (%rax) # sched: [8:1.00]
; ZNVER1-NEXT:    mulq %rcx # sched: [4:1.00]
; ZNVER1-NEXT:    mulq (%r10) # sched: [9:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "mulb $0 \0A\09 mulb $4 \0A\09 mulw $1 \0A\09 mulw $5 \0A\09 mull $2 \0A\09 mull $6 \0A\09 mulq $3 \0A\09 mulq $7", "r,r,r,r,*m,*m,*m,*m"(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) nounwind
  ret void
}

define void @test_neg(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) optsize {
; GENERIC-LABEL: test_neg:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    negb %dil # sched: [1:0.33]
; GENERIC-NEXT:    negb (%r8) # sched: [7:1.00]
; GENERIC-NEXT:    negw %si # sched: [1:0.33]
; GENERIC-NEXT:    negw (%r9) # sched: [7:1.00]
; GENERIC-NEXT:    negl %edx # sched: [1:0.33]
; GENERIC-NEXT:    negl (%rax) # sched: [7:1.00]
; GENERIC-NEXT:    negq %rcx # sched: [1:0.33]
; GENERIC-NEXT:    negq (%r10) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_neg:
; ATOM:       # %bb.0:
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [1:1.00]
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [1:1.00]
; ATOM-NEXT:    #APP
; ATOM-NEXT:    negb %dil # sched: [1:0.50]
; ATOM-NEXT:    negb (%r8) # sched: [1:1.00]
; ATOM-NEXT:    negw %si # sched: [1:0.50]
; ATOM-NEXT:    negw (%r9) # sched: [1:1.00]
; ATOM-NEXT:    negl %edx # sched: [1:0.50]
; ATOM-NEXT:    negl (%rax) # sched: [1:1.00]
; ATOM-NEXT:    negq %rcx # sched: [1:0.50]
; ATOM-NEXT:    negq (%r10) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_neg:
; SLM:       # %bb.0:
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [3:1.00]
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [3:1.00]
; SLM-NEXT:    #APP
; SLM-NEXT:    negb %dil # sched: [1:0.50]
; SLM-NEXT:    negb (%r8) # sched: [4:2.00]
; SLM-NEXT:    negw %si # sched: [1:0.50]
; SLM-NEXT:    negw (%r9) # sched: [4:2.00]
; SLM-NEXT:    negl %edx # sched: [1:0.50]
; SLM-NEXT:    negl (%rax) # sched: [4:2.00]
; SLM-NEXT:    negq %rcx # sched: [1:0.50]
; SLM-NEXT:    negq (%r10) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_neg:
; SANDY:       # %bb.0:
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SANDY-NEXT:    #APP
; SANDY-NEXT:    negb %dil # sched: [1:0.33]
; SANDY-NEXT:    negb (%r8) # sched: [7:1.00]
; SANDY-NEXT:    negw %si # sched: [1:0.33]
; SANDY-NEXT:    negw (%r9) # sched: [7:1.00]
; SANDY-NEXT:    negl %edx # sched: [1:0.33]
; SANDY-NEXT:    negl (%rax) # sched: [7:1.00]
; SANDY-NEXT:    negq %rcx # sched: [1:0.33]
; SANDY-NEXT:    negq (%r10) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_neg:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    negb %dil # sched: [1:0.25]
; HASWELL-NEXT:    negb (%r8) # sched: [7:1.00]
; HASWELL-NEXT:    negw %si # sched: [1:0.25]
; HASWELL-NEXT:    negw (%r9) # sched: [7:1.00]
; HASWELL-NEXT:    negl %edx # sched: [1:0.25]
; HASWELL-NEXT:    negl (%rax) # sched: [7:1.00]
; HASWELL-NEXT:    negq %rcx # sched: [1:0.25]
; HASWELL-NEXT:    negq (%r10) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_neg:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    negb %dil # sched: [1:0.25]
; BROADWELL-NEXT:    negb (%r8) # sched: [6:1.00]
; BROADWELL-NEXT:    negw %si # sched: [1:0.25]
; BROADWELL-NEXT:    negw (%r9) # sched: [6:1.00]
; BROADWELL-NEXT:    negl %edx # sched: [1:0.25]
; BROADWELL-NEXT:    negl (%rax) # sched: [6:1.00]
; BROADWELL-NEXT:    negq %rcx # sched: [1:0.25]
; BROADWELL-NEXT:    negq (%r10) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_neg:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    negb %dil # sched: [1:0.25]
; SKYLAKE-NEXT:    negb (%r8) # sched: [6:1.00]
; SKYLAKE-NEXT:    negw %si # sched: [1:0.25]
; SKYLAKE-NEXT:    negw (%r9) # sched: [6:1.00]
; SKYLAKE-NEXT:    negl %edx # sched: [1:0.25]
; SKYLAKE-NEXT:    negl (%rax) # sched: [6:1.00]
; SKYLAKE-NEXT:    negq %rcx # sched: [1:0.25]
; SKYLAKE-NEXT:    negq (%r10) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_neg:
; SKX:       # %bb.0:
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKX-NEXT:    #APP
; SKX-NEXT:    negb %dil # sched: [1:0.25]
; SKX-NEXT:    negb (%r8) # sched: [6:1.00]
; SKX-NEXT:    negw %si # sched: [1:0.25]
; SKX-NEXT:    negw (%r9) # sched: [6:1.00]
; SKX-NEXT:    negl %edx # sched: [1:0.25]
; SKX-NEXT:    negl (%rax) # sched: [6:1.00]
; SKX-NEXT:    negq %rcx # sched: [1:0.25]
; SKX-NEXT:    negq (%r10) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_neg:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:1.00]
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:1.00]
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    negb %dil # sched: [1:0.50]
; BTVER2-NEXT:    negb (%r8) # sched: [4:1.00]
; BTVER2-NEXT:    negw %si # sched: [1:0.50]
; BTVER2-NEXT:    negw (%r9) # sched: [4:1.00]
; BTVER2-NEXT:    negl %edx # sched: [1:0.50]
; BTVER2-NEXT:    negl (%rax) # sched: [4:1.00]
; BTVER2-NEXT:    negq %rcx # sched: [1:0.50]
; BTVER2-NEXT:    negq (%r10) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_neg:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [8:0.50]
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [8:0.50]
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    negb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    negb (%r8) # sched: [5:0.50]
; ZNVER1-NEXT:    negw %si # sched: [1:0.25]
; ZNVER1-NEXT:    negw (%r9) # sched: [5:0.50]
; ZNVER1-NEXT:    negl %edx # sched: [1:0.25]
; ZNVER1-NEXT:    negl (%rax) # sched: [5:0.50]
; ZNVER1-NEXT:    negq %rcx # sched: [1:0.25]
; ZNVER1-NEXT:    negq (%r10) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "negb $0 \0A\09 negb $4 \0A\09 negw $1 \0A\09 negw $5 \0A\09 negl $2 \0A\09 negl $6 \0A\09 negq $3 \0A\09 negq $7", "r,r,r,r,*m,*m,*m,*m"(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) nounwind
  ret void
}

define void @test_nop(i16 %a0, i32 %a1, i64 %a2, i16 *%p0, i32 *%p1, i64 *%p2) optsize {
; GENERIC-LABEL: test_nop:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    nop # sched: [1:?]
; GENERIC-NEXT:    nopw %di # sched: [1:?]
; GENERIC-NEXT:    nopw (%rcx) # sched: [1:?]
; GENERIC-NEXT:    nopl %esi # sched: [1:?]
; GENERIC-NEXT:    nopl (%r8) # sched: [1:?]
; GENERIC-NEXT:    nopq %rdx # sched: [1:?]
; GENERIC-NEXT:    nopq (%r9) # sched: [1:?]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_nop:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    nop # sched: [1:0.50]
; ATOM-NEXT:    nopw %di # sched: [1:0.50]
; ATOM-NEXT:    nopw (%rcx) # sched: [1:0.50]
; ATOM-NEXT:    nopl %esi # sched: [1:0.50]
; ATOM-NEXT:    nopl (%r8) # sched: [1:0.50]
; ATOM-NEXT:    nopq %rdx # sched: [1:0.50]
; ATOM-NEXT:    nopq (%r9) # sched: [1:0.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_nop:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    nop # sched: [1:?]
; SLM-NEXT:    nopw %di # sched: [1:?]
; SLM-NEXT:    nopw (%rcx) # sched: [1:?]
; SLM-NEXT:    nopl %esi # sched: [1:?]
; SLM-NEXT:    nopl (%r8) # sched: [1:?]
; SLM-NEXT:    nopq %rdx # sched: [1:?]
; SLM-NEXT:    nopq (%r9) # sched: [1:?]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_nop:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    nop # sched: [1:?]
; SANDY-NEXT:    nopw %di # sched: [1:?]
; SANDY-NEXT:    nopw (%rcx) # sched: [1:?]
; SANDY-NEXT:    nopl %esi # sched: [1:?]
; SANDY-NEXT:    nopl (%r8) # sched: [1:?]
; SANDY-NEXT:    nopq %rdx # sched: [1:?]
; SANDY-NEXT:    nopq (%r9) # sched: [1:?]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_nop:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    nop # sched: [1:0.25]
; HASWELL-NEXT:    nopw %di # sched: [1:0.25]
; HASWELL-NEXT:    nopw (%rcx) # sched: [1:0.25]
; HASWELL-NEXT:    nopl %esi # sched: [1:0.25]
; HASWELL-NEXT:    nopl (%r8) # sched: [1:0.25]
; HASWELL-NEXT:    nopq %rdx # sched: [1:0.25]
; HASWELL-NEXT:    nopq (%r9) # sched: [1:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_nop:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    nop # sched: [1:0.25]
; BROADWELL-NEXT:    nopw %di # sched: [1:0.25]
; BROADWELL-NEXT:    nopw (%rcx) # sched: [1:0.25]
; BROADWELL-NEXT:    nopl %esi # sched: [1:0.25]
; BROADWELL-NEXT:    nopl (%r8) # sched: [1:0.25]
; BROADWELL-NEXT:    nopq %rdx # sched: [1:0.25]
; BROADWELL-NEXT:    nopq (%r9) # sched: [1:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_nop:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    nop # sched: [1:0.25]
; SKYLAKE-NEXT:    nopw %di # sched: [1:0.25]
; SKYLAKE-NEXT:    nopw (%rcx) # sched: [1:0.25]
; SKYLAKE-NEXT:    nopl %esi # sched: [1:0.25]
; SKYLAKE-NEXT:    nopl (%r8) # sched: [1:0.25]
; SKYLAKE-NEXT:    nopq %rdx # sched: [1:0.25]
; SKYLAKE-NEXT:    nopq (%r9) # sched: [1:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_nop:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    nop # sched: [1:0.25]
; SKX-NEXT:    nopw %di # sched: [1:0.25]
; SKX-NEXT:    nopw (%rcx) # sched: [1:0.25]
; SKX-NEXT:    nopl %esi # sched: [1:0.25]
; SKX-NEXT:    nopl (%r8) # sched: [1:0.25]
; SKX-NEXT:    nopq %rdx # sched: [1:0.25]
; SKX-NEXT:    nopq (%r9) # sched: [1:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_nop:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    nop # sched: [1:?]
; BTVER2-NEXT:    nopw %di # sched: [1:?]
; BTVER2-NEXT:    nopw (%rcx) # sched: [1:?]
; BTVER2-NEXT:    nopl %esi # sched: [1:?]
; BTVER2-NEXT:    nopl (%r8) # sched: [1:?]
; BTVER2-NEXT:    nopq %rdx # sched: [1:?]
; BTVER2-NEXT:    nopq (%r9) # sched: [1:?]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_nop:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    nop # sched: [1:?]
; ZNVER1-NEXT:    nopw %di # sched: [1:?]
; ZNVER1-NEXT:    nopw (%rcx) # sched: [1:?]
; ZNVER1-NEXT:    nopl %esi # sched: [1:?]
; ZNVER1-NEXT:    nopl (%r8) # sched: [1:?]
; ZNVER1-NEXT:    nopq %rdx # sched: [1:?]
; ZNVER1-NEXT:    nopq (%r9) # sched: [1:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "nop \0A\09 nopw $0 \0A\09 nopw $3 \0A\09 nopl $1 \0A\09 nopl $4 \0A\09 nopq $2 \0A\09 nopq $5", "r,r,r,*m,*m,*m"(i16 %a0, i32 %a1, i64 %a2, i16 *%p0, i32 *%p1, i64 *%p2) nounwind
  ret void
}

define void @test_not(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) optsize {
; GENERIC-LABEL: test_not:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; GENERIC-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    notb %dil # sched: [1:0.33]
; GENERIC-NEXT:    notb (%r8) # sched: [7:1.00]
; GENERIC-NEXT:    notw %si # sched: [1:0.33]
; GENERIC-NEXT:    notw (%r9) # sched: [7:1.00]
; GENERIC-NEXT:    notl %edx # sched: [1:0.33]
; GENERIC-NEXT:    notl (%rax) # sched: [7:1.00]
; GENERIC-NEXT:    notq %rcx # sched: [1:0.33]
; GENERIC-NEXT:    notq (%r10) # sched: [7:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_not:
; ATOM:       # %bb.0:
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [1:1.00]
; ATOM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [1:1.00]
; ATOM-NEXT:    #APP
; ATOM-NEXT:    notb %dil # sched: [1:0.50]
; ATOM-NEXT:    notb (%r8) # sched: [1:1.00]
; ATOM-NEXT:    notw %si # sched: [1:0.50]
; ATOM-NEXT:    notw (%r9) # sched: [1:1.00]
; ATOM-NEXT:    notl %edx # sched: [1:0.50]
; ATOM-NEXT:    notl (%rax) # sched: [1:1.00]
; ATOM-NEXT:    notq %rcx # sched: [1:0.50]
; ATOM-NEXT:    notq (%r10) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_not:
; SLM:       # %bb.0:
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [3:1.00]
; SLM-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [3:1.00]
; SLM-NEXT:    #APP
; SLM-NEXT:    notb %dil # sched: [1:0.50]
; SLM-NEXT:    notb (%r8) # sched: [4:2.00]
; SLM-NEXT:    notw %si # sched: [1:0.50]
; SLM-NEXT:    notw (%r9) # sched: [4:2.00]
; SLM-NEXT:    notl %edx # sched: [1:0.50]
; SLM-NEXT:    notl (%rax) # sched: [4:2.00]
; SLM-NEXT:    notq %rcx # sched: [1:0.50]
; SLM-NEXT:    notq (%r10) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_not:
; SANDY:       # %bb.0:
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SANDY-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SANDY-NEXT:    #APP
; SANDY-NEXT:    notb %dil # sched: [1:0.33]
; SANDY-NEXT:    notb (%r8) # sched: [7:1.00]
; SANDY-NEXT:    notw %si # sched: [1:0.33]
; SANDY-NEXT:    notw (%r9) # sched: [7:1.00]
; SANDY-NEXT:    notl %edx # sched: [1:0.33]
; SANDY-NEXT:    notl (%rax) # sched: [7:1.00]
; SANDY-NEXT:    notq %rcx # sched: [1:0.33]
; SANDY-NEXT:    notq (%r10) # sched: [7:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_not:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; HASWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    notb %dil # sched: [1:0.25]
; HASWELL-NEXT:    notb (%r8) # sched: [7:1.00]
; HASWELL-NEXT:    notw %si # sched: [1:0.25]
; HASWELL-NEXT:    notw (%r9) # sched: [7:1.00]
; HASWELL-NEXT:    notl %edx # sched: [1:0.25]
; HASWELL-NEXT:    notl (%rax) # sched: [7:1.00]
; HASWELL-NEXT:    notq %rcx # sched: [1:0.25]
; HASWELL-NEXT:    notq (%r10) # sched: [7:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_not:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; BROADWELL-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    notb %dil # sched: [1:0.25]
; BROADWELL-NEXT:    notb (%r8) # sched: [6:1.00]
; BROADWELL-NEXT:    notw %si # sched: [1:0.25]
; BROADWELL-NEXT:    notw (%r9) # sched: [6:1.00]
; BROADWELL-NEXT:    notl %edx # sched: [1:0.25]
; BROADWELL-NEXT:    notl (%rax) # sched: [6:1.00]
; BROADWELL-NEXT:    notq %rcx # sched: [1:0.25]
; BROADWELL-NEXT:    notq (%r10) # sched: [6:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_not:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKYLAKE-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    notb %dil # sched: [1:0.25]
; SKYLAKE-NEXT:    notb (%r8) # sched: [6:1.00]
; SKYLAKE-NEXT:    notw %si # sched: [1:0.25]
; SKYLAKE-NEXT:    notw (%r9) # sched: [6:1.00]
; SKYLAKE-NEXT:    notl %edx # sched: [1:0.25]
; SKYLAKE-NEXT:    notl (%rax) # sched: [6:1.00]
; SKYLAKE-NEXT:    notq %rcx # sched: [1:0.25]
; SKYLAKE-NEXT:    notq (%r10) # sched: [6:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_not:
; SKX:       # %bb.0:
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:0.50]
; SKX-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:0.50]
; SKX-NEXT:    #APP
; SKX-NEXT:    notb %dil # sched: [1:0.25]
; SKX-NEXT:    notb (%r8) # sched: [6:1.00]
; SKX-NEXT:    notw %si # sched: [1:0.25]
; SKX-NEXT:    notw (%r9) # sched: [6:1.00]
; SKX-NEXT:    notl %edx # sched: [1:0.25]
; SKX-NEXT:    notl (%rax) # sched: [6:1.00]
; SKX-NEXT:    notq %rcx # sched: [1:0.25]
; SKX-NEXT:    notq (%r10) # sched: [6:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_not:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [5:1.00]
; BTVER2-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [5:1.00]
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    notb %dil # sched: [1:0.50]
; BTVER2-NEXT:    notb (%r8) # sched: [4:1.00]
; BTVER2-NEXT:    notw %si # sched: [1:0.50]
; BTVER2-NEXT:    notw (%r9) # sched: [4:1.00]
; BTVER2-NEXT:    notl %edx # sched: [1:0.50]
; BTVER2-NEXT:    notl (%rax) # sched: [4:1.00]
; BTVER2-NEXT:    notq %rcx # sched: [1:0.50]
; BTVER2-NEXT:    notq (%r10) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_not:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %r10 # sched: [8:0.50]
; ZNVER1-NEXT:    movq {{[0-9]+}}(%rsp), %rax # sched: [8:0.50]
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    notb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    notb (%r8) # sched: [5:0.50]
; ZNVER1-NEXT:    notw %si # sched: [1:0.25]
; ZNVER1-NEXT:    notw (%r9) # sched: [5:0.50]
; ZNVER1-NEXT:    notl %edx # sched: [1:0.25]
; ZNVER1-NEXT:    notl (%rax) # sched: [5:0.50]
; ZNVER1-NEXT:    notq %rcx # sched: [1:0.25]
; ZNVER1-NEXT:    notq (%r10) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "notb $0 \0A\09 notb $4 \0A\09 notw $1 \0A\09 notw $5 \0A\09 notl $2 \0A\09 notl $6 \0A\09 notq $3 \0A\09 notq $7", "r,r,r,r,*m,*m,*m,*m"(i8 %a0, i16 %a1, i32 %a2, i64 %a3, i8 *%p0, i16 *%p1, i32 *%p2, i64 *%p3) nounwind
  ret void
}

; TODO - test_or

; TODO - test_out

define void @test_outs() optsize {
; GENERIC-LABEL: test_outs:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    outsb (%rsi), %dx # sched: [100:0.33]
; GENERIC-NEXT:    outsw (%rsi), %dx # sched: [100:0.33]
; GENERIC-NEXT:    outsl (%rsi), %dx # sched: [100:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_outs:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    outsb (%rsi), %dx # sched: [74:37.00]
; ATOM-NEXT:    outsw (%rsi), %dx # sched: [74:37.00]
; ATOM-NEXT:    outsl (%rsi), %dx # sched: [74:37.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_outs:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    outsb (%rsi), %dx # sched: [100:1.00]
; SLM-NEXT:    outsw (%rsi), %dx # sched: [100:1.00]
; SLM-NEXT:    outsl (%rsi), %dx # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_outs:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    outsb (%rsi), %dx # sched: [100:0.33]
; SANDY-NEXT:    outsw (%rsi), %dx # sched: [100:0.33]
; SANDY-NEXT:    outsl (%rsi), %dx # sched: [100:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_outs:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    outsb (%rsi), %dx # sched: [100:0.25]
; HASWELL-NEXT:    outsw (%rsi), %dx # sched: [100:0.25]
; HASWELL-NEXT:    outsl (%rsi), %dx # sched: [100:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_outs:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    outsb (%rsi), %dx # sched: [100:0.25]
; BROADWELL-NEXT:    outsw (%rsi), %dx # sched: [100:0.25]
; BROADWELL-NEXT:    outsl (%rsi), %dx # sched: [100:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_outs:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    outsb (%rsi), %dx # sched: [100:0.25]
; SKYLAKE-NEXT:    outsw (%rsi), %dx # sched: [100:0.25]
; SKYLAKE-NEXT:    outsl (%rsi), %dx # sched: [100:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_outs:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    outsb (%rsi), %dx # sched: [100:0.25]
; SKX-NEXT:    outsw (%rsi), %dx # sched: [100:0.25]
; SKX-NEXT:    outsl (%rsi), %dx # sched: [100:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_outs:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    outsb (%rsi), %dx # sched: [100:0.17]
; BTVER2-NEXT:    outsw (%rsi), %dx # sched: [100:0.17]
; BTVER2-NEXT:    outsl (%rsi), %dx # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_outs:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    outsb (%rsi), %dx # sched: [100:?]
; ZNVER1-NEXT:    outsw (%rsi), %dx # sched: [100:?]
; ZNVER1-NEXT:    outsl (%rsi), %dx # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "outsb \0A\09 outsw \0A\09 outsl", ""()
  ret void
}

define void @test_pause() optsize {
; GENERIC-LABEL: test_pause:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    pause # sched: [4:1.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_pause:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    pause # sched: [17:8.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_pause:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    pause # sched: [1:?]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_pause:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    pause # sched: [4:1.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_pause:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    pause # sched: [5:1.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_pause:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    pause # sched: [5:1.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_pause:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    pause # sched: [4:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_pause:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    pause # sched: [140:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_pause:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    pause # sched: [1:?]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_pause:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    pause # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "pause", ""()
  ret void
}

; TODO - test_pop
; TODO - test_popa
; TODO - test_popf
; TODO - test_popfd
; TODO - test_popfq

; TODO - test_prefetch
; TODO - test_prefetchw
; TODO - test_prefetchX

; TODO - test_push
; TODO - test_pusha
; TODO - test_pushad
; TODO - test_pushf
; TODO - test_pushfd
; TODO - test_pushfq

define void @test_rcl_rcr_8(i8 %a0, i8 %a1, i8 *%a2) optsize {
; GENERIC-LABEL: test_rcl_rcr_8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rclb %dil # sched: [1:0.50]
; GENERIC-NEXT:    rcrb %dil # sched: [1:0.50]
; GENERIC-NEXT:    rclb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclb $7, %dil # sched: [1:0.50]
; GENERIC-NEXT:    rcrb $7, %dil # sched: [1:0.50]
; GENERIC-NEXT:    rclb $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrb $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclb %cl, %dil # sched: [1:0.50]
; GENERIC-NEXT:    rcrb %cl, %dil # sched: [1:0.50]
; GENERIC-NEXT:    rclb %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrb %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rcl_rcr_8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rclb %dil # sched: [1:1.00]
; ATOM-NEXT:    rcrb %dil # sched: [1:1.00]
; ATOM-NEXT:    rclb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    rcrb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    rclb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    rcrb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    rclb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rcl_rcr_8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rclb %dil # sched: [1:1.00]
; SLM-NEXT:    rcrb %dil # sched: [1:1.00]
; SLM-NEXT:    rclb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    rcrb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    rclb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    rcrb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    rclb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rcl_rcr_8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rclb %dil # sched: [1:0.50]
; SANDY-NEXT:    rcrb %dil # sched: [1:0.50]
; SANDY-NEXT:    rclb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclb $7, %dil # sched: [1:0.50]
; SANDY-NEXT:    rcrb $7, %dil # sched: [1:0.50]
; SANDY-NEXT:    rclb $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrb $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclb %cl, %dil # sched: [1:0.50]
; SANDY-NEXT:    rcrb %cl, %dil # sched: [1:0.50]
; SANDY-NEXT:    rclb %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrb %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rcl_rcr_8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rclb %dil # sched: [3:0.75]
; HASWELL-NEXT:    rcrb %dil # sched: [3:0.75]
; HASWELL-NEXT:    rclb (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrb (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclb $7, %dil # sched: [3:0.75]
; HASWELL-NEXT:    rcrb $7, %dil # sched: [3:0.75]
; HASWELL-NEXT:    rclb $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrb $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclb %cl, %dil # sched: [11:2.25]
; HASWELL-NEXT:    rcrb %cl, %dil # sched: [14:2.50]
; HASWELL-NEXT:    rclb %cl, (%rdx) # sched: [16:2.00]
; HASWELL-NEXT:    rcrb %cl, (%rdx) # sched: [19:2.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rcl_rcr_8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rclb %dil # sched: [3:0.75]
; BROADWELL-NEXT:    rcrb %dil # sched: [3:0.75]
; BROADWELL-NEXT:    rclb (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrb (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclb $7, %dil # sched: [3:0.75]
; BROADWELL-NEXT:    rcrb $7, %dil # sched: [3:0.75]
; BROADWELL-NEXT:    rclb $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrb $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclb %cl, %dil # sched: [11:2.25]
; BROADWELL-NEXT:    rcrb %cl, %dil # sched: [14:2.50]
; BROADWELL-NEXT:    rclb %cl, (%rdx) # sched: [15:2.00]
; BROADWELL-NEXT:    rcrb %cl, (%rdx) # sched: [18:2.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rcl_rcr_8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rclb %dil # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrb %dil # sched: [3:0.75]
; SKYLAKE-NEXT:    rclb (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrb (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclb $7, %dil # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrb $7, %dil # sched: [3:0.75]
; SKYLAKE-NEXT:    rclb $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrb $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclb %cl, %dil # sched: [11:2.50]
; SKYLAKE-NEXT:    rcrb %cl, %dil # sched: [14:2.50]
; SKYLAKE-NEXT:    rclb %cl, (%rdx) # sched: [15:2.50]
; SKYLAKE-NEXT:    rcrb %cl, (%rdx) # sched: [18:2.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rcl_rcr_8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rclb %dil # sched: [3:0.75]
; SKX-NEXT:    rcrb %dil # sched: [3:0.75]
; SKX-NEXT:    rclb (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrb (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclb $7, %dil # sched: [3:0.75]
; SKX-NEXT:    rcrb $7, %dil # sched: [3:0.75]
; SKX-NEXT:    rclb $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrb $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclb %cl, %dil # sched: [11:2.50]
; SKX-NEXT:    rcrb %cl, %dil # sched: [14:2.50]
; SKX-NEXT:    rclb %cl, (%rdx) # sched: [15:2.50]
; SKX-NEXT:    rcrb %cl, (%rdx) # sched: [18:2.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rcl_rcr_8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rclb %dil # sched: [1:0.50]
; BTVER2-NEXT:    rcrb %dil # sched: [1:0.50]
; BTVER2-NEXT:    rclb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rcrb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rclb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rcrb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rclb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rcl_rcr_8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rclb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rcrb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rclb (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrb (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rcrb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rclb $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrb $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rcrb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rclb %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrb %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rclb $0 \0A\09 rcrb $0 \0A\09 rclb $2 \0A\09 rcrb $2 \0A\09 rclb $3, $0 \0A\09 rcrb $3, $0 \0A\09 rclb $3, $2 \0A\09 rcrb $3, $2 \0A\09 rclb %CL, $0 \0A\09 rcrb %CL, $0 \0A\09 rclb %CL, $2 \0A\09 rcrb %CL, $2", "r,r,*m,i"(i8 %a0, i8 %a1, i8 *%a2, i8 7)
  ret void
}
define void @test_rcl_rcr_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_rcl_rcr_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rclw %di # sched: [1:0.50]
; GENERIC-NEXT:    rcrw %di # sched: [1:0.50]
; GENERIC-NEXT:    rclw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    rcrw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    rclw $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrw $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclw %cl, %di # sched: [1:0.50]
; GENERIC-NEXT:    rcrw %cl, %di # sched: [1:0.50]
; GENERIC-NEXT:    rclw %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrw %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rcl_rcr_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rclw %di # sched: [1:1.00]
; ATOM-NEXT:    rcrw %di # sched: [1:1.00]
; ATOM-NEXT:    rclw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    rcrw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    rclw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    rcrw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    rclw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rcl_rcr_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rclw %di # sched: [1:1.00]
; SLM-NEXT:    rcrw %di # sched: [1:1.00]
; SLM-NEXT:    rclw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclw $7, %di # sched: [1:1.00]
; SLM-NEXT:    rcrw $7, %di # sched: [1:1.00]
; SLM-NEXT:    rclw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    rcrw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    rclw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rcl_rcr_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rclw %di # sched: [1:0.50]
; SANDY-NEXT:    rcrw %di # sched: [1:0.50]
; SANDY-NEXT:    rclw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    rcrw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    rclw $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrw $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclw %cl, %di # sched: [1:0.50]
; SANDY-NEXT:    rcrw %cl, %di # sched: [1:0.50]
; SANDY-NEXT:    rclw %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrw %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rcl_rcr_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rclw %di # sched: [3:0.75]
; HASWELL-NEXT:    rcrw %di # sched: [3:0.75]
; HASWELL-NEXT:    rclw (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrw (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclw $7, %di # sched: [3:0.75]
; HASWELL-NEXT:    rcrw $7, %di # sched: [3:0.75]
; HASWELL-NEXT:    rclw $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrw $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclw %cl, %di # sched: [11:2.00]
; HASWELL-NEXT:    rcrw %cl, %di # sched: [11:2.00]
; HASWELL-NEXT:    rclw %cl, (%rdx) # sched: [16:2.00]
; HASWELL-NEXT:    rcrw %cl, (%rdx) # sched: [19:2.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rcl_rcr_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rclw %di # sched: [3:0.75]
; BROADWELL-NEXT:    rcrw %di # sched: [3:0.75]
; BROADWELL-NEXT:    rclw (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrw (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclw $7, %di # sched: [3:0.75]
; BROADWELL-NEXT:    rcrw $7, %di # sched: [3:0.75]
; BROADWELL-NEXT:    rclw $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrw $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclw %cl, %di # sched: [11:2.00]
; BROADWELL-NEXT:    rcrw %cl, %di # sched: [11:2.00]
; BROADWELL-NEXT:    rclw %cl, (%rdx) # sched: [15:2.00]
; BROADWELL-NEXT:    rcrw %cl, (%rdx) # sched: [18:2.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rcl_rcr_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rclw %di # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrw %di # sched: [3:0.75]
; SKYLAKE-NEXT:    rclw (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrw (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclw $7, %di # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrw $7, %di # sched: [3:0.75]
; SKYLAKE-NEXT:    rclw $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrw $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclw %cl, %di # sched: [11:2.00]
; SKYLAKE-NEXT:    rcrw %cl, %di # sched: [11:2.00]
; SKYLAKE-NEXT:    rclw %cl, (%rdx) # sched: [15:2.50]
; SKYLAKE-NEXT:    rcrw %cl, (%rdx) # sched: [18:2.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rcl_rcr_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rclw %di # sched: [3:0.75]
; SKX-NEXT:    rcrw %di # sched: [3:0.75]
; SKX-NEXT:    rclw (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrw (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclw $7, %di # sched: [3:0.75]
; SKX-NEXT:    rcrw $7, %di # sched: [3:0.75]
; SKX-NEXT:    rclw $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrw $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclw %cl, %di # sched: [11:2.00]
; SKX-NEXT:    rcrw %cl, %di # sched: [11:2.00]
; SKX-NEXT:    rclw %cl, (%rdx) # sched: [15:2.50]
; SKX-NEXT:    rcrw %cl, (%rdx) # sched: [18:2.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rcl_rcr_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rclw %di # sched: [1:0.50]
; BTVER2-NEXT:    rcrw %di # sched: [1:0.50]
; BTVER2-NEXT:    rclw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    rcrw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    rclw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    rcrw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    rclw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rcl_rcr_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rclw %di # sched: [1:0.25]
; ZNVER1-NEXT:    rcrw %di # sched: [1:0.25]
; ZNVER1-NEXT:    rclw (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrw (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rcrw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rclw $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrw $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rcrw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rclw %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrw %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rclw $0 \0A\09 rcrw $0 \0A\09 rclw $2 \0A\09 rcrw $2 \0A\09 rclw $3, $0 \0A\09 rcrw $3, $0 \0A\09 rclw $3, $2 \0A\09 rcrw $3, $2 \0A\09 rclw %CL, $0 \0A\09 rcrw %CL, $0 \0A\09 rclw %CL, $2 \0A\09 rcrw %CL, $2", "r,r,*m,i"(i16 %a0, i16 %a1, i16 *%a2, i8 7)
  ret void
}
define void @test_rcl_rcr_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_rcl_rcr_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rcll %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcrl %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcll (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrl (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcll $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcrl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcll $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrl $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcll %cl, %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcrl %cl, %edi # sched: [1:0.50]
; GENERIC-NEXT:    rcll %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrl %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rcl_rcr_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rcll %edi # sched: [1:1.00]
; ATOM-NEXT:    rcrl %edi # sched: [1:1.00]
; ATOM-NEXT:    rcll (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrl (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcll $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    rcrl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    rcll $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrl $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcll %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    rcrl %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    rcll %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrl %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rcl_rcr_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rcll %edi # sched: [1:1.00]
; SLM-NEXT:    rcrl %edi # sched: [1:1.00]
; SLM-NEXT:    rcll (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrl (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcll $7, %edi # sched: [1:1.00]
; SLM-NEXT:    rcrl $7, %edi # sched: [1:1.00]
; SLM-NEXT:    rcll $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcll %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    rcrl %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    rcll %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrl %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rcl_rcr_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rcll %edi # sched: [1:0.50]
; SANDY-NEXT:    rcrl %edi # sched: [1:0.50]
; SANDY-NEXT:    rcll (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrl (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcll $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    rcrl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    rcll $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrl $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcll %cl, %edi # sched: [1:0.50]
; SANDY-NEXT:    rcrl %cl, %edi # sched: [1:0.50]
; SANDY-NEXT:    rcll %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrl %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rcl_rcr_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rcll %edi # sched: [3:0.75]
; HASWELL-NEXT:    rcrl %edi # sched: [3:0.75]
; HASWELL-NEXT:    rcll (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrl (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcll $7, %edi # sched: [3:0.75]
; HASWELL-NEXT:    rcrl $7, %edi # sched: [3:0.75]
; HASWELL-NEXT:    rcll $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrl $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcll %cl, %edi # sched: [11:2.00]
; HASWELL-NEXT:    rcrl %cl, %edi # sched: [11:2.00]
; HASWELL-NEXT:    rcll %cl, (%rdx) # sched: [16:2.00]
; HASWELL-NEXT:    rcrl %cl, (%rdx) # sched: [19:2.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rcl_rcr_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rcll %edi # sched: [3:0.75]
; BROADWELL-NEXT:    rcrl %edi # sched: [3:0.75]
; BROADWELL-NEXT:    rcll (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrl (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcll $7, %edi # sched: [3:0.75]
; BROADWELL-NEXT:    rcrl $7, %edi # sched: [3:0.75]
; BROADWELL-NEXT:    rcll $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrl $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcll %cl, %edi # sched: [11:2.00]
; BROADWELL-NEXT:    rcrl %cl, %edi # sched: [11:2.00]
; BROADWELL-NEXT:    rcll %cl, (%rdx) # sched: [15:2.00]
; BROADWELL-NEXT:    rcrl %cl, (%rdx) # sched: [18:2.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rcl_rcr_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rcll %edi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrl %edi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcll (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrl (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcll $7, %edi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrl $7, %edi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcll $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrl $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcll %cl, %edi # sched: [11:2.00]
; SKYLAKE-NEXT:    rcrl %cl, %edi # sched: [11:2.00]
; SKYLAKE-NEXT:    rcll %cl, (%rdx) # sched: [15:2.50]
; SKYLAKE-NEXT:    rcrl %cl, (%rdx) # sched: [18:2.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rcl_rcr_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rcll %edi # sched: [3:0.75]
; SKX-NEXT:    rcrl %edi # sched: [3:0.75]
; SKX-NEXT:    rcll (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrl (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcll $7, %edi # sched: [3:0.75]
; SKX-NEXT:    rcrl $7, %edi # sched: [3:0.75]
; SKX-NEXT:    rcll $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrl $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcll %cl, %edi # sched: [11:2.00]
; SKX-NEXT:    rcrl %cl, %edi # sched: [11:2.00]
; SKX-NEXT:    rcll %cl, (%rdx) # sched: [15:2.50]
; SKX-NEXT:    rcrl %cl, (%rdx) # sched: [18:2.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rcl_rcr_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rcll %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcrl %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcll (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrl (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcll $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcrl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcll $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcll %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcrl %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rcll %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrl %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rcl_rcr_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rcll %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcll (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrl (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcll $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrl $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcll $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrl $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcll %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrl %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rcll %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrl %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rcll $0 \0A\09 rcrl $0 \0A\09 rcll $2 \0A\09 rcrl $2 \0A\09 rcll $3, $0 \0A\09 rcrl $3, $0 \0A\09 rcll $3, $2 \0A\09 rcrl $3, $2 \0A\09 rcll %CL, $0 \0A\09 rcrl %CL, $0 \0A\09 rcll %CL, $2 \0A\09 rcrl %CL, $2", "r,r,*m,i"(i32 %a0, i32 %a1, i32 *%a2, i8 7)
  ret void
}
define void @test_rcl_rcr_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_rcl_rcr_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rclq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rcrq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rclq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rcrq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rclq $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrq $7, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rclq %cl, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rcrq %cl, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rclq %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rcrq %cl, (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rcl_rcr_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rclq %rdi # sched: [1:1.00]
; ATOM-NEXT:    rcrq %rdi # sched: [1:1.00]
; ATOM-NEXT:    rclq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rcrq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rclq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rclq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rcrq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rclq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rcrq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rcl_rcr_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rclq %rdi # sched: [1:1.00]
; SLM-NEXT:    rcrq %rdi # sched: [1:1.00]
; SLM-NEXT:    rclq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    rcrq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    rclq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rclq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    rcrq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    rclq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rcrq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rcl_rcr_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rclq %rdi # sched: [1:0.50]
; SANDY-NEXT:    rcrq %rdi # sched: [1:0.50]
; SANDY-NEXT:    rclq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    rcrq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    rclq $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrq $7, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rclq %cl, %rdi # sched: [1:0.50]
; SANDY-NEXT:    rcrq %cl, %rdi # sched: [1:0.50]
; SANDY-NEXT:    rclq %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rcrq %cl, (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rcl_rcr_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rclq %rdi # sched: [3:0.75]
; HASWELL-NEXT:    rcrq %rdi # sched: [3:0.75]
; HASWELL-NEXT:    rclq (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrq (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclq $7, %rdi # sched: [3:0.75]
; HASWELL-NEXT:    rcrq $7, %rdi # sched: [3:0.75]
; HASWELL-NEXT:    rclq $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rcrq $7, (%rdx) # sched: [9:0.75]
; HASWELL-NEXT:    rclq %cl, %rdi # sched: [11:2.00]
; HASWELL-NEXT:    rcrq %cl, %rdi # sched: [11:2.00]
; HASWELL-NEXT:    rclq %cl, (%rdx) # sched: [16:2.00]
; HASWELL-NEXT:    rcrq %cl, (%rdx) # sched: [19:2.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rcl_rcr_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rclq %rdi # sched: [3:0.75]
; BROADWELL-NEXT:    rcrq %rdi # sched: [3:0.75]
; BROADWELL-NEXT:    rclq (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrq (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclq $7, %rdi # sched: [3:0.75]
; BROADWELL-NEXT:    rcrq $7, %rdi # sched: [3:0.75]
; BROADWELL-NEXT:    rclq $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rcrq $7, (%rdx) # sched: [8:0.75]
; BROADWELL-NEXT:    rclq %cl, %rdi # sched: [11:2.00]
; BROADWELL-NEXT:    rcrq %cl, %rdi # sched: [11:2.00]
; BROADWELL-NEXT:    rclq %cl, (%rdx) # sched: [15:2.00]
; BROADWELL-NEXT:    rcrq %cl, (%rdx) # sched: [18:2.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rcl_rcr_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rclq %rdi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrq %rdi # sched: [3:0.75]
; SKYLAKE-NEXT:    rclq (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrq (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclq $7, %rdi # sched: [3:0.75]
; SKYLAKE-NEXT:    rcrq $7, %rdi # sched: [3:0.75]
; SKYLAKE-NEXT:    rclq $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rcrq $7, (%rdx) # sched: [8:0.75]
; SKYLAKE-NEXT:    rclq %cl, %rdi # sched: [11:2.00]
; SKYLAKE-NEXT:    rcrq %cl, %rdi # sched: [11:2.00]
; SKYLAKE-NEXT:    rclq %cl, (%rdx) # sched: [15:2.50]
; SKYLAKE-NEXT:    rcrq %cl, (%rdx) # sched: [18:2.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rcl_rcr_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rclq %rdi # sched: [3:0.75]
; SKX-NEXT:    rcrq %rdi # sched: [3:0.75]
; SKX-NEXT:    rclq (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrq (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclq $7, %rdi # sched: [3:0.75]
; SKX-NEXT:    rcrq $7, %rdi # sched: [3:0.75]
; SKX-NEXT:    rclq $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rcrq $7, (%rdx) # sched: [8:0.75]
; SKX-NEXT:    rclq %cl, %rdi # sched: [11:2.00]
; SKX-NEXT:    rcrq %cl, %rdi # sched: [11:2.00]
; SKX-NEXT:    rclq %cl, (%rdx) # sched: [15:2.50]
; SKX-NEXT:    rcrq %cl, (%rdx) # sched: [18:2.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rcl_rcr_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rclq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rcrq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rclq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rcrq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rclq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rclq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rcrq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rclq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rcrq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rcl_rcr_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rclq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rclq (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrq (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rclq $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrq $7, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rclq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rcrq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rclq %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    rcrq %cl, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rclq $0 \0A\09 rcrq $0 \0A\09 rclq $2 \0A\09 rcrq $2 \0A\09 rclq $3, $0 \0A\09 rcrq $3, $0 \0A\09 rclq $3, $2 \0A\09 rcrq $3, $2 \0A\09 rclq %CL, $0 \0A\09 rcrq %CL, $0 \0A\09 rclq %CL, $2 \0A\09 rcrq %CL, $2", "r,r,*m,i"(i64 %a0, i64 %a1, i64 *%a2, i8 7)
  ret void
}

; TODO - test_ret

define void @test_rol_ror_8(i8 %a0, i8 %a1, i8 *%a2) optsize {
; GENERIC-LABEL: test_rol_ror_8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rolb %dil # sched: [1:0.50]
; GENERIC-NEXT:    rorb %dil # sched: [1:0.50]
; GENERIC-NEXT:    rolb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rorb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rolb $7, %dil # sched: [2:1.00]
; GENERIC-NEXT:    rorb $7, %dil # sched: [2:1.00]
; GENERIC-NEXT:    rolb $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rorb $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rolb %cl, %dil # sched: [3:1.50]
; GENERIC-NEXT:    rorb %cl, %dil # sched: [3:1.50]
; GENERIC-NEXT:    rolb %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    rorb %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rol_ror_8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rolb %dil # sched: [1:1.00]
; ATOM-NEXT:    rorb %dil # sched: [1:1.00]
; ATOM-NEXT:    rolb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    rorb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    rolb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    rorb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    rolb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rol_ror_8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rolb %dil # sched: [1:1.00]
; SLM-NEXT:    rorb %dil # sched: [1:1.00]
; SLM-NEXT:    rolb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    rorb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    rolb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    rorb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    rolb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rol_ror_8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rolb %dil # sched: [1:0.50]
; SANDY-NEXT:    rorb %dil # sched: [1:0.50]
; SANDY-NEXT:    rolb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rorb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rolb $7, %dil # sched: [2:1.00]
; SANDY-NEXT:    rorb $7, %dil # sched: [2:1.00]
; SANDY-NEXT:    rolb $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rorb $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rolb %cl, %dil # sched: [3:1.50]
; SANDY-NEXT:    rorb %cl, %dil # sched: [3:1.50]
; SANDY-NEXT:    rolb %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    rorb %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rol_ror_8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rolb %dil # sched: [2:1.00]
; HASWELL-NEXT:    rorb %dil # sched: [2:1.00]
; HASWELL-NEXT:    rolb (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorb (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolb $7, %dil # sched: [2:1.00]
; HASWELL-NEXT:    rorb $7, %dil # sched: [2:1.00]
; HASWELL-NEXT:    rolb $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorb $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolb %cl, %dil # sched: [3:1.00]
; HASWELL-NEXT:    rorb %cl, %dil # sched: [3:1.00]
; HASWELL-NEXT:    rolb %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    rorb %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rol_ror_8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rolb %dil # sched: [2:1.00]
; BROADWELL-NEXT:    rorb %dil # sched: [2:1.00]
; BROADWELL-NEXT:    rolb (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorb (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolb $7, %dil # sched: [2:1.00]
; BROADWELL-NEXT:    rorb $7, %dil # sched: [2:1.00]
; BROADWELL-NEXT:    rolb $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorb $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolb %cl, %dil # sched: [3:1.00]
; BROADWELL-NEXT:    rorb %cl, %dil # sched: [3:1.00]
; BROADWELL-NEXT:    rolb %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    rorb %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rol_ror_8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rolb %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    rorb %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    rolb (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorb (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolb $7, %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    rorb $7, %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    rolb $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorb $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolb %cl, %dil # sched: [3:1.50]
; SKYLAKE-NEXT:    rorb %cl, %dil # sched: [3:1.50]
; SKYLAKE-NEXT:    rolb %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    rorb %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rol_ror_8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rolb %dil # sched: [2:1.00]
; SKX-NEXT:    rorb %dil # sched: [2:1.00]
; SKX-NEXT:    rolb (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorb (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolb $7, %dil # sched: [2:1.00]
; SKX-NEXT:    rorb $7, %dil # sched: [2:1.00]
; SKX-NEXT:    rolb $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorb $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolb %cl, %dil # sched: [3:1.50]
; SKX-NEXT:    rorb %cl, %dil # sched: [3:1.50]
; SKX-NEXT:    rolb %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    rorb %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rol_ror_8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rolb %dil # sched: [1:0.50]
; BTVER2-NEXT:    rorb %dil # sched: [1:0.50]
; BTVER2-NEXT:    rolb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rorb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rolb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rorb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    rolb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rol_ror_8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rolb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rorb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rolb (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorb (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rorb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rolb $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorb $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rorb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    rolb %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorb %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rolb $0 \0A\09 rorb $0 \0A\09 rolb $2 \0A\09 rorb $2 \0A\09 rolb $3, $0 \0A\09 rorb $3, $0 \0A\09 rolb $3, $2 \0A\09 rorb $3, $2 \0A\09 rolb %CL, $0 \0A\09 rorb %CL, $0 \0A\09 rolb %CL, $2 \0A\09 rorb %CL, $2", "r,r,*m,i"(i8 %a0, i8 %a1, i8 *%a2, i8 7)
  ret void
}
define void @test_rol_ror_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_rol_ror_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rolw %di # sched: [1:0.50]
; GENERIC-NEXT:    rorw %di # sched: [1:0.50]
; GENERIC-NEXT:    rolw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rorw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rolw $7, %di # sched: [2:1.00]
; GENERIC-NEXT:    rorw $7, %di # sched: [2:1.00]
; GENERIC-NEXT:    rolw $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rorw $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rolw %cl, %di # sched: [3:1.50]
; GENERIC-NEXT:    rorw %cl, %di # sched: [3:1.50]
; GENERIC-NEXT:    rolw %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    rorw %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rol_ror_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rolw %di # sched: [1:1.00]
; ATOM-NEXT:    rorw %di # sched: [1:1.00]
; ATOM-NEXT:    rolw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    rorw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    rolw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    rorw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    rolw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rol_ror_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rolw %di # sched: [1:1.00]
; SLM-NEXT:    rorw %di # sched: [1:1.00]
; SLM-NEXT:    rolw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolw $7, %di # sched: [1:1.00]
; SLM-NEXT:    rorw $7, %di # sched: [1:1.00]
; SLM-NEXT:    rolw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    rorw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    rolw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rol_ror_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rolw %di # sched: [1:0.50]
; SANDY-NEXT:    rorw %di # sched: [1:0.50]
; SANDY-NEXT:    rolw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rorw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rolw $7, %di # sched: [2:1.00]
; SANDY-NEXT:    rorw $7, %di # sched: [2:1.00]
; SANDY-NEXT:    rolw $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rorw $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rolw %cl, %di # sched: [3:1.50]
; SANDY-NEXT:    rorw %cl, %di # sched: [3:1.50]
; SANDY-NEXT:    rolw %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    rorw %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rol_ror_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rolw %di # sched: [2:1.00]
; HASWELL-NEXT:    rorw %di # sched: [2:1.00]
; HASWELL-NEXT:    rolw (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorw (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolw $7, %di # sched: [2:1.00]
; HASWELL-NEXT:    rorw $7, %di # sched: [2:1.00]
; HASWELL-NEXT:    rolw $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorw $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolw %cl, %di # sched: [3:1.00]
; HASWELL-NEXT:    rorw %cl, %di # sched: [3:1.00]
; HASWELL-NEXT:    rolw %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    rorw %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rol_ror_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rolw %di # sched: [2:1.00]
; BROADWELL-NEXT:    rorw %di # sched: [2:1.00]
; BROADWELL-NEXT:    rolw (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorw (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolw $7, %di # sched: [2:1.00]
; BROADWELL-NEXT:    rorw $7, %di # sched: [2:1.00]
; BROADWELL-NEXT:    rolw $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorw $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolw %cl, %di # sched: [3:1.00]
; BROADWELL-NEXT:    rorw %cl, %di # sched: [3:1.00]
; BROADWELL-NEXT:    rolw %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    rorw %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rol_ror_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rolw %di # sched: [2:1.00]
; SKYLAKE-NEXT:    rorw %di # sched: [2:1.00]
; SKYLAKE-NEXT:    rolw (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorw (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolw $7, %di # sched: [2:1.00]
; SKYLAKE-NEXT:    rorw $7, %di # sched: [2:1.00]
; SKYLAKE-NEXT:    rolw $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorw $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolw %cl, %di # sched: [3:1.50]
; SKYLAKE-NEXT:    rorw %cl, %di # sched: [3:1.50]
; SKYLAKE-NEXT:    rolw %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    rorw %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rol_ror_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rolw %di # sched: [2:1.00]
; SKX-NEXT:    rorw %di # sched: [2:1.00]
; SKX-NEXT:    rolw (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorw (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolw $7, %di # sched: [2:1.00]
; SKX-NEXT:    rorw $7, %di # sched: [2:1.00]
; SKX-NEXT:    rolw $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorw $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolw %cl, %di # sched: [3:1.50]
; SKX-NEXT:    rorw %cl, %di # sched: [3:1.50]
; SKX-NEXT:    rolw %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    rorw %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rol_ror_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rolw %di # sched: [1:0.50]
; BTVER2-NEXT:    rorw %di # sched: [1:0.50]
; BTVER2-NEXT:    rolw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    rorw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    rolw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    rorw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    rolw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rol_ror_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rolw %di # sched: [1:0.25]
; ZNVER1-NEXT:    rorw %di # sched: [1:0.25]
; ZNVER1-NEXT:    rolw (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorw (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rorw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rolw $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorw $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rorw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    rolw %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorw %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rolw $0 \0A\09 rorw $0 \0A\09 rolw $2 \0A\09 rorw $2 \0A\09 rolw $3, $0 \0A\09 rorw $3, $0 \0A\09 rolw $3, $2 \0A\09 rorw $3, $2 \0A\09 rolw %CL, $0 \0A\09 rorw %CL, $0 \0A\09 rolw %CL, $2 \0A\09 rorw %CL, $2", "r,r,*m,i"(i16 %a0, i16 %a1, i16 *%a2, i8 7)
  ret void
}
define void @test_rol_ror_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_rol_ror_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    roll %edi # sched: [1:0.50]
; GENERIC-NEXT:    rorl %edi # sched: [1:0.50]
; GENERIC-NEXT:    roll (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rorl (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    roll $7, %edi # sched: [2:1.00]
; GENERIC-NEXT:    rorl $7, %edi # sched: [2:1.00]
; GENERIC-NEXT:    roll $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rorl $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    roll %cl, %edi # sched: [3:1.50]
; GENERIC-NEXT:    rorl %cl, %edi # sched: [3:1.50]
; GENERIC-NEXT:    roll %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    rorl %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rol_ror_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    roll %edi # sched: [1:1.00]
; ATOM-NEXT:    rorl %edi # sched: [1:1.00]
; ATOM-NEXT:    roll (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorl (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    roll $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    rorl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    roll $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorl $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    roll %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    rorl %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    roll %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorl %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rol_ror_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    roll %edi # sched: [1:1.00]
; SLM-NEXT:    rorl %edi # sched: [1:1.00]
; SLM-NEXT:    roll (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorl (%rdx) # sched: [4:2.00]
; SLM-NEXT:    roll $7, %edi # sched: [1:1.00]
; SLM-NEXT:    rorl $7, %edi # sched: [1:1.00]
; SLM-NEXT:    roll $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    roll %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    rorl %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    roll %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorl %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rol_ror_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    roll %edi # sched: [1:0.50]
; SANDY-NEXT:    rorl %edi # sched: [1:0.50]
; SANDY-NEXT:    roll (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rorl (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    roll $7, %edi # sched: [2:1.00]
; SANDY-NEXT:    rorl $7, %edi # sched: [2:1.00]
; SANDY-NEXT:    roll $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rorl $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    roll %cl, %edi # sched: [3:1.50]
; SANDY-NEXT:    rorl %cl, %edi # sched: [3:1.50]
; SANDY-NEXT:    roll %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    rorl %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rol_ror_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    roll %edi # sched: [2:1.00]
; HASWELL-NEXT:    rorl %edi # sched: [2:1.00]
; HASWELL-NEXT:    roll (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorl (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    roll $7, %edi # sched: [2:1.00]
; HASWELL-NEXT:    rorl $7, %edi # sched: [2:1.00]
; HASWELL-NEXT:    roll $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorl $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    roll %cl, %edi # sched: [3:1.00]
; HASWELL-NEXT:    rorl %cl, %edi # sched: [3:1.00]
; HASWELL-NEXT:    roll %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    rorl %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rol_ror_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    roll %edi # sched: [2:1.00]
; BROADWELL-NEXT:    rorl %edi # sched: [2:1.00]
; BROADWELL-NEXT:    roll (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorl (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    roll $7, %edi # sched: [2:1.00]
; BROADWELL-NEXT:    rorl $7, %edi # sched: [2:1.00]
; BROADWELL-NEXT:    roll $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorl $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    roll %cl, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    rorl %cl, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    roll %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    rorl %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rol_ror_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    roll %edi # sched: [2:1.00]
; SKYLAKE-NEXT:    rorl %edi # sched: [2:1.00]
; SKYLAKE-NEXT:    roll (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorl (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    roll $7, %edi # sched: [2:1.00]
; SKYLAKE-NEXT:    rorl $7, %edi # sched: [2:1.00]
; SKYLAKE-NEXT:    roll $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorl $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    roll %cl, %edi # sched: [3:1.50]
; SKYLAKE-NEXT:    rorl %cl, %edi # sched: [3:1.50]
; SKYLAKE-NEXT:    roll %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    rorl %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rol_ror_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    roll %edi # sched: [2:1.00]
; SKX-NEXT:    rorl %edi # sched: [2:1.00]
; SKX-NEXT:    roll (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorl (%rdx) # sched: [7:1.00]
; SKX-NEXT:    roll $7, %edi # sched: [2:1.00]
; SKX-NEXT:    rorl $7, %edi # sched: [2:1.00]
; SKX-NEXT:    roll $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorl $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    roll %cl, %edi # sched: [3:1.50]
; SKX-NEXT:    rorl %cl, %edi # sched: [3:1.50]
; SKX-NEXT:    roll %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    rorl %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rol_ror_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    roll %edi # sched: [1:0.50]
; BTVER2-NEXT:    rorl %edi # sched: [1:0.50]
; BTVER2-NEXT:    roll (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorl (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    roll $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rorl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    roll $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    roll %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    rorl %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    roll %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorl %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rol_ror_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    roll %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rorl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    roll (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorl (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    roll $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rorl $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    roll $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorl $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    roll %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    rorl %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    roll %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorl %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "roll $0 \0A\09 rorl $0 \0A\09 roll $2 \0A\09 rorl $2 \0A\09 roll $3, $0 \0A\09 rorl $3, $0 \0A\09 roll $3, $2 \0A\09 rorl $3, $2 \0A\09 roll %CL, $0 \0A\09 rorl %CL, $0 \0A\09 roll %CL, $2 \0A\09 rorl %CL, $2", "r,r,*m,i"(i32 %a0, i32 %a1, i32 *%a2, i8 7)
  ret void
}
define void @test_rol_ror_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_rol_ror_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    rolq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rorq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    rolq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rorq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; GENERIC-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; GENERIC-NEXT:    rolq $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rorq $7, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    rolq %cl, %rdi # sched: [3:1.50]
; GENERIC-NEXT:    rorq %cl, %rdi # sched: [3:1.50]
; GENERIC-NEXT:    rolq %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    rorq %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_rol_ror_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    rolq %rdi # sched: [1:1.00]
; ATOM-NEXT:    rorq %rdi # sched: [1:1.00]
; ATOM-NEXT:    rolq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rorq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rolq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rolq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rorq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    rolq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    rorq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_rol_ror_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    rolq %rdi # sched: [1:1.00]
; SLM-NEXT:    rorq %rdi # sched: [1:1.00]
; SLM-NEXT:    rolq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    rorq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    rolq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rolq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    rorq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    rolq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    rorq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_rol_ror_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    rolq %rdi # sched: [1:0.50]
; SANDY-NEXT:    rorq %rdi # sched: [1:0.50]
; SANDY-NEXT:    rolq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rorq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; SANDY-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; SANDY-NEXT:    rolq $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rorq $7, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    rolq %cl, %rdi # sched: [3:1.50]
; SANDY-NEXT:    rorq %cl, %rdi # sched: [3:1.50]
; SANDY-NEXT:    rolq %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    rorq %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_rol_ror_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    rolq %rdi # sched: [2:1.00]
; HASWELL-NEXT:    rorq %rdi # sched: [2:1.00]
; HASWELL-NEXT:    rolq (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorq (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; HASWELL-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; HASWELL-NEXT:    rolq $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rorq $7, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    rolq %cl, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    rorq %cl, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    rolq %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    rorq %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_rol_ror_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    rolq %rdi # sched: [2:1.00]
; BROADWELL-NEXT:    rorq %rdi # sched: [2:1.00]
; BROADWELL-NEXT:    rolq (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorq (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; BROADWELL-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; BROADWELL-NEXT:    rolq $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rorq $7, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    rolq %cl, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    rorq %cl, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    rolq %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    rorq %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_rol_ror_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    rolq %rdi # sched: [2:1.00]
; SKYLAKE-NEXT:    rorq %rdi # sched: [2:1.00]
; SKYLAKE-NEXT:    rolq (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorq (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; SKYLAKE-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; SKYLAKE-NEXT:    rolq $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rorq $7, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    rolq %cl, %rdi # sched: [3:1.50]
; SKYLAKE-NEXT:    rorq %cl, %rdi # sched: [3:1.50]
; SKYLAKE-NEXT:    rolq %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    rorq %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_rol_ror_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    rolq %rdi # sched: [2:1.00]
; SKX-NEXT:    rorq %rdi # sched: [2:1.00]
; SKX-NEXT:    rolq (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorq (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolq $7, %rdi # sched: [2:1.00]
; SKX-NEXT:    rorq $7, %rdi # sched: [2:1.00]
; SKX-NEXT:    rolq $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rorq $7, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    rolq %cl, %rdi # sched: [3:1.50]
; SKX-NEXT:    rorq %cl, %rdi # sched: [3:1.50]
; SKX-NEXT:    rolq %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    rorq %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_rol_ror_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    rolq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rorq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rolq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rorq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rolq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rolq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rorq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    rolq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    rorq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_rol_ror_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    rolq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rorq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rolq (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorq (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rorq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rolq $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorq $7, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rolq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rorq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    rolq %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    rorq %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "rolq $0 \0A\09 rorq $0 \0A\09 rolq $2 \0A\09 rorq $2 \0A\09 rolq $3, $0 \0A\09 rorq $3, $0 \0A\09 rolq $3, $2 \0A\09 rorq $3, $2 \0A\09 rolq %CL, $0 \0A\09 rorq %CL, $0 \0A\09 rolq %CL, $2 \0A\09 rorq %CL, $2", "r,r,*m,i"(i64 %a0, i64 %a1, i64 *%a2, i8 7)
  ret void
}

define void @test_sar_shl_shr_8(i8 %a0, i8 %a1, i8 *%a2) optsize {
; GENERIC-LABEL: test_sar_shl_shr_8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    sarb %dil # sched: [1:0.50]
; GENERIC-NEXT:    shlb %dil # sched: [1:0.50]
; GENERIC-NEXT:    shrb %dil # sched: [1:0.50]
; GENERIC-NEXT:    sarb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    shlb (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrb (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    sarb $7, %dil # sched: [1:0.50]
; GENERIC-NEXT:    shlb $7, %dil # sched: [1:0.50]
; GENERIC-NEXT:    shrb $7, %dil # sched: [1:0.50]
; GENERIC-NEXT:    sarb $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shlb $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrb $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    sarb %cl, %dil # sched: [3:1.50]
; GENERIC-NEXT:    shlb %cl, %dil # sched: [3:1.50]
; GENERIC-NEXT:    shrb %cl, %dil # sched: [3:1.50]
; GENERIC-NEXT:    sarb %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shlb %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shrb %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_sar_shl_shr_8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    sarb %dil # sched: [1:1.00]
; ATOM-NEXT:    shlb %dil # sched: [1:1.00]
; ATOM-NEXT:    shrb %dil # sched: [1:1.00]
; ATOM-NEXT:    sarb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrb (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    shlb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    shrb $7, %dil # sched: [1:1.00]
; ATOM-NEXT:    sarb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrb $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    shlb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    shrb %cl, %dil # sched: [1:1.00]
; ATOM-NEXT:    sarb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrb %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_sar_shl_shr_8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    sarb %dil # sched: [1:1.00]
; SLM-NEXT:    shlb %dil # sched: [1:1.00]
; SLM-NEXT:    shrb %dil # sched: [1:1.00]
; SLM-NEXT:    sarb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrb (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    shlb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    shrb $7, %dil # sched: [1:1.00]
; SLM-NEXT:    sarb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrb $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    shlb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    shrb %cl, %dil # sched: [1:1.00]
; SLM-NEXT:    sarb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrb %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_sar_shl_shr_8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    sarb %dil # sched: [1:0.50]
; SANDY-NEXT:    shlb %dil # sched: [1:0.50]
; SANDY-NEXT:    shrb %dil # sched: [1:0.50]
; SANDY-NEXT:    sarb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    shlb (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrb (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    sarb $7, %dil # sched: [1:0.50]
; SANDY-NEXT:    shlb $7, %dil # sched: [1:0.50]
; SANDY-NEXT:    shrb $7, %dil # sched: [1:0.50]
; SANDY-NEXT:    sarb $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shlb $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrb $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    sarb %cl, %dil # sched: [3:1.50]
; SANDY-NEXT:    shlb %cl, %dil # sched: [3:1.50]
; SANDY-NEXT:    shrb %cl, %dil # sched: [3:1.50]
; SANDY-NEXT:    sarb %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shlb %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shrb %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_sar_shl_shr_8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    sarb %dil # sched: [1:0.50]
; HASWELL-NEXT:    shlb %dil # sched: [1:0.50]
; HASWELL-NEXT:    shrb %dil # sched: [1:0.50]
; HASWELL-NEXT:    sarb (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlb (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrb (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarb $7, %dil # sched: [1:0.50]
; HASWELL-NEXT:    shlb $7, %dil # sched: [1:0.50]
; HASWELL-NEXT:    shrb $7, %dil # sched: [1:0.50]
; HASWELL-NEXT:    sarb $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlb $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrb $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarb %cl, %dil # sched: [3:1.00]
; HASWELL-NEXT:    shlb %cl, %dil # sched: [3:1.00]
; HASWELL-NEXT:    shrb %cl, %dil # sched: [3:1.00]
; HASWELL-NEXT:    sarb %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shlb %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shrb %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_sar_shl_shr_8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    sarb %dil # sched: [1:0.50]
; BROADWELL-NEXT:    shlb %dil # sched: [1:0.50]
; BROADWELL-NEXT:    shrb %dil # sched: [1:0.50]
; BROADWELL-NEXT:    sarb (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlb (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrb (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarb $7, %dil # sched: [1:0.50]
; BROADWELL-NEXT:    shlb $7, %dil # sched: [1:0.50]
; BROADWELL-NEXT:    shrb $7, %dil # sched: [1:0.50]
; BROADWELL-NEXT:    sarb $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlb $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrb $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarb %cl, %dil # sched: [3:1.00]
; BROADWELL-NEXT:    shlb %cl, %dil # sched: [3:1.00]
; BROADWELL-NEXT:    shrb %cl, %dil # sched: [3:1.00]
; BROADWELL-NEXT:    sarb %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shlb %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shrb %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_sar_shl_shr_8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    sarb %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    shlb %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    shrb %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    sarb (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlb (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrb (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarb $7, %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    shlb $7, %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    shrb $7, %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    sarb $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlb $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrb $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarb %cl, %dil # sched: [3:1.50]
; SKYLAKE-NEXT:    shlb %cl, %dil # sched: [3:1.50]
; SKYLAKE-NEXT:    shrb %cl, %dil # sched: [3:1.50]
; SKYLAKE-NEXT:    sarb %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shlb %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shrb %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_sar_shl_shr_8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    sarb %dil # sched: [1:0.50]
; SKX-NEXT:    shlb %dil # sched: [1:0.50]
; SKX-NEXT:    shrb %dil # sched: [1:0.50]
; SKX-NEXT:    sarb (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlb (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrb (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarb $7, %dil # sched: [1:0.50]
; SKX-NEXT:    shlb $7, %dil # sched: [1:0.50]
; SKX-NEXT:    shrb $7, %dil # sched: [1:0.50]
; SKX-NEXT:    sarb $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlb $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrb $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarb %cl, %dil # sched: [3:1.50]
; SKX-NEXT:    shlb %cl, %dil # sched: [3:1.50]
; SKX-NEXT:    shrb %cl, %dil # sched: [3:1.50]
; SKX-NEXT:    sarb %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shlb %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shrb %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_sar_shl_shr_8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    sarb %dil # sched: [1:0.50]
; BTVER2-NEXT:    shlb %dil # sched: [1:0.50]
; BTVER2-NEXT:    shrb %dil # sched: [1:0.50]
; BTVER2-NEXT:    sarb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrb (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    shlb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    shrb $7, %dil # sched: [1:0.50]
; BTVER2-NEXT:    sarb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrb $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    shlb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    shrb %cl, %dil # sched: [1:0.50]
; BTVER2-NEXT:    sarb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrb %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_sar_shl_shr_8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    sarb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shlb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shrb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    sarb (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlb (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrb (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shlb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shrb $7, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    sarb $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlb $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrb $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shlb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    shrb %cl, %dil # sched: [1:0.25]
; ZNVER1-NEXT:    sarb %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shlb %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shrb %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "sarb $0 \0A\09 shlb $0 \0A\09 shrb $0 \0A\09 sarb $2 \0A\09 shlb $2 \0A\09 shrb $2 \0A\09 sarb $3, $0 \0A\09 shlb $3, $0 \0A\09 shrb $3, $0 \0A\09 sarb $3, $2 \0A\09 shlb $3, $2 \0A\09 shrb $3, $2 \0A\09 sarb %CL, $0 \0A\09 shlb %CL, $0 \0A\09 shrb %CL, $0 \0A\09 sarb %CL, $2  \0A\09 shlb %CL, $2 \0A\09 shrb %CL, $2", "r,r,*m,i"(i8 %a0, i8 %a1, i8 *%a2, i8 7)
  ret void
}
define void @test_sar_shl_shr_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_sar_shl_shr_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    sarw %di # sched: [1:0.50]
; GENERIC-NEXT:    shlw %di # sched: [1:0.50]
; GENERIC-NEXT:    shrw %di # sched: [1:0.50]
; GENERIC-NEXT:    sarw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    shlw (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrw (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    sarw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    shlw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    shrw $7, %di # sched: [1:0.50]
; GENERIC-NEXT:    sarw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shlw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrw $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    sarw %cl, %di # sched: [3:1.50]
; GENERIC-NEXT:    shlw %cl, %di # sched: [3:1.50]
; GENERIC-NEXT:    shrw %cl, %di # sched: [3:1.50]
; GENERIC-NEXT:    sarw %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shlw %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shrw %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_sar_shl_shr_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    sarw %di # sched: [1:1.00]
; ATOM-NEXT:    shlw %di # sched: [1:1.00]
; ATOM-NEXT:    shrw %di # sched: [1:1.00]
; ATOM-NEXT:    sarw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrw (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    shlw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    shrw $7, %di # sched: [1:1.00]
; ATOM-NEXT:    sarw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrw $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    shlw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    shrw %cl, %di # sched: [1:1.00]
; ATOM-NEXT:    sarw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrw %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_sar_shl_shr_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    sarw %di # sched: [1:1.00]
; SLM-NEXT:    shlw %di # sched: [1:1.00]
; SLM-NEXT:    shrw %di # sched: [1:1.00]
; SLM-NEXT:    sarw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrw (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarw $7, %di # sched: [1:1.00]
; SLM-NEXT:    shlw $7, %di # sched: [1:1.00]
; SLM-NEXT:    shrw $7, %di # sched: [1:1.00]
; SLM-NEXT:    sarw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrw $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    shlw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    shrw %cl, %di # sched: [1:1.00]
; SLM-NEXT:    sarw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrw %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_sar_shl_shr_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    sarw %di # sched: [1:0.50]
; SANDY-NEXT:    shlw %di # sched: [1:0.50]
; SANDY-NEXT:    shrw %di # sched: [1:0.50]
; SANDY-NEXT:    sarw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    shlw (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrw (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    sarw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    shlw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    shrw $7, %di # sched: [1:0.50]
; SANDY-NEXT:    sarw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shlw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrw $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    sarw %cl, %di # sched: [3:1.50]
; SANDY-NEXT:    shlw %cl, %di # sched: [3:1.50]
; SANDY-NEXT:    shrw %cl, %di # sched: [3:1.50]
; SANDY-NEXT:    sarw %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shlw %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shrw %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_sar_shl_shr_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    sarw %di # sched: [1:0.50]
; HASWELL-NEXT:    shlw %di # sched: [1:0.50]
; HASWELL-NEXT:    shrw %di # sched: [1:0.50]
; HASWELL-NEXT:    sarw (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlw (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrw (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    shlw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    shrw $7, %di # sched: [1:0.50]
; HASWELL-NEXT:    sarw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrw $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarw %cl, %di # sched: [3:1.00]
; HASWELL-NEXT:    shlw %cl, %di # sched: [3:1.00]
; HASWELL-NEXT:    shrw %cl, %di # sched: [3:1.00]
; HASWELL-NEXT:    sarw %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shlw %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shrw %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_sar_shl_shr_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    sarw %di # sched: [1:0.50]
; BROADWELL-NEXT:    shlw %di # sched: [1:0.50]
; BROADWELL-NEXT:    shrw %di # sched: [1:0.50]
; BROADWELL-NEXT:    sarw (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlw (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrw (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    shlw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    shrw $7, %di # sched: [1:0.50]
; BROADWELL-NEXT:    sarw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrw $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarw %cl, %di # sched: [3:1.00]
; BROADWELL-NEXT:    shlw %cl, %di # sched: [3:1.00]
; BROADWELL-NEXT:    shrw %cl, %di # sched: [3:1.00]
; BROADWELL-NEXT:    sarw %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shlw %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shrw %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_sar_shl_shr_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    sarw %di # sched: [1:0.50]
; SKYLAKE-NEXT:    shlw %di # sched: [1:0.50]
; SKYLAKE-NEXT:    shrw %di # sched: [1:0.50]
; SKYLAKE-NEXT:    sarw (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlw (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrw (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    shlw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    shrw $7, %di # sched: [1:0.50]
; SKYLAKE-NEXT:    sarw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrw $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarw %cl, %di # sched: [3:1.50]
; SKYLAKE-NEXT:    shlw %cl, %di # sched: [3:1.50]
; SKYLAKE-NEXT:    shrw %cl, %di # sched: [3:1.50]
; SKYLAKE-NEXT:    sarw %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shlw %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shrw %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_sar_shl_shr_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    sarw %di # sched: [1:0.50]
; SKX-NEXT:    shlw %di # sched: [1:0.50]
; SKX-NEXT:    shrw %di # sched: [1:0.50]
; SKX-NEXT:    sarw (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlw (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrw (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarw $7, %di # sched: [1:0.50]
; SKX-NEXT:    shlw $7, %di # sched: [1:0.50]
; SKX-NEXT:    shrw $7, %di # sched: [1:0.50]
; SKX-NEXT:    sarw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrw $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarw %cl, %di # sched: [3:1.50]
; SKX-NEXT:    shlw %cl, %di # sched: [3:1.50]
; SKX-NEXT:    shrw %cl, %di # sched: [3:1.50]
; SKX-NEXT:    sarw %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shlw %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shrw %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_sar_shl_shr_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    sarw %di # sched: [1:0.50]
; BTVER2-NEXT:    shlw %di # sched: [1:0.50]
; BTVER2-NEXT:    shrw %di # sched: [1:0.50]
; BTVER2-NEXT:    sarw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrw (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    shlw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    shrw $7, %di # sched: [1:0.50]
; BTVER2-NEXT:    sarw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrw $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    shlw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    shrw %cl, %di # sched: [1:0.50]
; BTVER2-NEXT:    sarw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrw %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_sar_shl_shr_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    sarw %di # sched: [1:0.25]
; ZNVER1-NEXT:    shlw %di # sched: [1:0.25]
; ZNVER1-NEXT:    shrw %di # sched: [1:0.25]
; ZNVER1-NEXT:    sarw (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlw (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrw (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shlw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shrw $7, %di # sched: [1:0.25]
; ZNVER1-NEXT:    sarw $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlw $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrw $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shlw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shrw %cl, %di # sched: [1:0.25]
; ZNVER1-NEXT:    sarw %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shlw %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shrw %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "sarw $0 \0A\09 shlw $0 \0A\09 shrw $0 \0A\09 sarw $2 \0A\09 shlw $2 \0A\09 shrw $2 \0A\09 sarw $3, $0 \0A\09 shlw $3, $0 \0A\09 shrw $3, $0 \0A\09 sarw $3, $2 \0A\09 shlw $3, $2 \0A\09 shrw $3, $2 \0A\09 sarw %CL, $0 \0A\09 shlw %CL, $0 \0A\09 shrw %CL, $0 \0A\09 sarw %CL, $2  \0A\09 shlw %CL, $2 \0A\09 shrw %CL, $2", "r,r,*m,i"(i16 %a0, i16 %a1, i16 *%a2, i8 7)
  ret void
}
define void @test_sar_shl_shr_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_sar_shl_shr_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    sarl %edi # sched: [1:0.50]
; GENERIC-NEXT:    shll %edi # sched: [1:0.50]
; GENERIC-NEXT:    shrl %edi # sched: [1:0.50]
; GENERIC-NEXT:    sarl (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    shll (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrl (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    sarl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    shll $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    shrl $7, %edi # sched: [1:0.50]
; GENERIC-NEXT:    sarl $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shll $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrl $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    sarl %cl, %edi # sched: [3:1.50]
; GENERIC-NEXT:    shll %cl, %edi # sched: [3:1.50]
; GENERIC-NEXT:    shrl %cl, %edi # sched: [3:1.50]
; GENERIC-NEXT:    sarl %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shll %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shrl %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_sar_shl_shr_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    sarl %edi # sched: [1:1.00]
; ATOM-NEXT:    shll %edi # sched: [1:1.00]
; ATOM-NEXT:    shrl %edi # sched: [1:1.00]
; ATOM-NEXT:    sarl (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shll (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrl (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    shll $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    shrl $7, %edi # sched: [1:1.00]
; ATOM-NEXT:    sarl $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shll $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrl $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarl %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    shll %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    shrl %cl, %edi # sched: [1:1.00]
; ATOM-NEXT:    sarl %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shll %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrl %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_sar_shl_shr_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    sarl %edi # sched: [1:1.00]
; SLM-NEXT:    shll %edi # sched: [1:1.00]
; SLM-NEXT:    shrl %edi # sched: [1:1.00]
; SLM-NEXT:    sarl (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shll (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrl (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarl $7, %edi # sched: [1:1.00]
; SLM-NEXT:    shll $7, %edi # sched: [1:1.00]
; SLM-NEXT:    shrl $7, %edi # sched: [1:1.00]
; SLM-NEXT:    sarl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shll $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrl $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarl %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    shll %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    shrl %cl, %edi # sched: [1:1.00]
; SLM-NEXT:    sarl %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shll %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrl %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_sar_shl_shr_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    sarl %edi # sched: [1:0.50]
; SANDY-NEXT:    shll %edi # sched: [1:0.50]
; SANDY-NEXT:    shrl %edi # sched: [1:0.50]
; SANDY-NEXT:    sarl (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    shll (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrl (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    sarl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    shll $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    shrl $7, %edi # sched: [1:0.50]
; SANDY-NEXT:    sarl $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shll $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrl $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    sarl %cl, %edi # sched: [3:1.50]
; SANDY-NEXT:    shll %cl, %edi # sched: [3:1.50]
; SANDY-NEXT:    shrl %cl, %edi # sched: [3:1.50]
; SANDY-NEXT:    sarl %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shll %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shrl %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_sar_shl_shr_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    sarl %edi # sched: [1:0.50]
; HASWELL-NEXT:    shll %edi # sched: [1:0.50]
; HASWELL-NEXT:    shrl %edi # sched: [1:0.50]
; HASWELL-NEXT:    sarl (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shll (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrl (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    shll $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    shrl $7, %edi # sched: [1:0.50]
; HASWELL-NEXT:    sarl $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shll $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrl $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarl %cl, %edi # sched: [3:1.00]
; HASWELL-NEXT:    shll %cl, %edi # sched: [3:1.00]
; HASWELL-NEXT:    shrl %cl, %edi # sched: [3:1.00]
; HASWELL-NEXT:    sarl %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shll %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shrl %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_sar_shl_shr_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    sarl %edi # sched: [1:0.50]
; BROADWELL-NEXT:    shll %edi # sched: [1:0.50]
; BROADWELL-NEXT:    shrl %edi # sched: [1:0.50]
; BROADWELL-NEXT:    sarl (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shll (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrl (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    shll $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    shrl $7, %edi # sched: [1:0.50]
; BROADWELL-NEXT:    sarl $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shll $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrl $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarl %cl, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    shll %cl, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    shrl %cl, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    sarl %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shll %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shrl %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_sar_shl_shr_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    sarl %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    shll %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    shrl %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    sarl (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shll (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrl (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    shll $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    shrl $7, %edi # sched: [1:0.50]
; SKYLAKE-NEXT:    sarl $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shll $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrl $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarl %cl, %edi # sched: [3:1.50]
; SKYLAKE-NEXT:    shll %cl, %edi # sched: [3:1.50]
; SKYLAKE-NEXT:    shrl %cl, %edi # sched: [3:1.50]
; SKYLAKE-NEXT:    sarl %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shll %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shrl %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_sar_shl_shr_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    sarl %edi # sched: [1:0.50]
; SKX-NEXT:    shll %edi # sched: [1:0.50]
; SKX-NEXT:    shrl %edi # sched: [1:0.50]
; SKX-NEXT:    sarl (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shll (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrl (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    shll $7, %edi # sched: [1:0.50]
; SKX-NEXT:    shrl $7, %edi # sched: [1:0.50]
; SKX-NEXT:    sarl $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shll $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrl $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarl %cl, %edi # sched: [3:1.50]
; SKX-NEXT:    shll %cl, %edi # sched: [3:1.50]
; SKX-NEXT:    shrl %cl, %edi # sched: [3:1.50]
; SKX-NEXT:    sarl %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shll %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shrl %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_sar_shl_shr_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    sarl %edi # sched: [1:0.50]
; BTVER2-NEXT:    shll %edi # sched: [1:0.50]
; BTVER2-NEXT:    shrl %edi # sched: [1:0.50]
; BTVER2-NEXT:    sarl (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shll (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrl (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    shll $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    shrl $7, %edi # sched: [1:0.50]
; BTVER2-NEXT:    sarl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shll $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrl $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarl %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    shll %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    shrl %cl, %edi # sched: [1:0.50]
; BTVER2-NEXT:    sarl %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shll %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrl %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_sar_shl_shr_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    sarl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shll %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shrl %edi # sched: [1:0.25]
; ZNVER1-NEXT:    sarl (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shll (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrl (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarl $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shll $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shrl $7, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    sarl $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shll $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrl $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarl %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shll %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shrl %cl, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    sarl %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shll %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shrl %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "sarl $0 \0A\09 shll $0 \0A\09 shrl $0 \0A\09 sarl $2 \0A\09 shll $2 \0A\09 shrl $2 \0A\09 sarl $3, $0 \0A\09 shll $3, $0 \0A\09 shrl $3, $0 \0A\09 sarl $3, $2 \0A\09 shll $3, $2 \0A\09 shrl $3, $2 \0A\09 sarl %CL, $0 \0A\09 shll %CL, $0 \0A\09 shrl %CL, $0 \0A\09 sarl %CL, $2  \0A\09 shll %CL, $2 \0A\09 shrl %CL, $2", "r,r,*m,i"(i32 %a0, i32 %a1, i32 *%a2, i8 7)
  ret void
}
define void @test_sar_shl_shr_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_sar_shl_shr_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    sarq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    shlq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    shrq %rdi # sched: [1:0.50]
; GENERIC-NEXT:    sarq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    shlq (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrq (%rdx) # sched: [5:1.00]
; GENERIC-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; GENERIC-NEXT:    sarq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shlq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    shrq $7, (%rdx) # sched: [7:1.00]
; GENERIC-NEXT:    sarq %cl, %rdi # sched: [3:1.50]
; GENERIC-NEXT:    shlq %cl, %rdi # sched: [3:1.50]
; GENERIC-NEXT:    shrq %cl, %rdi # sched: [3:1.50]
; GENERIC-NEXT:    sarq %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shlq %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    shrq %cl, (%rdx) # sched: [9:1.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_sar_shl_shr_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    sarq %rdi # sched: [1:1.00]
; ATOM-NEXT:    shlq %rdi # sched: [1:1.00]
; ATOM-NEXT:    shrq %rdi # sched: [1:1.00]
; ATOM-NEXT:    sarq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrq (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    shlq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    shrq $7, %rdi # sched: [1:1.00]
; ATOM-NEXT:    sarq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrq $7, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    sarq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    shlq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    shrq %cl, %rdi # sched: [1:1.00]
; ATOM-NEXT:    sarq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shlq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    shrq %cl, (%rdx) # sched: [1:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_sar_shl_shr_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    sarq %rdi # sched: [1:1.00]
; SLM-NEXT:    shlq %rdi # sched: [1:1.00]
; SLM-NEXT:    shrq %rdi # sched: [1:1.00]
; SLM-NEXT:    sarq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrq (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    shlq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    shrq $7, %rdi # sched: [1:1.00]
; SLM-NEXT:    sarq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrq $7, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    sarq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    shlq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    shrq %cl, %rdi # sched: [1:1.00]
; SLM-NEXT:    sarq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shlq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrq %cl, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_sar_shl_shr_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    sarq %rdi # sched: [1:0.50]
; SANDY-NEXT:    shlq %rdi # sched: [1:0.50]
; SANDY-NEXT:    shrq %rdi # sched: [1:0.50]
; SANDY-NEXT:    sarq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    shlq (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrq (%rdx) # sched: [5:1.00]
; SANDY-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; SANDY-NEXT:    sarq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shlq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    shrq $7, (%rdx) # sched: [7:1.00]
; SANDY-NEXT:    sarq %cl, %rdi # sched: [3:1.50]
; SANDY-NEXT:    shlq %cl, %rdi # sched: [3:1.50]
; SANDY-NEXT:    shrq %cl, %rdi # sched: [3:1.50]
; SANDY-NEXT:    sarq %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shlq %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    shrq %cl, (%rdx) # sched: [9:1.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_sar_shl_shr_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    sarq %rdi # sched: [1:0.50]
; HASWELL-NEXT:    shlq %rdi # sched: [1:0.50]
; HASWELL-NEXT:    shrq %rdi # sched: [1:0.50]
; HASWELL-NEXT:    sarq (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlq (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrq (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; HASWELL-NEXT:    sarq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shlq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    shrq $7, (%rdx) # sched: [7:1.00]
; HASWELL-NEXT:    sarq %cl, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    shlq %cl, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    shrq %cl, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    sarq %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shlq %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    shrq %cl, (%rdx) # sched: [9:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_sar_shl_shr_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    sarq %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    shlq %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    shrq %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    sarq (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlq (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrq (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; BROADWELL-NEXT:    sarq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shlq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    shrq $7, (%rdx) # sched: [6:1.00]
; BROADWELL-NEXT:    sarq %cl, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    shlq %cl, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    shrq %cl, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    sarq %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shlq %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    shrq %cl, (%rdx) # sched: [8:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_sar_shl_shr_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    sarq %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    shlq %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    shrq %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    sarq (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlq (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrq (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; SKYLAKE-NEXT:    sarq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shlq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    shrq $7, (%rdx) # sched: [6:1.00]
; SKYLAKE-NEXT:    sarq %cl, %rdi # sched: [3:1.50]
; SKYLAKE-NEXT:    shlq %cl, %rdi # sched: [3:1.50]
; SKYLAKE-NEXT:    shrq %cl, %rdi # sched: [3:1.50]
; SKYLAKE-NEXT:    sarq %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shlq %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    shrq %cl, (%rdx) # sched: [8:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_sar_shl_shr_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    sarq %rdi # sched: [1:0.50]
; SKX-NEXT:    shlq %rdi # sched: [1:0.50]
; SKX-NEXT:    shrq %rdi # sched: [1:0.50]
; SKX-NEXT:    sarq (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlq (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrq (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; SKX-NEXT:    sarq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shlq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    shrq $7, (%rdx) # sched: [6:1.00]
; SKX-NEXT:    sarq %cl, %rdi # sched: [3:1.50]
; SKX-NEXT:    shlq %cl, %rdi # sched: [3:1.50]
; SKX-NEXT:    shrq %cl, %rdi # sched: [3:1.50]
; SKX-NEXT:    sarq %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shlq %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    shrq %cl, (%rdx) # sched: [8:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_sar_shl_shr_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    sarq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shlq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shrq %rdi # sched: [1:0.50]
; BTVER2-NEXT:    sarq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrq (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shlq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shrq $7, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    sarq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrq $7, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    sarq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shlq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    shrq %cl, %rdi # sched: [1:0.50]
; BTVER2-NEXT:    sarq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shlq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    shrq %cl, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_sar_shl_shr_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    sarq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shlq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shrq %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    sarq (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlq (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrq (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shlq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shrq $7, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    sarq $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shlq $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrq $7, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    sarq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shlq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shrq %cl, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    sarq %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shlq %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    shrq %cl, (%rdx) # sched: [5:1.00]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "sarq $0 \0A\09 shlq $0 \0A\09 shrq $0 \0A\09 sarq $2 \0A\09 shlq $2 \0A\09 shrq $2 \0A\09 sarq $3, $0 \0A\09 shlq $3, $0 \0A\09 shrq $3, $0 \0A\09 sarq $3, $2 \0A\09 shlq $3, $2 \0A\09 shrq $3, $2 \0A\09 sarq %CL, $0 \0A\09 shlq %CL, $0 \0A\09 shrq %CL, $0 \0A\09 sarq %CL, $2  \0A\09 shlq %CL, $2 \0A\09 shrq %CL, $2", "r,r,*m,i"(i64 %a0, i64 %a1, i64 *%a2, i8 7)
  ret void
}

; TODO - test_sbb

define void @test_scas() optsize {
; GENERIC-LABEL: test_scas:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    scasb %es:(%rdi), %al # sched: [2:0.67]
; GENERIC-NEXT:    scasw %es:(%rdi), %ax # sched: [2:0.67]
; GENERIC-NEXT:    scasl %es:(%rdi), %eax # sched: [2:0.67]
; GENERIC-NEXT:    scasq %es:(%rdi), %rax # sched: [2:0.67]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_scas:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    scasb %es:(%rdi), %al # sched: [2:1.00]
; ATOM-NEXT:    scasw %es:(%rdi), %ax # sched: [2:1.00]
; ATOM-NEXT:    scasl %es:(%rdi), %eax # sched: [2:1.00]
; ATOM-NEXT:    scasq %es:(%rdi), %rax # sched: [2:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_scas:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    scasb %es:(%rdi), %al # sched: [100:1.00]
; SLM-NEXT:    scasw %es:(%rdi), %ax # sched: [100:1.00]
; SLM-NEXT:    scasl %es:(%rdi), %eax # sched: [100:1.00]
; SLM-NEXT:    scasq %es:(%rdi), %rax # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_scas:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    scasb %es:(%rdi), %al # sched: [2:0.67]
; SANDY-NEXT:    scasw %es:(%rdi), %ax # sched: [2:0.67]
; SANDY-NEXT:    scasl %es:(%rdi), %eax # sched: [2:0.67]
; SANDY-NEXT:    scasq %es:(%rdi), %rax # sched: [2:0.67]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_scas:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    scasb %es:(%rdi), %al # sched: [7:0.50]
; HASWELL-NEXT:    scasw %es:(%rdi), %ax # sched: [7:0.50]
; HASWELL-NEXT:    scasl %es:(%rdi), %eax # sched: [7:0.50]
; HASWELL-NEXT:    scasq %es:(%rdi), %rax # sched: [7:0.50]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_scas:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    scasb %es:(%rdi), %al # sched: [7:0.50]
; BROADWELL-NEXT:    scasw %es:(%rdi), %ax # sched: [7:0.50]
; BROADWELL-NEXT:    scasl %es:(%rdi), %eax # sched: [7:0.50]
; BROADWELL-NEXT:    scasq %es:(%rdi), %rax # sched: [7:0.50]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_scas:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    scasb %es:(%rdi), %al # sched: [7:0.50]
; SKYLAKE-NEXT:    scasw %es:(%rdi), %ax # sched: [7:0.50]
; SKYLAKE-NEXT:    scasl %es:(%rdi), %eax # sched: [7:0.50]
; SKYLAKE-NEXT:    scasq %es:(%rdi), %rax # sched: [7:0.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_scas:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    scasb %es:(%rdi), %al # sched: [7:0.50]
; SKX-NEXT:    scasw %es:(%rdi), %ax # sched: [7:0.50]
; SKX-NEXT:    scasl %es:(%rdi), %eax # sched: [7:0.50]
; SKX-NEXT:    scasq %es:(%rdi), %rax # sched: [7:0.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_scas:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    scasb %es:(%rdi), %al # sched: [100:0.17]
; BTVER2-NEXT:    scasw %es:(%rdi), %ax # sched: [100:0.17]
; BTVER2-NEXT:    scasl %es:(%rdi), %eax # sched: [100:0.17]
; BTVER2-NEXT:    scasq %es:(%rdi), %rax # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_scas:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    scasb %es:(%rdi), %al # sched: [100:?]
; ZNVER1-NEXT:    scasw %es:(%rdi), %ax # sched: [100:?]
; ZNVER1-NEXT:    scasl %es:(%rdi), %eax # sched: [100:?]
; ZNVER1-NEXT:    scasq %es:(%rdi), %rax # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "scasb \0A\09 scasw \0A\09 scasl \0A\09 scasq", ""()
  ret void
}

define void @test_setcc(i8 %a0, i8 *%a1) optsize {
; GENERIC-LABEL: test_setcc:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    seto %dil # sched: [1:0.50]
; GENERIC-NEXT:    setno %dil # sched: [1:0.50]
; GENERIC-NEXT:    setb %dil # sched: [1:0.50]
; GENERIC-NEXT:    setae %dil # sched: [1:0.50]
; GENERIC-NEXT:    sete %dil # sched: [1:0.50]
; GENERIC-NEXT:    setne %dil # sched: [1:0.50]
; GENERIC-NEXT:    setbe %dil # sched: [2:1.00]
; GENERIC-NEXT:    seta %dil # sched: [2:1.00]
; GENERIC-NEXT:    sets %dil # sched: [1:0.50]
; GENERIC-NEXT:    setns %dil # sched: [1:0.50]
; GENERIC-NEXT:    setp %dil # sched: [1:0.50]
; GENERIC-NEXT:    setnp %dil # sched: [1:0.50]
; GENERIC-NEXT:    setl %dil # sched: [1:0.50]
; GENERIC-NEXT:    setge %dil # sched: [1:0.50]
; GENERIC-NEXT:    setle %dil # sched: [1:0.50]
; GENERIC-NEXT:    setg %dil # sched: [1:0.50]
; GENERIC-NEXT:    seto (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setno (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setb (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setae (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    sete (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setne (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setbe (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    seta (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    sets (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setns (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setp (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setnp (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setl (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setge (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setle (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    setg (%rsi) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_setcc:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    seto %dil # sched: [1:0.50]
; ATOM-NEXT:    setno %dil # sched: [1:0.50]
; ATOM-NEXT:    setb %dil # sched: [1:0.50]
; ATOM-NEXT:    setae %dil # sched: [1:0.50]
; ATOM-NEXT:    sete %dil # sched: [1:0.50]
; ATOM-NEXT:    setne %dil # sched: [1:0.50]
; ATOM-NEXT:    setbe %dil # sched: [1:0.50]
; ATOM-NEXT:    seta %dil # sched: [1:0.50]
; ATOM-NEXT:    sets %dil # sched: [1:0.50]
; ATOM-NEXT:    setns %dil # sched: [1:0.50]
; ATOM-NEXT:    setp %dil # sched: [1:0.50]
; ATOM-NEXT:    setnp %dil # sched: [1:0.50]
; ATOM-NEXT:    setl %dil # sched: [1:0.50]
; ATOM-NEXT:    setge %dil # sched: [1:0.50]
; ATOM-NEXT:    setle %dil # sched: [1:0.50]
; ATOM-NEXT:    setg %dil # sched: [1:0.50]
; ATOM-NEXT:    seto (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setno (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setb (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setae (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    sete (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setne (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setbe (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    seta (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    sets (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setns (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setp (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setnp (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setl (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setge (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setle (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    setg (%rsi) # sched: [2:1.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_setcc:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    seto %dil # sched: [1:0.50]
; SLM-NEXT:    setno %dil # sched: [1:0.50]
; SLM-NEXT:    setb %dil # sched: [1:0.50]
; SLM-NEXT:    setae %dil # sched: [1:0.50]
; SLM-NEXT:    sete %dil # sched: [1:0.50]
; SLM-NEXT:    setne %dil # sched: [1:0.50]
; SLM-NEXT:    setbe %dil # sched: [1:0.50]
; SLM-NEXT:    seta %dil # sched: [1:0.50]
; SLM-NEXT:    sets %dil # sched: [1:0.50]
; SLM-NEXT:    setns %dil # sched: [1:0.50]
; SLM-NEXT:    setp %dil # sched: [1:0.50]
; SLM-NEXT:    setnp %dil # sched: [1:0.50]
; SLM-NEXT:    setl %dil # sched: [1:0.50]
; SLM-NEXT:    setge %dil # sched: [1:0.50]
; SLM-NEXT:    setle %dil # sched: [1:0.50]
; SLM-NEXT:    setg %dil # sched: [1:0.50]
; SLM-NEXT:    seto (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setno (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setb (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setae (%rsi) # sched: [1:1.00]
; SLM-NEXT:    sete (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setne (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setbe (%rsi) # sched: [1:1.00]
; SLM-NEXT:    seta (%rsi) # sched: [1:1.00]
; SLM-NEXT:    sets (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setns (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setp (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setnp (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setl (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setge (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setle (%rsi) # sched: [1:1.00]
; SLM-NEXT:    setg (%rsi) # sched: [1:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_setcc:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    seto %dil # sched: [1:0.50]
; SANDY-NEXT:    setno %dil # sched: [1:0.50]
; SANDY-NEXT:    setb %dil # sched: [1:0.50]
; SANDY-NEXT:    setae %dil # sched: [1:0.50]
; SANDY-NEXT:    sete %dil # sched: [1:0.50]
; SANDY-NEXT:    setne %dil # sched: [1:0.50]
; SANDY-NEXT:    setbe %dil # sched: [2:1.00]
; SANDY-NEXT:    seta %dil # sched: [2:1.00]
; SANDY-NEXT:    sets %dil # sched: [1:0.50]
; SANDY-NEXT:    setns %dil # sched: [1:0.50]
; SANDY-NEXT:    setp %dil # sched: [1:0.50]
; SANDY-NEXT:    setnp %dil # sched: [1:0.50]
; SANDY-NEXT:    setl %dil # sched: [1:0.50]
; SANDY-NEXT:    setge %dil # sched: [1:0.50]
; SANDY-NEXT:    setle %dil # sched: [1:0.50]
; SANDY-NEXT:    setg %dil # sched: [1:0.50]
; SANDY-NEXT:    seto (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setno (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setb (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setae (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    sete (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setne (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setbe (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    seta (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    sets (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setns (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setp (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setnp (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setl (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setge (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setle (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    setg (%rsi) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_setcc:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    seto %dil # sched: [1:0.50]
; HASWELL-NEXT:    setno %dil # sched: [1:0.50]
; HASWELL-NEXT:    setb %dil # sched: [1:0.50]
; HASWELL-NEXT:    setae %dil # sched: [1:0.50]
; HASWELL-NEXT:    sete %dil # sched: [1:0.50]
; HASWELL-NEXT:    setne %dil # sched: [1:0.50]
; HASWELL-NEXT:    setbe %dil # sched: [2:0.50]
; HASWELL-NEXT:    seta %dil # sched: [2:0.50]
; HASWELL-NEXT:    sets %dil # sched: [1:0.50]
; HASWELL-NEXT:    setns %dil # sched: [1:0.50]
; HASWELL-NEXT:    setp %dil # sched: [1:0.50]
; HASWELL-NEXT:    setnp %dil # sched: [1:0.50]
; HASWELL-NEXT:    setl %dil # sched: [1:0.50]
; HASWELL-NEXT:    setge %dil # sched: [1:0.50]
; HASWELL-NEXT:    setle %dil # sched: [1:0.50]
; HASWELL-NEXT:    setg %dil # sched: [1:0.50]
; HASWELL-NEXT:    seto (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setno (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setb (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setae (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    sete (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setne (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setbe (%rsi) # sched: [3:1.00]
; HASWELL-NEXT:    seta (%rsi) # sched: [3:1.00]
; HASWELL-NEXT:    sets (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setns (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setp (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setnp (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setl (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setge (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setle (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    setg (%rsi) # sched: [2:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_setcc:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    seto %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setno %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setb %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setae %dil # sched: [1:0.50]
; BROADWELL-NEXT:    sete %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setne %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setbe %dil # sched: [2:0.50]
; BROADWELL-NEXT:    seta %dil # sched: [2:0.50]
; BROADWELL-NEXT:    sets %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setns %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setp %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setnp %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setl %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setge %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setle %dil # sched: [1:0.50]
; BROADWELL-NEXT:    setg %dil # sched: [1:0.50]
; BROADWELL-NEXT:    seto (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setno (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setb (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setae (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    sete (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setne (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setbe (%rsi) # sched: [3:1.00]
; BROADWELL-NEXT:    seta (%rsi) # sched: [3:1.00]
; BROADWELL-NEXT:    sets (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setns (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setp (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setnp (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setl (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setge (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setle (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    setg (%rsi) # sched: [2:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_setcc:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    seto %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setno %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setb %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setae %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    sete %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setne %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setbe %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    seta %dil # sched: [2:1.00]
; SKYLAKE-NEXT:    sets %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setns %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setp %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setnp %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setl %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setge %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setle %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    setg %dil # sched: [1:0.50]
; SKYLAKE-NEXT:    seto (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setno (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setb (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setae (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    sete (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setne (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setbe (%rsi) # sched: [3:1.00]
; SKYLAKE-NEXT:    seta (%rsi) # sched: [3:1.00]
; SKYLAKE-NEXT:    sets (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setns (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setp (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setnp (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setl (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setge (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setle (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    setg (%rsi) # sched: [2:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_setcc:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    seto %dil # sched: [1:0.50]
; SKX-NEXT:    setno %dil # sched: [1:0.50]
; SKX-NEXT:    setb %dil # sched: [1:0.50]
; SKX-NEXT:    setae %dil # sched: [1:0.50]
; SKX-NEXT:    sete %dil # sched: [1:0.50]
; SKX-NEXT:    setne %dil # sched: [1:0.50]
; SKX-NEXT:    setbe %dil # sched: [2:1.00]
; SKX-NEXT:    seta %dil # sched: [2:1.00]
; SKX-NEXT:    sets %dil # sched: [1:0.50]
; SKX-NEXT:    setns %dil # sched: [1:0.50]
; SKX-NEXT:    setp %dil # sched: [1:0.50]
; SKX-NEXT:    setnp %dil # sched: [1:0.50]
; SKX-NEXT:    setl %dil # sched: [1:0.50]
; SKX-NEXT:    setge %dil # sched: [1:0.50]
; SKX-NEXT:    setle %dil # sched: [1:0.50]
; SKX-NEXT:    setg %dil # sched: [1:0.50]
; SKX-NEXT:    seto (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setno (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setb (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setae (%rsi) # sched: [2:1.00]
; SKX-NEXT:    sete (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setne (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setbe (%rsi) # sched: [3:1.00]
; SKX-NEXT:    seta (%rsi) # sched: [3:1.00]
; SKX-NEXT:    sets (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setns (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setp (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setnp (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setl (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setge (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setle (%rsi) # sched: [2:1.00]
; SKX-NEXT:    setg (%rsi) # sched: [2:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_setcc:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    seto %dil # sched: [1:0.50]
; BTVER2-NEXT:    setno %dil # sched: [1:0.50]
; BTVER2-NEXT:    setb %dil # sched: [1:0.50]
; BTVER2-NEXT:    setae %dil # sched: [1:0.50]
; BTVER2-NEXT:    sete %dil # sched: [1:0.50]
; BTVER2-NEXT:    setne %dil # sched: [1:0.50]
; BTVER2-NEXT:    setbe %dil # sched: [1:0.50]
; BTVER2-NEXT:    seta %dil # sched: [1:0.50]
; BTVER2-NEXT:    sets %dil # sched: [1:0.50]
; BTVER2-NEXT:    setns %dil # sched: [1:0.50]
; BTVER2-NEXT:    setp %dil # sched: [1:0.50]
; BTVER2-NEXT:    setnp %dil # sched: [1:0.50]
; BTVER2-NEXT:    setl %dil # sched: [1:0.50]
; BTVER2-NEXT:    setge %dil # sched: [1:0.50]
; BTVER2-NEXT:    setle %dil # sched: [1:0.50]
; BTVER2-NEXT:    setg %dil # sched: [1:0.50]
; BTVER2-NEXT:    seto (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setno (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setb (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setae (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    sete (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setne (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setbe (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    seta (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    sets (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setns (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setp (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setnp (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setl (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setge (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setle (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    setg (%rsi) # sched: [1:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_setcc:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    seto %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setno %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setb %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setae %dil # sched: [1:0.25]
; ZNVER1-NEXT:    sete %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setne %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setbe %dil # sched: [1:0.25]
; ZNVER1-NEXT:    seta %dil # sched: [1:0.25]
; ZNVER1-NEXT:    sets %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setns %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setp %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setnp %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setl %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setge %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setle %dil # sched: [1:0.25]
; ZNVER1-NEXT:    setg %dil # sched: [1:0.25]
; ZNVER1-NEXT:    seto (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setno (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setb (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setae (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    sete (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setne (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setbe (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    seta (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    sets (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setns (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setp (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setnp (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setl (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setge (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setle (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    setg (%rsi) # sched: [1:0.25]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "seto $0 \0A\09 setno $0 \0A\09 setb $0 \0A\09 setnb $0 \0A\09 setz $0 \0A\09 setnz $0 \0A\09 setbe $0 \0A\09 setnbe $0 \0A\09 sets $0 \0A\09 setns $0 \0A\09 setp $0 \0A\09 setnp $0 \0A\09 setl $0 \0A\09 setnl $0 \0A\09 setle $0 \0A\09 setnle $0 \0A\09 seto $1 \0A\09 setno $1 \0A\09 setb $1 \0A\09 setnb $1 \0A\09 setz $1 \0A\09 setnz $1 \0A\09 setbe $1 \0A\09 setnbe $1 \0A\09 sets $1 \0A\09 setns $1 \0A\09 setp $1 \0A\09 setnp $1 \0A\09 setl $1 \0A\09 setnl $1 \0A\09 setle $1 \0A\09 setnle $1", "r,*m"(i8 %a0, i8 *%a1)
  ret void
}

define void @test_shld_shrd_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_shld_shrd_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    shldw %cl, %si, %di # sched: [4:1.50]
; GENERIC-NEXT:    shrdw %cl, %si, %di # sched: [4:1.50]
; GENERIC-NEXT:    shldw %cl, %si, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shrdw %cl, %si, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shldw $7, %si, %di # sched: [2:0.67]
; GENERIC-NEXT:    shrdw $7, %si, %di # sched: [2:0.67]
; GENERIC-NEXT:    shldw $7, %si, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    shrdw $7, %si, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_shld_shrd_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    shldw %cl, %si, %di # sched: [6:3.00]
; ATOM-NEXT:    shrdw %cl, %si, %di # sched: [6:3.00]
; ATOM-NEXT:    shldw %cl, %si, (%rdx) # sched: [6:3.00]
; ATOM-NEXT:    shrdw %cl, %si, (%rdx) # sched: [6:3.00]
; ATOM-NEXT:    shldw $7, %si, %di # sched: [6:3.00]
; ATOM-NEXT:    shrdw $7, %si, %di # sched: [6:3.00]
; ATOM-NEXT:    shldw $7, %si, (%rdx) # sched: [6:3.00]
; ATOM-NEXT:    shrdw $7, %si, (%rdx) # sched: [6:3.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_shld_shrd_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    shldw %cl, %si, %di # sched: [1:1.00]
; SLM-NEXT:    shrdw %cl, %si, %di # sched: [1:1.00]
; SLM-NEXT:    shldw %cl, %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdw %cl, %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shldw $7, %si, %di # sched: [1:1.00]
; SLM-NEXT:    shrdw $7, %si, %di # sched: [1:1.00]
; SLM-NEXT:    shldw $7, %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdw $7, %si, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_shld_shrd_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    shldw %cl, %si, %di # sched: [4:1.50]
; SANDY-NEXT:    shrdw %cl, %si, %di # sched: [4:1.50]
; SANDY-NEXT:    shldw %cl, %si, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shrdw %cl, %si, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shldw $7, %si, %di # sched: [2:0.67]
; SANDY-NEXT:    shrdw $7, %si, %di # sched: [2:0.67]
; SANDY-NEXT:    shldw $7, %si, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    shrdw $7, %si, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_shld_shrd_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    shldw %cl, %si, %di # sched: [6:1.00]
; HASWELL-NEXT:    shrdw %cl, %si, %di # sched: [6:1.00]
; HASWELL-NEXT:    shldw %cl, %si, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shrdw %cl, %si, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shldw $7, %si, %di # sched: [3:1.00]
; HASWELL-NEXT:    shrdw $7, %si, %di # sched: [3:1.00]
; HASWELL-NEXT:    shldw $7, %si, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    shrdw $7, %si, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_shld_shrd_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    shldw %cl, %si, %di # sched: [6:1.00]
; BROADWELL-NEXT:    shrdw %cl, %si, %di # sched: [6:1.00]
; BROADWELL-NEXT:    shldw %cl, %si, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shrdw %cl, %si, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shldw $7, %si, %di # sched: [3:1.00]
; BROADWELL-NEXT:    shrdw $7, %si, %di # sched: [3:1.00]
; BROADWELL-NEXT:    shldw $7, %si, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    shrdw $7, %si, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_shld_shrd_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    shldw %cl, %si, %di # sched: [6:1.00]
; SKYLAKE-NEXT:    shrdw %cl, %si, %di # sched: [6:1.00]
; SKYLAKE-NEXT:    shldw %cl, %si, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shrdw %cl, %si, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shldw $7, %si, %di # sched: [3:1.00]
; SKYLAKE-NEXT:    shrdw $7, %si, %di # sched: [3:1.00]
; SKYLAKE-NEXT:    shldw $7, %si, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    shrdw $7, %si, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_shld_shrd_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    shldw %cl, %si, %di # sched: [6:1.00]
; SKX-NEXT:    shrdw %cl, %si, %di # sched: [6:1.00]
; SKX-NEXT:    shldw %cl, %si, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shrdw %cl, %si, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shldw $7, %si, %di # sched: [3:1.00]
; SKX-NEXT:    shrdw $7, %si, %di # sched: [3:1.00]
; SKX-NEXT:    shldw $7, %si, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    shrdw $7, %si, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_shld_shrd_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    shldw %cl, %si, %di # sched: [4:4.00]
; BTVER2-NEXT:    shrdw %cl, %si, %di # sched: [4:4.00]
; BTVER2-NEXT:    shldw %cl, %si, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdw %cl, %si, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shldw $7, %si, %di # sched: [3:3.00]
; BTVER2-NEXT:    shrdw $7, %si, %di # sched: [3:3.00]
; BTVER2-NEXT:    shldw $7, %si, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdw $7, %si, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_shld_shrd_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    shldw %cl, %si, %di # sched: [100:?]
; ZNVER1-NEXT:    shrdw %cl, %si, %di # sched: [100:?]
; ZNVER1-NEXT:    shldw %cl, %si, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shrdw %cl, %si, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shldw $7, %si, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shrdw $7, %si, %di # sched: [1:0.25]
; ZNVER1-NEXT:    shldw $7, %si, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrdw $7, %si, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "shld $1, $0 \0A\09 shrd $1, $0 \0A\09 shld $1, $2 \0A\09 shrd $1, $2 \0A\09 shld $3, $1, $0 \0A\09 shrd $3, $1, $0 \0A\09 shld $3, $1, $2 \0A\09 shrd $3, $1, $2", "r,r,*m,i"(i16 %a0, i16 %a1, i16 *%a2, i8 7)
  ret void
}
define void @test_shld_shrd_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_shld_shrd_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    shldl %cl, %esi, %edi # sched: [4:1.50]
; GENERIC-NEXT:    shrdl %cl, %esi, %edi # sched: [4:1.50]
; GENERIC-NEXT:    shldl %cl, %esi, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shldl $7, %esi, %edi # sched: [2:0.67]
; GENERIC-NEXT:    shrdl $7, %esi, %edi # sched: [2:0.67]
; GENERIC-NEXT:    shldl $7, %esi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    shrdl $7, %esi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_shld_shrd_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    shldl %cl, %esi, %edi # sched: [2:1.00]
; ATOM-NEXT:    shrdl %cl, %esi, %edi # sched: [2:1.00]
; ATOM-NEXT:    shldl %cl, %esi, (%rdx) # sched: [4:2.00]
; ATOM-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [4:2.00]
; ATOM-NEXT:    shldl $7, %esi, %edi # sched: [2:1.00]
; ATOM-NEXT:    shrdl $7, %esi, %edi # sched: [2:1.00]
; ATOM-NEXT:    shldl $7, %esi, (%rdx) # sched: [4:2.00]
; ATOM-NEXT:    shrdl $7, %esi, (%rdx) # sched: [4:2.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_shld_shrd_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    shldl %cl, %esi, %edi # sched: [1:1.00]
; SLM-NEXT:    shrdl %cl, %esi, %edi # sched: [1:1.00]
; SLM-NEXT:    shldl %cl, %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shldl $7, %esi, %edi # sched: [1:1.00]
; SLM-NEXT:    shrdl $7, %esi, %edi # sched: [1:1.00]
; SLM-NEXT:    shldl $7, %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdl $7, %esi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_shld_shrd_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    shldl %cl, %esi, %edi # sched: [4:1.50]
; SANDY-NEXT:    shrdl %cl, %esi, %edi # sched: [4:1.50]
; SANDY-NEXT:    shldl %cl, %esi, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shldl $7, %esi, %edi # sched: [2:0.67]
; SANDY-NEXT:    shrdl $7, %esi, %edi # sched: [2:0.67]
; SANDY-NEXT:    shldl $7, %esi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    shrdl $7, %esi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_shld_shrd_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    shldl %cl, %esi, %edi # sched: [6:1.00]
; HASWELL-NEXT:    shrdl %cl, %esi, %edi # sched: [6:1.00]
; HASWELL-NEXT:    shldl %cl, %esi, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shldl $7, %esi, %edi # sched: [3:1.00]
; HASWELL-NEXT:    shrdl $7, %esi, %edi # sched: [3:1.00]
; HASWELL-NEXT:    shldl $7, %esi, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    shrdl $7, %esi, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_shld_shrd_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    shldl %cl, %esi, %edi # sched: [6:1.00]
; BROADWELL-NEXT:    shrdl %cl, %esi, %edi # sched: [6:1.00]
; BROADWELL-NEXT:    shldl %cl, %esi, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shldl $7, %esi, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    shrdl $7, %esi, %edi # sched: [3:1.00]
; BROADWELL-NEXT:    shldl $7, %esi, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    shrdl $7, %esi, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_shld_shrd_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    shldl %cl, %esi, %edi # sched: [6:1.00]
; SKYLAKE-NEXT:    shrdl %cl, %esi, %edi # sched: [6:1.00]
; SKYLAKE-NEXT:    shldl %cl, %esi, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shldl $7, %esi, %edi # sched: [3:1.00]
; SKYLAKE-NEXT:    shrdl $7, %esi, %edi # sched: [3:1.00]
; SKYLAKE-NEXT:    shldl $7, %esi, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    shrdl $7, %esi, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_shld_shrd_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    shldl %cl, %esi, %edi # sched: [6:1.00]
; SKX-NEXT:    shrdl %cl, %esi, %edi # sched: [6:1.00]
; SKX-NEXT:    shldl %cl, %esi, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shldl $7, %esi, %edi # sched: [3:1.00]
; SKX-NEXT:    shrdl $7, %esi, %edi # sched: [3:1.00]
; SKX-NEXT:    shldl $7, %esi, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    shrdl $7, %esi, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_shld_shrd_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    shldl %cl, %esi, %edi # sched: [4:4.00]
; BTVER2-NEXT:    shrdl %cl, %esi, %edi # sched: [4:4.00]
; BTVER2-NEXT:    shldl %cl, %esi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shldl $7, %esi, %edi # sched: [3:3.00]
; BTVER2-NEXT:    shrdl $7, %esi, %edi # sched: [3:3.00]
; BTVER2-NEXT:    shldl $7, %esi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdl $7, %esi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_shld_shrd_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    shldl %cl, %esi, %edi # sched: [100:?]
; ZNVER1-NEXT:    shrdl %cl, %esi, %edi # sched: [100:?]
; ZNVER1-NEXT:    shldl %cl, %esi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shrdl %cl, %esi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shldl $7, %esi, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shrdl $7, %esi, %edi # sched: [1:0.25]
; ZNVER1-NEXT:    shldl $7, %esi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrdl $7, %esi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "shld $1, $0 \0A\09 shrd $1, $0 \0A\09 shld $1, $2 \0A\09 shrd $1, $2 \0A\09 shld $3, $1, $0 \0A\09 shrd $3, $1, $0 \0A\09 shld $3, $1, $2 \0A\09 shrd $3, $1, $2", "r,r,*m,i"(i32 %a0, i32 %a1, i32 *%a2, i8 7)
  ret void
}
define void @test_shld_shrd_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_shld_shrd_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    shldq %cl, %rsi, %rdi # sched: [4:1.50]
; GENERIC-NEXT:    shrdq %cl, %rsi, %rdi # sched: [4:1.50]
; GENERIC-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [10:1.50]
; GENERIC-NEXT:    shldq $7, %rsi, %rdi # sched: [2:0.67]
; GENERIC-NEXT:    shrdq $7, %rsi, %rdi # sched: [2:0.67]
; GENERIC-NEXT:    shldq $7, %rsi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_shld_shrd_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    shldq %cl, %rsi, %rdi # sched: [8:4.00]
; ATOM-NEXT:    shrdq %cl, %rsi, %rdi # sched: [8:4.00]
; ATOM-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    shldq $7, %rsi, %rdi # sched: [9:4.50]
; ATOM-NEXT:    shrdq $7, %rsi, %rdi # sched: [9:4.50]
; ATOM-NEXT:    shldq $7, %rsi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [9:4.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_shld_shrd_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    shldq %cl, %rsi, %rdi # sched: [1:1.00]
; SLM-NEXT:    shrdq %cl, %rsi, %rdi # sched: [1:1.00]
; SLM-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shldq $7, %rsi, %rdi # sched: [1:1.00]
; SLM-NEXT:    shrdq $7, %rsi, %rdi # sched: [1:1.00]
; SLM-NEXT:    shldq $7, %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_shld_shrd_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    shldq %cl, %rsi, %rdi # sched: [4:1.50]
; SANDY-NEXT:    shrdq %cl, %rsi, %rdi # sched: [4:1.50]
; SANDY-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [10:1.50]
; SANDY-NEXT:    shldq $7, %rsi, %rdi # sched: [2:0.67]
; SANDY-NEXT:    shrdq $7, %rsi, %rdi # sched: [2:0.67]
; SANDY-NEXT:    shldq $7, %rsi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_shld_shrd_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    shldq %cl, %rsi, %rdi # sched: [6:1.00]
; HASWELL-NEXT:    shrdq %cl, %rsi, %rdi # sched: [6:1.00]
; HASWELL-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [12:1.00]
; HASWELL-NEXT:    shldq $7, %rsi, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    shrdq $7, %rsi, %rdi # sched: [3:1.00]
; HASWELL-NEXT:    shldq $7, %rsi, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [10:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_shld_shrd_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    shldq %cl, %rsi, %rdi # sched: [6:1.00]
; BROADWELL-NEXT:    shrdq %cl, %rsi, %rdi # sched: [6:1.00]
; BROADWELL-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [11:1.00]
; BROADWELL-NEXT:    shldq $7, %rsi, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    shrdq $7, %rsi, %rdi # sched: [3:1.00]
; BROADWELL-NEXT:    shldq $7, %rsi, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [9:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_shld_shrd_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    shldq %cl, %rsi, %rdi # sched: [6:1.00]
; SKYLAKE-NEXT:    shrdq %cl, %rsi, %rdi # sched: [6:1.00]
; SKYLAKE-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [11:1.00]
; SKYLAKE-NEXT:    shldq $7, %rsi, %rdi # sched: [3:1.00]
; SKYLAKE-NEXT:    shrdq $7, %rsi, %rdi # sched: [3:1.00]
; SKYLAKE-NEXT:    shldq $7, %rsi, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [9:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_shld_shrd_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    shldq %cl, %rsi, %rdi # sched: [6:1.00]
; SKX-NEXT:    shrdq %cl, %rsi, %rdi # sched: [6:1.00]
; SKX-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [11:1.00]
; SKX-NEXT:    shldq $7, %rsi, %rdi # sched: [3:1.00]
; SKX-NEXT:    shrdq $7, %rsi, %rdi # sched: [3:1.00]
; SKX-NEXT:    shldq $7, %rsi, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [9:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_shld_shrd_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    shldq %cl, %rsi, %rdi # sched: [4:4.00]
; BTVER2-NEXT:    shrdq %cl, %rsi, %rdi # sched: [4:4.00]
; BTVER2-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shldq $7, %rsi, %rdi # sched: [3:3.00]
; BTVER2-NEXT:    shrdq $7, %rsi, %rdi # sched: [3:3.00]
; BTVER2-NEXT:    shldq $7, %rsi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [9:11.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_shld_shrd_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    shldq %cl, %rsi, %rdi # sched: [100:?]
; ZNVER1-NEXT:    shrdq %cl, %rsi, %rdi # sched: [100:?]
; ZNVER1-NEXT:    shldq %cl, %rsi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shrdq %cl, %rsi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    shldq $7, %rsi, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shrdq $7, %rsi, %rdi # sched: [1:0.25]
; ZNVER1-NEXT:    shldq $7, %rsi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    shrdq $7, %rsi, (%rdx) # sched: [5:0.50]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "shld $1, $0 \0A\09 shrd $1, $0 \0A\09 shld $1, $2 \0A\09 shrd $1, $2 \0A\09 shld $3, $1, $0 \0A\09 shrd $3, $1, $0 \0A\09 shld $3, $1, $2 \0A\09 shrd $3, $1, $2", "r,r,*m,i"(i64 %a0, i64 %a1, i64 *%a2, i8 7)
  ret void
}

define void @test_stc_std() optsize {
; GENERIC-LABEL: test_stc_std:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    stc # sched: [1:0.33]
; GENERIC-NEXT:    std # sched: [1:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_stc_std:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    stc # sched: [1:0.50]
; ATOM-NEXT:    std # sched: [21:10.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_stc_std:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    stc # sched: [1:0.50]
; SLM-NEXT:    std # sched: [1:0.50]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_stc_std:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    stc # sched: [1:0.33]
; SANDY-NEXT:    std # sched: [1:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_stc_std:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    stc # sched: [1:0.25]
; HASWELL-NEXT:    std # sched: [6:1.50]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_stc_std:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    stc # sched: [1:0.25]
; BROADWELL-NEXT:    std # sched: [6:1.50]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_stc_std:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    stc # sched: [1:0.25]
; SKYLAKE-NEXT:    std # sched: [6:1.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_stc_std:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    stc # sched: [1:0.25]
; SKX-NEXT:    std # sched: [6:1.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_stc_std:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    stc # sched: [1:0.50]
; BTVER2-NEXT:    std # sched: [1:0.50]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_stc_std:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    stc # sched: [1:0.25]
; ZNVER1-NEXT:    std # sched: [1:0.25]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "stc \0A\09 std", ""()
  ret void
}

define void @test_stos() optsize {
; GENERIC-LABEL: test_stos:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    stosb %al, %es:(%rdi) # sched: [5:1.00]
; GENERIC-NEXT:    stosw %ax, %es:(%rdi) # sched: [5:1.00]
; GENERIC-NEXT:    stosl %eax, %es:(%rdi) # sched: [5:1.00]
; GENERIC-NEXT:    stosq %rax, %es:(%rdi) # sched: [5:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_stos:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    stosb %al, %es:(%rdi) # sched: [1:0.50]
; ATOM-NEXT:    stosw %ax, %es:(%rdi) # sched: [1:0.50]
; ATOM-NEXT:    stosl %eax, %es:(%rdi) # sched: [1:0.50]
; ATOM-NEXT:    stosq %rax, %es:(%rdi) # sched: [1:0.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_stos:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    stosb %al, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    stosw %ax, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    stosl %eax, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    stosq %rax, %es:(%rdi) # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_stos:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    stosb %al, %es:(%rdi) # sched: [5:1.00]
; SANDY-NEXT:    stosw %ax, %es:(%rdi) # sched: [5:1.00]
; SANDY-NEXT:    stosl %eax, %es:(%rdi) # sched: [5:1.00]
; SANDY-NEXT:    stosq %rax, %es:(%rdi) # sched: [5:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_stos:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    stosb %al, %es:(%rdi) # sched: [2:1.00]
; HASWELL-NEXT:    stosw %ax, %es:(%rdi) # sched: [2:1.00]
; HASWELL-NEXT:    stosl %eax, %es:(%rdi) # sched: [2:1.00]
; HASWELL-NEXT:    stosq %rax, %es:(%rdi) # sched: [2:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_stos:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    stosb %al, %es:(%rdi) # sched: [2:1.00]
; BROADWELL-NEXT:    stosw %ax, %es:(%rdi) # sched: [2:1.00]
; BROADWELL-NEXT:    stosl %eax, %es:(%rdi) # sched: [2:1.00]
; BROADWELL-NEXT:    stosq %rax, %es:(%rdi) # sched: [2:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_stos:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    stosb %al, %es:(%rdi) # sched: [2:1.00]
; SKYLAKE-NEXT:    stosw %ax, %es:(%rdi) # sched: [2:1.00]
; SKYLAKE-NEXT:    stosl %eax, %es:(%rdi) # sched: [2:1.00]
; SKYLAKE-NEXT:    stosq %rax, %es:(%rdi) # sched: [2:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_stos:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    stosb %al, %es:(%rdi) # sched: [2:1.00]
; SKX-NEXT:    stosw %ax, %es:(%rdi) # sched: [2:1.00]
; SKX-NEXT:    stosl %eax, %es:(%rdi) # sched: [2:1.00]
; SKX-NEXT:    stosq %rax, %es:(%rdi) # sched: [2:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_stos:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    stosb %al, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    stosw %ax, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    stosl %eax, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    stosq %rax, %es:(%rdi) # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_stos:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    stosb %al, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    stosw %ax, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    stosl %eax, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    stosq %rax, %es:(%rdi) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "stosb \0A\09 stosw \0A\09 stosl \0A\09 stosq", ""()
  ret void
}

; TODO - test_sub
; TODO - test_test

; TODO: ud0, ud1
define void @test_ud2() optsize {
; GENERIC-LABEL: test_ud2:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    ud2 # sched: [100:0.33]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_ud2:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    ud2
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_ud2:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    ud2 # sched: [100:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_ud2:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    ud2 # sched: [100:0.33]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_ud2:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    ud2 # sched: [100:0.25]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_ud2:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    ud2 # sched: [100:0.25]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_ud2:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    ud2 # sched: [100:0.25]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_ud2:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    ud2 # sched: [100:0.25]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_ud2:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    ud2 # sched: [100:0.17]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_ud2:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    ud2 # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  call void asm sideeffect "ud2", ""()
  ret void
}

define void @test_xadd_8(i8 %a0, i8 %a1, i8 *%a2) optsize {
; GENERIC-LABEL: test_xadd_8:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    xaddb %dil, %sil # sched: [3:1.00]
; GENERIC-NEXT:    xaddb %dil, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_xadd_8:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    xaddb %dil, %sil # sched: [2:1.00]
; ATOM-NEXT:    xaddb %dil, (%rdx) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_xadd_8:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    xaddb %dil, %sil # sched: [1:0.50]
; SLM-NEXT:    xaddb %dil, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_xadd_8:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    xaddb %dil, %sil # sched: [3:1.00]
; SANDY-NEXT:    xaddb %dil, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_xadd_8:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    xaddb %dil, %sil # sched: [3:0.75]
; HASWELL-NEXT:    xaddb %dil, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_xadd_8:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    xaddb %dil, %sil # sched: [3:0.75]
; BROADWELL-NEXT:    xaddb %dil, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_xadd_8:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    xaddb %dil, %sil # sched: [3:0.75]
; SKYLAKE-NEXT:    xaddb %dil, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_xadd_8:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    xaddb %dil, %sil # sched: [3:0.75]
; SKX-NEXT:    xaddb %dil, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_xadd_8:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    xaddb %dil, %sil # sched: [1:0.50]
; BTVER2-NEXT:    xaddb %dil, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_xadd_8:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    xaddb %dil, %sil # sched: [1:0.25]
; ZNVER1-NEXT:    xaddb %dil, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "xaddb $0, $1 \0A\09 xaddb $0, $2", "r,r,*m"(i8 %a0, i8 %a1, i8 *%a2) nounwind
  ret void
}
define void @test_xadd_16(i16 %a0, i16 %a1, i16 *%a2) optsize {
; GENERIC-LABEL: test_xadd_16:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    xaddw %di, %si # sched: [3:1.00]
; GENERIC-NEXT:    xaddw %di, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_xadd_16:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    xaddw %di, %si # sched: [2:1.00]
; ATOM-NEXT:    xaddw %di, (%rdx) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_xadd_16:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    xaddw %di, %si # sched: [1:0.50]
; SLM-NEXT:    xaddw %di, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_xadd_16:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    xaddw %di, %si # sched: [3:1.00]
; SANDY-NEXT:    xaddw %di, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_xadd_16:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    xaddw %di, %si # sched: [3:0.75]
; HASWELL-NEXT:    xaddw %di, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_xadd_16:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    xaddw %di, %si # sched: [3:0.75]
; BROADWELL-NEXT:    xaddw %di, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_xadd_16:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    xaddw %di, %si # sched: [3:0.75]
; SKYLAKE-NEXT:    xaddw %di, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_xadd_16:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    xaddw %di, %si # sched: [3:0.75]
; SKX-NEXT:    xaddw %di, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_xadd_16:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    xaddw %di, %si # sched: [1:0.50]
; BTVER2-NEXT:    xaddw %di, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_xadd_16:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    xaddw %di, %si # sched: [1:0.25]
; ZNVER1-NEXT:    xaddw %di, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "xaddw $0, $1 \0A\09 xaddw $0, $2", "r,r,*m"(i16 %a0, i16 %a1, i16 *%a2) nounwind
  ret void
}
define void @test_xadd_32(i32 %a0, i32 %a1, i32 *%a2) optsize {
; GENERIC-LABEL: test_xadd_32:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    xaddl %edi, %esi # sched: [3:1.00]
; GENERIC-NEXT:    xaddl %edi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_xadd_32:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    xaddl %edi, %esi # sched: [2:1.00]
; ATOM-NEXT:    xaddl %edi, (%rdx) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_xadd_32:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    xaddl %edi, %esi # sched: [1:0.50]
; SLM-NEXT:    xaddl %edi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_xadd_32:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    xaddl %edi, %esi # sched: [3:1.00]
; SANDY-NEXT:    xaddl %edi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_xadd_32:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    xaddl %edi, %esi # sched: [3:0.75]
; HASWELL-NEXT:    xaddl %edi, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_xadd_32:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    xaddl %edi, %esi # sched: [3:0.75]
; BROADWELL-NEXT:    xaddl %edi, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_xadd_32:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    xaddl %edi, %esi # sched: [3:0.75]
; SKYLAKE-NEXT:    xaddl %edi, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_xadd_32:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    xaddl %edi, %esi # sched: [3:0.75]
; SKX-NEXT:    xaddl %edi, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_xadd_32:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    xaddl %edi, %esi # sched: [1:0.50]
; BTVER2-NEXT:    xaddl %edi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_xadd_32:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    xaddl %edi, %esi # sched: [1:0.25]
; ZNVER1-NEXT:    xaddl %edi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "xaddl $0, $1 \0A\09 xaddl $0, $2", "r,r,*m"(i32 %a0, i32 %a1, i32 *%a2) nounwind
  ret void
}
define void @test_xadd_64(i64 %a0, i64 %a1, i64 *%a2) optsize {
; GENERIC-LABEL: test_xadd_64:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    xaddq %rdi, %rsi # sched: [3:1.00]
; GENERIC-NEXT:    xaddq %rdi, (%rdx) # sched: [8:1.00]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_xadd_64:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    xaddq %rdi, %rsi # sched: [2:1.00]
; ATOM-NEXT:    xaddq %rdi, (%rdx) # sched: [3:1.50]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_xadd_64:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    xaddq %rdi, %rsi # sched: [1:0.50]
; SLM-NEXT:    xaddq %rdi, (%rdx) # sched: [4:2.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_xadd_64:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    xaddq %rdi, %rsi # sched: [3:1.00]
; SANDY-NEXT:    xaddq %rdi, (%rdx) # sched: [8:1.00]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_xadd_64:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    xaddq %rdi, %rsi # sched: [3:0.75]
; HASWELL-NEXT:    xaddq %rdi, (%rdx) # sched: [8:1.00]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_xadd_64:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    xaddq %rdi, %rsi # sched: [3:0.75]
; BROADWELL-NEXT:    xaddq %rdi, (%rdx) # sched: [7:1.00]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_xadd_64:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    xaddq %rdi, %rsi # sched: [3:0.75]
; SKYLAKE-NEXT:    xaddq %rdi, (%rdx) # sched: [7:1.00]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_xadd_64:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    xaddq %rdi, %rsi # sched: [3:0.75]
; SKX-NEXT:    xaddq %rdi, (%rdx) # sched: [7:1.00]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_xadd_64:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    xaddq %rdi, %rsi # sched: [1:0.50]
; BTVER2-NEXT:    xaddq %rdi, (%rdx) # sched: [4:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_xadd_64:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    xaddq %rdi, %rsi # sched: [1:0.25]
; ZNVER1-NEXT:    xaddq %rdi, (%rdx) # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "xaddq $0, $1 \0A\09 xaddq $0, $2", "r,r,*m"(i64 %a0, i64 %a1, i64 *%a2) nounwind
  ret void
}

; TODO - test_xchg

define void @test_xlat() optsize {
; GENERIC-LABEL: test_xlat:
; GENERIC:       # %bb.0:
; GENERIC-NEXT:    #APP
; GENERIC-NEXT:    xlatb # sched: [4:0.50]
; GENERIC-NEXT:    #NO_APP
; GENERIC-NEXT:    retq # sched: [1:1.00]
;
; ATOM-LABEL: test_xlat:
; ATOM:       # %bb.0:
; ATOM-NEXT:    #APP
; ATOM-NEXT:    xlatb # sched: [6:3.00]
; ATOM-NEXT:    #NO_APP
; ATOM-NEXT:    retq # sched: [79:39.50]
;
; SLM-LABEL: test_xlat:
; SLM:       # %bb.0:
; SLM-NEXT:    #APP
; SLM-NEXT:    xlatb # sched: [3:1.00]
; SLM-NEXT:    #NO_APP
; SLM-NEXT:    retq # sched: [4:1.00]
;
; SANDY-LABEL: test_xlat:
; SANDY:       # %bb.0:
; SANDY-NEXT:    #APP
; SANDY-NEXT:    xlatb # sched: [4:0.50]
; SANDY-NEXT:    #NO_APP
; SANDY-NEXT:    retq # sched: [1:1.00]
;
; HASWELL-LABEL: test_xlat:
; HASWELL:       # %bb.0:
; HASWELL-NEXT:    #APP
; HASWELL-NEXT:    xlatb # sched: [7:?]
; HASWELL-NEXT:    #NO_APP
; HASWELL-NEXT:    retq # sched: [7:1.00]
;
; BROADWELL-LABEL: test_xlat:
; BROADWELL:       # %bb.0:
; BROADWELL-NEXT:    #APP
; BROADWELL-NEXT:    xlatb # sched: [5:0.50]
; BROADWELL-NEXT:    #NO_APP
; BROADWELL-NEXT:    retq # sched: [7:1.00]
;
; SKYLAKE-LABEL: test_xlat:
; SKYLAKE:       # %bb.0:
; SKYLAKE-NEXT:    #APP
; SKYLAKE-NEXT:    xlatb # sched: [5:0.50]
; SKYLAKE-NEXT:    #NO_APP
; SKYLAKE-NEXT:    retq # sched: [7:1.00]
;
; SKX-LABEL: test_xlat:
; SKX:       # %bb.0:
; SKX-NEXT:    #APP
; SKX-NEXT:    xlatb # sched: [5:0.50]
; SKX-NEXT:    #NO_APP
; SKX-NEXT:    retq # sched: [7:1.00]
;
; BTVER2-LABEL: test_xlat:
; BTVER2:       # %bb.0:
; BTVER2-NEXT:    #APP
; BTVER2-NEXT:    xlatb # sched: [5:1.00]
; BTVER2-NEXT:    #NO_APP
; BTVER2-NEXT:    retq # sched: [4:1.00]
;
; ZNVER1-LABEL: test_xlat:
; ZNVER1:       # %bb.0:
; ZNVER1-NEXT:    #APP
; ZNVER1-NEXT:    xlatb # sched: [100:?]
; ZNVER1-NEXT:    #NO_APP
; ZNVER1-NEXT:    retq # sched: [1:0.50]
  tail call void asm "xlat", ""() nounwind
  ret void
}

; TODO - test_xor
