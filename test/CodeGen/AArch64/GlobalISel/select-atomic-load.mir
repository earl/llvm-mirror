# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=aarch64-- -run-pass=instruction-select -verify-machineinstrs -global-isel %s -o - | FileCheck %s

--- |
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

  define void @load_s8_gpr_unordered(i64* %addr) { ret void }
  define void @load_s8_gpr_monotonic(i64* %addr) { ret void }
  define void @load_s8_gpr_acquire(i64* %addr) { ret void }
  define void @load_s8_gpr_release(i64* %addr) { ret void }
  define void @load_s8_gpr_acq_rel(i64* %addr) { ret void }
  define void @load_s8_gpr_seq_cst(i64* %addr) { ret void }

  define void @load_s32_gpr_unordered(i64* %addr) { ret void }
  define void @load_s32_gpr_monotonic(i64* %addr) { ret void }
  define void @load_s32_gpr_acquire(i64* %addr) { ret void }
  define void @load_s32_gpr_release(i64* %addr) { ret void }
  define void @load_s32_gpr_acq_rel(i64* %addr) { ret void }
  define void @load_s32_gpr_seq_cst(i64* %addr) { ret void }

  define void @load_s64_gpr_unordered(i64* %addr) { ret void }
  define void @load_s64_gpr_monotonic(i64* %addr) { ret void }
  define void @load_s64_gpr_acquire(i64* %addr) { ret void }
  define void @load_s64_gpr_release(i64* %addr) { ret void }
  define void @load_s64_gpr_acq_rel(i64* %addr) { ret void }
  define void @load_s64_gpr_seq_cst(i64* %addr) { ret void }
...

---
name:            load_s8_gpr_unordered
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_unordered
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRBBui [[COPY]], 0 :: (load release 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load release 4 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s8_gpr_monotonic
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_monotonic
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRBBui [[COPY]], 0 :: (load release 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load release 4 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s8_gpr_acquire
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_acquire
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARB [[COPY]] :: (load acquire 1 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load acquire 1 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s8_gpr_release
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_release
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRBBui [[COPY]], 0 :: (load release 1 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load release 1 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s8_gpr_acq_rel
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_acq_rel
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARB [[COPY]] :: (load acq_rel 1 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load acq_rel 1 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s8_gpr_seq_cst
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s8_gpr_seq_cst
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARB [[COPY]] :: (load seq_cst 1 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s8) = G_ATOMIC_LOAD  %0 :: (load seq_cst 1 from %ir.addr)
    %2:gpr(s32) = G_ANYEXT %1
    %x0 = COPY %2(s32)
...

---
name:            load_s32_gpr_unordered
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_unordered
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRWui [[COPY]], 0 :: (load release 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load release 4 from %ir.addr)
    %x0 = COPY %1(s32)
...

---
name:            load_s32_gpr_monotonic
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_monotonic
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRWui [[COPY]], 0 :: (load release 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load release 4 from %ir.addr)
    %x0 = COPY %1(s32)
...

---
name:            load_s32_gpr_acquire
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_acquire
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARW [[COPY]] :: (load acquire 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load acquire 4 from %ir.addr)
    %x0 = COPY %1(s32)
...

---
name:            load_s32_gpr_release
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_release
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDRWui [[COPY]], 0 :: (load release 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load release 4 from %ir.addr)
    %x0 = COPY %1(s32)
...

---
name:            load_s32_gpr_acq_rel
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_acq_rel
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARW [[COPY]] :: (load acq_rel 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load acq_rel 4 from %ir.addr)
    %x0 = COPY %1(s32)
...

---
name:            load_s32_gpr_seq_cst
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s32_gpr_seq_cst
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[T0:%[0-9]+]]:gpr32 = LDARW [[COPY]] :: (load seq_cst 4 from %ir.addr)
    ; CHECK: %x0 = COPY [[T0]]
    %0(p0) = COPY %x0
    %1(s32) = G_ATOMIC_LOAD  %0 :: (load seq_cst 4 from %ir.addr)
    %x0 = COPY %1(s32)
...


---
name:            load_s64_gpr_unordered
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_unordered
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDRXui [[COPY]], 0 :: (load release 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load release 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

---
name:            load_s64_gpr_monotonic
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_monotonic
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDRXui [[COPY]], 0 :: (load release 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load release 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

---
name:            load_s64_gpr_acquire
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_acquire
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDARX [[COPY]] :: (load acquire 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load acquire 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

---
name:            load_s64_gpr_release
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_release
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDRXui [[COPY]], 0 :: (load release 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load release 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

---
name:            load_s64_gpr_acq_rel
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_acq_rel
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDARX [[COPY]] :: (load acq_rel 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load acq_rel 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

---
name:            load_s64_gpr_seq_cst
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }

body:             |
  bb.0:
    liveins: %x0

    ; CHECK-LABEL: name: load_s64_gpr_seq_cst
    ; CHECK: [[COPY:%[0-9]+]]:gpr64sp = COPY %x0
    ; CHECK: [[LDRXui:%[0-9]+]]:gpr64 = LDARX [[COPY]] :: (load seq_cst 8 from %ir.addr)
    ; CHECK: %x0 = COPY [[LDRXui]]
    %0(p0) = COPY %x0
    %1(s64) = G_ATOMIC_LOAD  %0 :: (load seq_cst 8 from %ir.addr)
    %x0 = COPY %1(s64)
...

