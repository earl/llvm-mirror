# RUN: llc -O0 -run-pass=legalizer -global-isel %s -o - | FileCheck %s

--- |
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64--"
  define void @test_load(i8* %addr) {
  entry:
    ret void
  }
  define void @test_store(i8* %addr) {
  entry:
    ret void
  }
...

---
name:            test_load
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
body: |
  bb.0.entry:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_load
    %0(p0) = COPY %x0

    ; CHECK: %1:_(s8) = G_ATOMIC_LOAD %0(p0) :: (load unordered 1 from %ir.addr)
    %1(s8) = G_ATOMIC_LOAD %0 :: (load unordered 1 from %ir.addr)
    %10:_(s32) = G_ANYEXT %1
    %w0 = COPY %10

    ; CHECK: %2:_(s16) = G_ATOMIC_LOAD %0(p0) :: (load unordered 2 from %ir.addr)
    %2(s16) = G_ATOMIC_LOAD %0 :: (load unordered 2 from %ir.addr)
    %11:_(s32) = G_ANYEXT %2
    %w0 = COPY %11

    ; CHECK: %3:_(s32) = G_ATOMIC_LOAD %0(p0) :: (load unordered 4 from %ir.addr)
    %3(s32) = G_ATOMIC_LOAD %0 :: (load unordered 4 from %ir.addr)
    %w0 = COPY %3

    ; CHECK: %4:_(s64) = G_ATOMIC_LOAD %0(p0) :: (load unordered 8 from %ir.addr)
    %4(s64) = G_ATOMIC_LOAD %0 :: (load unordered 8 from %ir.addr)
    %x0 = COPY %4

    %5(p0) = G_ATOMIC_LOAD %0(p0) :: (load unordered 8 from %ir.addr)
    %12:_(s64) = G_PTRTOINT %5
    %x0 = COPY %12
...

---
name:            test_store
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
body: |
  bb.0.entry:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_store

    %0(p0) = COPY %x0
    %1(s32) = COPY %w1

    ; CHECK: G_ATOMIC_STORE %2(s8), %0(p0) :: (store unordered 1 into %ir.addr)
    %2(s8) = G_TRUNC %1
    G_ATOMIC_STORE %2, %0 :: (store unordered 1 into %ir.addr)

    ; CHECK: G_ATOMIC_STORE %3(s16), %0(p0) :: (store unordered 2 into %ir.addr)
    %3(s16) = G_TRUNC %1
    G_ATOMIC_STORE %3, %0 :: (store unordered 2 into %ir.addr)

    ; CHECK: G_ATOMIC_STORE %1(s32), %0(p0) :: (store unordered 4 into %ir.addr)
    G_ATOMIC_STORE %1, %0 :: (store unordered 4 into %ir.addr)

    ; CHECK: G_ATOMIC_STORE %4(s64), %0(p0) :: (store unordered 8 into %ir.addr)
    %4(s64) = G_PTRTOINT %0(p0)
    G_ATOMIC_STORE %4, %0 :: (store unordered 8 into %ir.addr)

    ; CHECK: G_ATOMIC_STORE %0(p0), %0(p0) :: (store unordered 8 into %ir.addr)
    G_ATOMIC_STORE %0(p0), %0(p0) :: (store unordered 8 into %ir.addr)
...
