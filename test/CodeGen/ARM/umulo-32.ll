; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=thumbv6-unknown-linux-gnu | FileCheck %s

%umul.ty = type { i32, i1 }

define i32 @test1(i32 %a, i1 %x) nounwind {
; CHECK-LABEL: test1:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    push {r4, r5, r7, lr}
; CHECK-NEXT:    mov r5, r1
; CHECK-NEXT:    movs r2, #37
; CHECK-NEXT:    movs r4, #0
; CHECK-NEXT:    mov r1, r4
; CHECK-NEXT:    mov r3, r4
; CHECK-NEXT:    bl __muldi3
; CHECK-NEXT:    lsls r1, r5, #31
; CHECK-NEXT:    beq .LBB0_2
; CHECK-NEXT:  @ %bb.1:
; CHECK-NEXT:    mvns r0, r4
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    pop {r4, r5, r7, pc}
  %tmp0 = tail call %umul.ty @llvm.umul.with.overflow.i32(i32 %a, i32 37)
  %tmp1 = extractvalue %umul.ty %tmp0, 0
  %tmp2 = select i1 %x, i32 -1, i32 %tmp1
  ret i32 %tmp2
}

declare %umul.ty @llvm.umul.with.overflow.i32(i32, i32) nounwind readnone

define i32 @test2(i32 %argc, i8** %argv) ssp {
; CHECK-LABEL: test2:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    push {r4, lr}
; CHECK-NEXT:    sub sp, #16
; CHECK-NEXT:    str r0, [sp, #8]
; CHECK-NEXT:    movs r4, #0
; CHECK-NEXT:    str r4, [sp, #12]
; CHECK-NEXT:    str r1, [sp, #4]
; CHECK-NEXT:    movs r0, #10
; CHECK-NEXT:    str r0, [sp]
; CHECK-NEXT:    movs r2, #8
; CHECK-NEXT:    mov r1, r4
; CHECK-NEXT:    mov r3, r4
; CHECK-NEXT:    bl __muldi3
; CHECK-NEXT:    cmp r1, #0
; CHECK-NEXT:    beq .LBB1_2
; CHECK-NEXT:  @ %bb.1:
; CHECK-NEXT:    movs r1, #1
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    cmp r1, #0
; CHECK-NEXT:    beq .LBB1_4
; CHECK-NEXT:  @ %bb.3:
; CHECK-NEXT:    mvns r0, r4
; CHECK-NEXT:  .LBB1_4:
; CHECK-NEXT:    bl _Znam
; CHECK-NEXT:    mov r0, r4
; CHECK-NEXT:    add sp, #16
; CHECK-NEXT:    pop {r4, pc}
%1 = alloca i32, align 4
%2 = alloca i32, align 4
%3 = alloca i8**, align 4
%m_degree = alloca i32, align 4
store i32 0, i32* %1
store i32 %argc, i32* %2, align 4
store i8** %argv, i8*** %3, align 4
store i32 10, i32* %m_degree, align 4
%4 = load i32, i32* %m_degree, align 4
%5 = call %umul.ty @llvm.umul.with.overflow.i32(i32 %4, i32 8)
%6 = extractvalue %umul.ty %5, 1
%7 = extractvalue %umul.ty %5, 0
%8 = select i1 %6, i32 -1, i32 %7
%9 = call noalias i8* @_Znam(i32 %8)
%10 = bitcast i8* %9 to double*
ret i32 0
}

declare noalias i8* @_Znam(i32)
