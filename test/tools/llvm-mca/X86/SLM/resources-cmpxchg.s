# NOTE: Assertions have been autogenerated by utils/update_mca_test_checks.py
# RUN: llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=slm -instruction-tables < %s | FileCheck %s

cmpxchg8b  (%rax)
cmpxchg16b (%rax)
lock cmpxchg8b  (%rax)
lock cmpxchg16b (%rax)

cmpxchgb  %bl, %cl
cmpxchgw  %bx, %cx
cmpxchgl  %ebx, %ecx
cmpxchgq  %rbx, %rcx

cmpxchgb  %bl, (%rsi)
cmpxchgw  %bx, (%rsi)
cmpxchgl  %ebx, (%rsi)
cmpxchgq  %rbx, (%rsi)

lock cmpxchgb  %bl, (%rsi)
lock cmpxchgw  %bx, (%rsi)
lock cmpxchgl  %ebx, (%rsi)
lock cmpxchgq  %rbx, (%rsi)

# CHECK:      Instruction Info:
# CHECK-NEXT: [1]: #uOps
# CHECK-NEXT: [2]: Latency
# CHECK-NEXT: [3]: RThroughput
# CHECK-NEXT: [4]: MayLoad
# CHECK-NEXT: [5]: MayStore
# CHECK-NEXT: [6]: HasSideEffects (U)

# CHECK:      [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchg8b	(%rax)
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchg16b	(%rax)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchg8b	(%rax)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchg16b	(%rax)
# CHECK-NEXT:  1      1     0.50                        cmpxchgb	%bl, %cl
# CHECK-NEXT:  1      1     0.50                        cmpxchgw	%bx, %cx
# CHECK-NEXT:  1      1     0.50                        cmpxchgl	%ebx, %ecx
# CHECK-NEXT:  1      1     0.50                        cmpxchgq	%rbx, %rcx
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchgb	%bl, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchgw	%bx, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchgl	%ebx, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            cmpxchgq	%rbx, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchgb	%bl, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchgw	%bx, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchgl	%ebx, (%rsi)
# CHECK-NEXT:  2      4     2.00    *      *            lock		cmpxchgq	%rbx, (%rsi)

# CHECK:      Resources:
# CHECK-NEXT: [0]   - SLMDivider
# CHECK-NEXT: [1]   - SLMFPDivider
# CHECK-NEXT: [2]   - SLMFPMultiplier
# CHECK-NEXT: [3]   - SLM_FPC_RSV0
# CHECK-NEXT: [4]   - SLM_FPC_RSV1
# CHECK-NEXT: [5]   - SLM_IEC_RSV0
# CHECK-NEXT: [6]   - SLM_IEC_RSV1
# CHECK-NEXT: [7]   - SLM_MEC_RSV

# CHECK:      Resource pressure per iteration:
# CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]
# CHECK-NEXT:  -      -      -      -      -     8.00   8.00   24.00

# CHECK:      Resource pressure by instruction:
# CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    Instructions:
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchg8b	(%rax)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchg16b	(%rax)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchg8b	(%rax)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchg16b	(%rax)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -     cmpxchgb	%bl, %cl
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -     cmpxchgw	%bx, %cx
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -     cmpxchgl	%ebx, %ecx
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -     cmpxchgq	%rbx, %rcx
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchgb	%bl, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchgw	%bx, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchgl	%ebx, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   cmpxchgq	%rbx, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchgb	%bl, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchgw	%bx, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchgl	%ebx, (%rsi)
# CHECK-NEXT:  -      -      -      -      -     0.50   0.50   2.00   lock		cmpxchgq	%rbx, (%rsi)
