; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -mergeicmps -expandmemcmp -mcpu=pwr8 -mtriple=powerpc64le-unknown-linux < %s | FileCheck %s --check-prefix=PPC64LE

; This tests interaction between MergeICmp and ExpandMemCmp.

%"struct.std::pair" = type { i32, i32 }

define zeroext i1 @opeq1(
; PPC64LE-LABEL: @opeq1(
; PPC64LE-NEXT:  "entry+land.rhs.i":
; PPC64LE-NEXT:    [[TMP0:%.*]] = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* [[A:%.*]], i64 0, i32 0
; PPC64LE-NEXT:    [[TMP1:%.*]] = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* [[B:%.*]], i64 0, i32 0
; PPC64LE-NEXT:    [[CSTR:%.*]] = bitcast i32* [[TMP0]] to i8*
; PPC64LE-NEXT:    [[CSTR1:%.*]] = bitcast i32* [[TMP1]] to i8*
; PPC64LE-NEXT:    [[TMP2:%.*]] = bitcast i8* [[CSTR]] to i64*
; PPC64LE-NEXT:    [[TMP3:%.*]] = bitcast i8* [[CSTR1]] to i64*
; PPC64LE-NEXT:    [[TMP4:%.*]] = load i64, i64* [[TMP2]]
; PPC64LE-NEXT:    [[TMP5:%.*]] = load i64, i64* [[TMP3]]
; PPC64LE-NEXT:    [[TMP6:%.*]] = icmp ne i64 [[TMP4]], [[TMP5]]
; PPC64LE-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP6]] to i32
; PPC64LE-NEXT:    [[TMP8:%.*]] = icmp eq i32 [[TMP7]], 0
; PPC64LE-NEXT:    br label [[OPEQ1_EXIT:%.*]]
; PPC64LE:       opeq1.exit:
; PPC64LE-NEXT:    ret i1 [[TMP8]]
;
  %"struct.std::pair"* nocapture readonly dereferenceable(8) %a,
  %"struct.std::pair"* nocapture readonly dereferenceable(8) %b) local_unnamed_addr #0 {
entry:
  %first.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %a, i64 0, i32 0
  %0 = load i32, i32* %first.i, align 4
  %first1.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %b, i64 0, i32 0
  %1 = load i32, i32* %first1.i, align 4
  %cmp.i = icmp eq i32 %0, %1
  br i1 %cmp.i, label %land.rhs.i, label %opeq1.exit

land.rhs.i:
  %second.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %a, i64 0, i32 1
  %2 = load i32, i32* %second.i, align 4
  %second2.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %b, i64 0, i32 1
  %3 = load i32, i32* %second2.i, align 4
  %cmp3.i = icmp eq i32 %2, %3
  br label %opeq1.exit

opeq1.exit:
  %4 = phi i1 [ false, %entry ], [ %cmp3.i, %land.rhs.i ]
  ret i1 %4
}


