; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s

; https://bugs.llvm.org/show_bug.cgi?id=38708

; ============================================================================ ;
; Interference tests.
; We might accidentally skip some of these, if we are not careful.
; ============================================================================ ;

declare i8 @gen8()

define i1 @interference0(i8 %bits0, i8 %bits1) {
; CHECK-LABEL: @interference0(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[T1_HIGHBITS:%.*]] = lshr i8 [[T1]], [[BITS1:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[T1_HIGHBITS]], 0
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %t2 = shl i8 1, %bits1
  %r = icmp ult i8 %t1, %t2
  ret i1 %r
}

define i1 @interference1(i8 %bits0, i8 %bits1) {
; CHECK-LABEL: @interference1(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[T2:%.*]] = shl i8 1, [[BITS1:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp uge i8 [[T2]], [[T1]]
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %t2 = shl i8 1, %bits1
  %r = icmp ule i8 %t1, %t2
  ret i1 %r
}

define i1 @interference2(i8 %bits0, i8 %bits1) {
; CHECK-LABEL: @interference2(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[T2:%.*]] = shl i8 1, [[BITS1:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ult i8 [[T2]], [[T1]]
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %t2 = shl i8 1, %bits1
  %r = icmp ugt i8 %t1, %t2
  ret i1 %r
}

define i1 @interference3(i8 %bits0, i8 %bits1) {
; CHECK-LABEL: @interference3(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[T1_HIGHBITS:%.*]] = lshr i8 [[T1]], [[BITS1:%.*]]
; CHECK-NEXT:    [[R:%.*]] = icmp ne i8 [[T1_HIGHBITS]], 0
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %t2 = shl i8 1, %bits1
  %r = icmp uge i8 %t1, %t2
  ret i1 %r
}



define i1 @commuted_interference0(i8 %bits0) {
; CHECK-LABEL: @commuted_interference0(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[BITS1:%.*]] = call i8 @gen8()
; CHECK-NEXT:    [[T1_HIGHBITS:%.*]] = lshr i8 [[T1]], [[BITS1]]
; CHECK-NEXT:    [[R:%.*]] = icmp eq i8 [[T1_HIGHBITS]], 0
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %bits1 = call i8 @gen8()
  %t2 = shl i8 1, %bits1
  %r = icmp ult i8 %t1, %t2
  ret i1 %r
}

define i1 @commuted_interference1(i8 %bits0) {
; CHECK-LABEL: @commuted_interference1(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[BITS1:%.*]] = call i8 @gen8()
; CHECK-NEXT:    [[T2:%.*]] = shl i8 1, [[BITS1]]
; CHECK-NEXT:    [[R:%.*]] = icmp uge i8 [[T2]], [[T1]]
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %bits1 = call i8 @gen8()
  %t2 = shl i8 1, %bits1
  %r = icmp ule i8 %t1, %t2
  ret i1 %r
}

define i1 @commuted_interference2(i8 %bits0) {
; CHECK-LABEL: @commuted_interference2(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[BITS1:%.*]] = call i8 @gen8()
; CHECK-NEXT:    [[T2:%.*]] = shl i8 1, [[BITS1]]
; CHECK-NEXT:    [[R:%.*]] = icmp ult i8 [[T2]], [[T1]]
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %bits1 = call i8 @gen8()
  %t2 = shl i8 1, %bits1
  %r = icmp ugt i8 %t1, %t2
  ret i1 %r
}

define i1 @commuted_interference3(i8 %bits0) {
; CHECK-LABEL: @commuted_interference3(
; CHECK-NEXT:    [[T0:%.*]] = shl i8 -1, [[BITS0:%.*]]
; CHECK-NEXT:    [[T1:%.*]] = xor i8 [[T0]], -1
; CHECK-NEXT:    [[BITS1:%.*]] = call i8 @gen8()
; CHECK-NEXT:    [[T1_HIGHBITS:%.*]] = lshr i8 [[T1]], [[BITS1]]
; CHECK-NEXT:    [[R:%.*]] = icmp ne i8 [[T1_HIGHBITS]], 0
; CHECK-NEXT:    ret i1 [[R]]
;
  %t0 = shl i8 -1, %bits0
  %t1 = xor i8 %t0, -1
  %bits1 = call i8 @gen8()
  %t2 = shl i8 1, %bits1
  %r = icmp uge i8 %t1, %t2
  ret i1 %r
}
